   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lab12-cyclic.c"
  21              	.Ltext0:
  22              		.file 1 "../lab12-cyclic.c"
 2154              		.align	2
 2157              	pjobs:
 2158 0000 00000000 		.word	JobA
 2159 0004 00000000 		.word	JobB
 2160 0008 00000000 		.word	JobA
 2161 000c 00000000 		.word	JobB
 2162 0010 00000000 		.word	JobA
 2163 0014 00000000 		.word	JobB
 2164 0018 00000000 		.word	JobA
 2165 001c 00000000 		.word	JobB
 2166 0020 00000000 		.word	JobA
 2167 0024 00000000 		.word	JobC
 2168 0028 00000000 		.word	JobA
 2169 002c 00000000 		.word	JobB
 2170 0030 00000000 		.word	JobA
 2171 0034 00000000 		.word	JobB
 2172 0038 00000000 		.word	JobA
 2173 003c 00000000 		.word	JobB
 2174 0040 00000000 		.word	JobA
 2175 0044 00000000 		.word	JobB
 2176 0048 00000000 		.word	JobA
 2177 004c 00000000 		.word	JobD
 2178 0050 00000000 		.word	JobA
 2179 0054 00000000 		.word	JobB
 2180 0058 00000000 		.word	JobA
 2181 005c 00000000 		.word	JobB
 2182 0060 00000000 		.word	JobA
 2183 0064 00000000 		.word	JobB
 2184 0068 00000000 		.word	JobA
 2185 006c 00000000 		.word	JobB
 2186 0070 00000000 		.word	JobA
 2187 0074 00000000 		.word	JobC
 2188 0078 00000000 		.word	JobA
 2189 007c 00000000 		.word	JobB
 2190 0080 00000000 		.word	JobA
 2191 0084 00000000 		.word	JobB
 2192 0088 00000000 		.word	JobA
 2193 008c 00000000 		.word	JobB
 2194 0090 00000000 		.word	JobA
 2195 0094 00000000 		.word	JobB
 2196 0098 00000000 		.word	JobA
 2197 009c 00000000 		.word	JobD
 2198 00a0 00000000 		.word	JobA
 2199 00a4 00000000 		.word	JobB
 2200 00a8 00000000 		.word	JobA
 2201 00ac 00000000 		.word	JobB
 2202 00b0 00000000 		.word	JobA
 2203 00b4 00000000 		.word	JobB
 2204 00b8 00000000 		.word	JobA
 2205 00bc 00000000 		.word	JobB
 2206 00c0 00000000 		.word	JobA
 2207 00c4 00000000 		.word	JobC
 2208 00c8 00000000 		.word	JobA
 2209 00cc 00000000 		.word	JobB
 2210 00d0 00000000 		.word	JobA
 2211 00d4 00000000 		.word	JobB
 2212 00d8 00000000 		.word	JobA
 2213 00dc 00000000 		.word	JobB
 2214 00e0 00000000 		.word	JobA
 2215 00e4 00000000 		.word	JobB
 2216 00e8 00000000 		.word	JobA
 2217 00ec 00000000 		.word	JobD
 2218 00f0 00000000 		.word	JobA
 2219 00f4 00000000 		.word	JobB
 2220 00f8 00000000 		.word	JobA
 2221 00fc 00000000 		.word	JobB
 2222 0100 00000000 		.word	JobA
 2223 0104 00000000 		.word	JobB
 2224 0108 00000000 		.word	JobA
 2225 010c 00000000 		.word	JobB
 2226 0110 00000000 		.word	JobA
 2227 0114 00000000 		.word	JobC
 2228 0118 00000000 		.word	JobA
 2229 011c 00000000 		.word	JobB
 2230 0120 00000000 		.word	JobA
 2231 0124 00000000 		.word	JobB
 2232 0128 00000000 		.word	JobA
 2233 012c 00000000 		.word	JobB
 2234 0130 00000000 		.word	JobA
 2235 0134 00000000 		.word	JobB
 2236 0138 00000000 		.word	JobA
 2237 013c 00000000 		.word	JobD
 2238 0140 00000000 		.word	JobA
 2239 0144 00000000 		.word	JobB
 2240 0148 00000000 		.word	JobA
 2241 014c 00000000 		.word	JobB
 2242 0150 00000000 		.word	JobA
 2243 0154 00000000 		.word	JobB
 2244 0158 00000000 		.word	JobA
 2245 015c 00000000 		.word	JobB
 2246 0160 00000000 		.word	JobA
 2247 0164 00000000 		.word	JobC
 2248 0168 00000000 		.word	JobA
 2249 016c 00000000 		.word	JobB
 2250 0170 00000000 		.word	JobA
 2251 0174 00000000 		.word	JobB
 2252 0178 00000000 		.word	JobA
 2253 017c 00000000 		.word	JobB
 2254 0180 00000000 		.word	JobA
 2255 0184 00000000 		.word	JobB
 2256 0188 00000000 		.word	JobA
 2257 018c 00000000 		.word	JobD
 2258 0190 00000000 		.word	JobA
 2259 0194 00000000 		.word	JobB
 2260 0198 00000000 		.word	JobA
 2261 019c 00000000 		.word	JobB
 2262 01a0 00000000 		.word	JobA
 2263 01a4 00000000 		.word	JobB
 2264 01a8 00000000 		.word	JobA
 2265 01ac 00000000 		.word	JobB
 2266 01b0 00000000 		.word	JobA
 2267 01b4 00000000 		.word	JobC
 2268 01b8 00000000 		.word	JobA
 2269 01bc 00000000 		.word	JobB
 2270 01c0 00000000 		.word	JobA
 2271 01c4 00000000 		.word	JobB
 2272 01c8 00000000 		.word	JobA
 2273 01cc 00000000 		.word	JobB
 2274 01d0 00000000 		.word	JobA
 2275 01d4 00000000 		.word	JobB
 2276 01d8 00000000 		.word	JobA
 2277 01dc 00000000 		.word	JobD
 2278 01e0 00000000 		.word	JobA
 2279 01e4 00000000 		.word	JobB
 2280 01e8 00000000 		.word	JobA
 2281 01ec 00000000 		.word	JobB
 2282 01f0 00000000 		.word	JobA
 2283 01f4 00000000 		.word	JobB
 2284 01f8 00000000 		.word	JobA
 2285 01fc 00000000 		.word	JobB
 2286 0200 00000000 		.word	JobA
 2287 0204 00000000 		.word	JobC
 2288 0208 00000000 		.word	JobA
 2289 020c 00000000 		.word	JobB
 2290 0210 00000000 		.word	JobA
 2291 0214 00000000 		.word	JobB
 2292 0218 00000000 		.word	JobA
 2293 021c 00000000 		.word	JobB
 2294 0220 00000000 		.word	JobA
 2295 0224 00000000 		.word	JobB
 2296 0228 00000000 		.word	JobA
 2297 022c 00000000 		.word	JobD
 2298 0230 00000000 		.word	JobA
 2299 0234 00000000 		.word	JobB
 2300 0238 00000000 		.word	JobA
 2301 023c 00000000 		.word	JobB
 2302 0240 00000000 		.word	JobA
 2303 0244 00000000 		.word	JobB
 2304 0248 00000000 		.word	JobA
 2305 024c 00000000 		.word	JobB
 2306 0250 00000000 		.word	JobA
 2307 0254 00000000 		.word	JobC
 2308 0258 00000000 		.word	JobA
 2309 025c 00000000 		.word	JobB
 2310 0260 00000000 		.word	JobA
 2311 0264 00000000 		.word	JobB
 2312 0268 00000000 		.word	JobA
 2313 026c 00000000 		.word	JobB
 2314 0270 00000000 		.word	JobA
 2315 0274 00000000 		.word	JobB
 2316 0278 00000000 		.word	JobA
 2317 027c 00000000 		.word	JobD
 2318 0280 00000000 		.word	JobA
 2319 0284 00000000 		.word	JobB
 2320 0288 00000000 		.word	JobA
 2321 028c 00000000 		.word	JobB
 2322 0290 00000000 		.word	JobA
 2323 0294 00000000 		.word	JobB
 2324 0298 00000000 		.word	JobA
 2325 029c 00000000 		.word	JobB
 2326 02a0 00000000 		.word	JobA
 2327 02a4 00000000 		.word	JobC
 2328 02a8 00000000 		.word	JobA
 2329 02ac 00000000 		.word	JobB
 2330 02b0 00000000 		.word	JobA
 2331 02b4 00000000 		.word	JobB
 2332 02b8 00000000 		.word	JobA
 2333 02bc 00000000 		.word	JobB
 2334 02c0 00000000 		.word	JobA
 2335 02c4 00000000 		.word	JobB
 2336 02c8 00000000 		.word	JobA
 2337 02cc 00000000 		.word	JobD
 2338 02d0 00000000 		.word	JobA
 2339 02d4 00000000 		.word	JobB
 2340 02d8 00000000 		.word	JobA
 2341 02dc 00000000 		.word	JobB
 2342 02e0 00000000 		.word	JobA
 2343 02e4 00000000 		.word	JobB
 2344 02e8 00000000 		.word	JobA
 2345 02ec 00000000 		.word	JobB
 2346 02f0 00000000 		.word	JobA
 2347 02f4 00000000 		.word	JobC
 2348 02f8 00000000 		.word	JobA
 2349 02fc 00000000 		.word	JobB
 2350 0300 00000000 		.word	JobA
 2351 0304 00000000 		.word	JobB
 2352 0308 00000000 		.word	JobA
 2353 030c 00000000 		.word	JobB
 2354 0310 00000000 		.word	JobA
 2355 0314 00000000 		.word	JobB
 2356 0318 00000000 		.word	JobA
 2357 031c 00000000 		.word	JobE
 2358              		.align	2
 2359              	.LC0:
 2360 0320 0A0A2045 		.ascii	"\012\012 Ejecutando una aplicaci\363n cyclic execut"
 2360      6A656375 
 2360      74616E64 
 2360      6F20756E 
 2360      61206170 
 2361 034a 6976650A 		.ascii	"ive\012\000"
 2361      00
 2362 034f 00       		.align	2
 2363              	.LC1:
 2364 0350 202D2D2D 		.ascii	" ------------------------------------------\012\012"
 2364      2D2D2D2D 
 2364      2D2D2D2D 
 2364      2D2D2D2D 
 2364      2D2D2D2D 
 2365 037d 00       		.ascii	"\000"
 2366              		.text
 2367              		.align	2
 2368              		.global	main
 2370              	main:
 2371              	.LFB0:
   1:../lab12-cyclic.c **** /*-------------------------------------------------------------------
   2:../lab12-cyclic.c **** **
   3:../lab12-cyclic.c **** **  Fichero:
   4:../lab12-cyclic.c **** **    lab12-cyclic.c  14/1/2021
   5:../lab12-cyclic.c **** **
   6:../lab12-cyclic.c **** **    (c) J.M. Mendias
   7:../lab12-cyclic.c **** **    Programación de Sistemas y Dispositivos
   8:../lab12-cyclic.c **** **    Facultad de Informática. Universidad Complutense de Madrid
   9:../lab12-cyclic.c **** **
  10:../lab12-cyclic.c **** **  Propósito:
  11:../lab12-cyclic.c **** **    Ejemplo de una aplicación guiada por tiempo con arquitectura
  12:../lab12-cyclic.c **** **    cyclic executive
  13:../lab12-cyclic.c **** **
  14:../lab12-cyclic.c **** **  Notas de diseño:
  15:../lab12-cyclic.c **** **
  16:../lab12-cyclic.c **** **-----------------------------------------------------------------*/
  17:../lab12-cyclic.c **** 
  18:../lab12-cyclic.c **** #include <s3c44b0x.h>
  19:../lab12-cyclic.c **** #include <s3cev40.h>
  20:../lab12-cyclic.c **** #include <common_types.h>
  21:../lab12-cyclic.c **** #include <system.h>
  22:../lab12-cyclic.c **** #include <leds.h>
  23:../lab12-cyclic.c **** #include <segs.h>
  24:../lab12-cyclic.c **** #include <uart.h>
  25:../lab12-cyclic.c **** #include <pbs.h>
  26:../lab12-cyclic.c **** #include <keypad.h>
  27:../lab12-cyclic.c **** #include <timers.h>
  28:../lab12-cyclic.c **** #include <rtc.h>
  29:../lab12-cyclic.c **** #include <lcd.h>
  30:../lab12-cyclic.c **** 
  31:../lab12-cyclic.c **** #define TICKS_PER_SEC   (100)
  32:../lab12-cyclic.c **** 
  33:../lab12-cyclic.c **** #define MAYOR_PERIOD (10000)    /* mcm( 50 ms, 100 ms, 500 ms, 1000 ms, 10000 ms */
  34:../lab12-cyclic.c **** #define MINOR_PERIOD (50)       /* 50 ms */
  35:../lab12-cyclic.c **** 
  36:../lab12-cyclic.c **** #define NUM_JOBS     (MAYOR_PERIOD/MINOR_PERIOD)
  37:../lab12-cyclic.c **** 
  38:../lab12-cyclic.c **** typedef void (*pf_t)(void);
  39:../lab12-cyclic.c **** 
  40:../lab12-cyclic.c **** /* Declaración de recursos */
  41:../lab12-cyclic.c **** 
  42:../lab12-cyclic.c **** uint8 scancode;
  43:../lab12-cyclic.c **** boolean flagTask5;
  44:../lab12-cyclic.c **** boolean flagTask6;
  45:../lab12-cyclic.c **** boolean flagTask8;
  46:../lab12-cyclic.c **** 
  47:../lab12-cyclic.c **** volatile boolean flagPb;
  48:../lab12-cyclic.c **** volatile boolean flagTimer;
  49:../lab12-cyclic.c **** 
  50:../lab12-cyclic.c **** /* Declaración de tareas */
  51:../lab12-cyclic.c **** 
  52:../lab12-cyclic.c **** void Task1( void );
  53:../lab12-cyclic.c **** void Task2( void );
  54:../lab12-cyclic.c **** void Task3( void );
  55:../lab12-cyclic.c **** void Task4( void );
  56:../lab12-cyclic.c **** void Task5( void );
  57:../lab12-cyclic.c **** void Task6( void );
  58:../lab12-cyclic.c **** void Task7( void );
  59:../lab12-cyclic.c **** void Task8( void );
  60:../lab12-cyclic.c **** void Task9( void );
  61:../lab12-cyclic.c **** 
  62:../lab12-cyclic.c **** /* Declaración de trabajos */
  63:../lab12-cyclic.c **** 
  64:../lab12-cyclic.c **** void JobA( void );
  65:../lab12-cyclic.c **** void JobB( void );
  66:../lab12-cyclic.c **** void JobC( void );
  67:../lab12-cyclic.c **** void JobD( void );
  68:../lab12-cyclic.c **** void JobE( void );
  69:../lab12-cyclic.c **** 
  70:../lab12-cyclic.c **** /* Planificación estática de trabajos */
  71:../lab12-cyclic.c **** 
  72:../lab12-cyclic.c **** const pf_t pjobs[NUM_JOBS] =
  73:../lab12-cyclic.c **** {
  74:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*   500 ms */
  75:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  1000 ms */
  76:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  1500 ms */
  77:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  2000 ms */
  78:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  2500 ms */
  79:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  3000 ms */
  80:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  3500 ms */
  81:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  4000 ms */
  82:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  4500 ms */
  83:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  5000 ms */
  84:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  5500 ms */
  85:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  6000 ms */
  86:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  6500 ms */
  87:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  7000 ms */
  88:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  7500 ms */
  89:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  8000 ms */
  90:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  8500 ms */
  91:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobD,    /*  9000 ms */
  92:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobC,    /*  9500 ms */
  93:../lab12-cyclic.c ****     JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobB, JobA, JobE     /* 10000 ms */
  94:../lab12-cyclic.c **** };
  95:../lab12-cyclic.c **** 
  96:../lab12-cyclic.c **** /* Declaración de RTI */
  97:../lab12-cyclic.c **** 
  98:../lab12-cyclic.c **** void isr_pb( void ) __attribute__ ((interrupt ("IRQ")));
  99:../lab12-cyclic.c **** void isr_tick( void ) __attribute__ ((interrupt ("IRQ")));
 100:../lab12-cyclic.c **** 
 101:../lab12-cyclic.c **** /*******************************************************************/
 102:../lab12-cyclic.c **** 
 103:../lab12-cyclic.c **** void main( void )
 104:../lab12-cyclic.c **** {
 2372              		.loc 1 104 0
 2373              		.cfi_startproc
 2374              		@ Function supports interworking.
 2375              		@ args = 0, pretend = 0, frame = 8
 2376              		@ frame_needed = 1, uses_anonymous_args = 0
 2377 0000 0DC0A0E1 		mov	ip, sp
 2378              	.LCFI0:
 2379              		.cfi_def_cfa_register 12
 2380 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2381 0008 04B04CE2 		sub	fp, ip, #4
 2382              		.cfi_offset 14, -8
 2383              		.cfi_offset 13, -12
 2384              		.cfi_offset 11, -16
 2385              	.LCFI1:
 2386              		.cfi_def_cfa 11, 4
 2387 000c 08D04DE2 		sub	sp, sp, #8
 105:../lab12-cyclic.c ****     uint8 i;
 106:../lab12-cyclic.c ****     
 107:../lab12-cyclic.c ****     sys_init();      /* Inicializa el sistema */
 2388              		.loc 1 107 0
 2389 0010 FEFFFFEB 		bl	sys_init
 108:../lab12-cyclic.c ****     timers_init();
 2390              		.loc 1 108 0
 2391 0014 FEFFFFEB 		bl	timers_init
 109:../lab12-cyclic.c ****     uart0_init();
 2392              		.loc 1 109 0
 2393 0018 FEFFFFEB 		bl	uart0_init
 110:../lab12-cyclic.c ****     leds_init();
 2394              		.loc 1 110 0
 2395 001c FEFFFFEB 		bl	leds_init
 111:../lab12-cyclic.c ****     segs_init();
 2396              		.loc 1 111 0
 2397 0020 FEFFFFEB 		bl	segs_init
 112:../lab12-cyclic.c ****     rtc_init();
 2398              		.loc 1 112 0
 2399 0024 FEFFFFEB 		bl	rtc_init
 113:../lab12-cyclic.c ****     pbs_init();
 2400              		.loc 1 113 0
 2401 0028 FEFFFFEB 		bl	pbs_init
 114:../lab12-cyclic.c ****     keypad_init();  
 2402              		.loc 1 114 0
 2403 002c FEFFFFEB 		bl	keypad_init
 115:../lab12-cyclic.c ****     lcd_init();
 2404              		.loc 1 115 0
 2405 0030 FEFFFFEB 		bl	lcd_init
 116:../lab12-cyclic.c **** 
 117:../lab12-cyclic.c ****     lcd_clear();
 2406              		.loc 1 117 0
 2407 0034 FEFFFFEB 		bl	lcd_clear
 118:../lab12-cyclic.c ****     lcd_on();
 2408              		.loc 1 118 0
 2409 0038 FEFFFFEB 		bl	lcd_on
 119:../lab12-cyclic.c **** 
 120:../lab12-cyclic.c ****     uart0_puts( "\n\n Ejecutando una aplicación cyclic executive\n" );
 2410              		.loc 1 120 0
 2411 003c E8009FE5 		ldr	r0, .L7
 2412 0040 FEFFFFEB 		bl	uart0_puts
 121:../lab12-cyclic.c ****     uart0_puts(     " ------------------------------------------\n\n" ) ;
 2413              		.loc 1 121 0
 2414 0044 E4009FE5 		ldr	r0, .L7+4
 2415 0048 FEFFFFEB 		bl	uart0_puts
 122:../lab12-cyclic.c **** 
 123:../lab12-cyclic.c ****     flagTask5 = FALSE;    /* Inicializa flags */
 2416              		.loc 1 123 0
 2417 004c E0309FE5 		ldr	r3, .L7+8
 2418 0050 0020A0E3 		mov	r2, #0
 2419 0054 0020C3E5 		strb	r2, [r3, #0]
 124:../lab12-cyclic.c ****     flagTask6 = FALSE;
 2420              		.loc 1 124 0
 2421 0058 D8309FE5 		ldr	r3, .L7+12
 2422 005c 0020A0E3 		mov	r2, #0
 2423 0060 0020C3E5 		strb	r2, [r3, #0]
 125:../lab12-cyclic.c ****     flagTask8 = FALSE;
 2424              		.loc 1 125 0
 2425 0064 D0309FE5 		ldr	r3, .L7+16
 2426 0068 0020A0E3 		mov	r2, #0
 2427 006c 0020C3E5 		strb	r2, [r3, #0]
 126:../lab12-cyclic.c ****     flagPb    = FALSE;
 2428              		.loc 1 126 0
 2429 0070 C8309FE5 		ldr	r3, .L7+20
 2430 0074 0020A0E3 		mov	r2, #0
 2431 0078 0020C3E5 		strb	r2, [r3, #0]
 127:../lab12-cyclic.c ****     flagTimer = FALSE;
 2432              		.loc 1 127 0
 2433 007c C0309FE5 		ldr	r3, .L7+24
 2434 0080 0020A0E3 		mov	r2, #0
 2435 0084 0020C3E5 		strb	r2, [r3, #0]
 128:../lab12-cyclic.c **** 
 129:../lab12-cyclic.c ****     Task1();    /* Ejecuta por primera vez a las funciones para inicializarlas */
 2436              		.loc 1 129 0
 2437 0088 FEFFFFEB 		bl	Task1
 130:../lab12-cyclic.c ****     Task2();
 2438              		.loc 1 130 0
 2439 008c FEFFFFEB 		bl	Task2
 131:../lab12-cyclic.c ****     Task3();
 2440              		.loc 1 131 0
 2441 0090 FEFFFFEB 		bl	Task3
 132:../lab12-cyclic.c ****     Task4();
 2442              		.loc 1 132 0
 2443 0094 FEFFFFEB 		bl	Task4
 133:../lab12-cyclic.c ****     Task5();
 2444              		.loc 1 133 0
 2445 0098 FEFFFFEB 		bl	Task5
 134:../lab12-cyclic.c ****     Task6();
 2446              		.loc 1 134 0
 2447 009c FEFFFFEB 		bl	Task6
 135:../lab12-cyclic.c ****     Task7();
 2448              		.loc 1 135 0
 2449 00a0 FEFFFFEB 		bl	Task7
 136:../lab12-cyclic.c ****     Task8();
 2450              		.loc 1 136 0
 2451 00a4 FEFFFFEB 		bl	Task8
 137:../lab12-cyclic.c ****     Task9();
 2452              		.loc 1 137 0
 2453 00a8 FEFFFFEB 		bl	Task9
 138:../lab12-cyclic.c **** 
 139:../lab12-cyclic.c ****     pbs_open( isr_pb );                                          /* Instala isr_pbs como RTI por pr
 2454              		.loc 1 139 0
 2455 00ac 94009FE5 		ldr	r0, .L7+28
 2456 00b0 FEFFFFEB 		bl	pbs_open
 140:../lab12-cyclic.c ****     timer0_open_ms( isr_tick, MINOR_PERIOD, TIMER_INTERVAL );    /* Instala isr_tick como RTI del t
 2457              		.loc 1 140 0
 2458 00b4 90009FE5 		ldr	r0, .L7+32
 2459 00b8 3210A0E3 		mov	r1, #50
 2460 00bc 0120A0E3 		mov	r2, #1
 2461 00c0 FEFFFFEB 		bl	timer0_open_ms
 2462 00c4 000000EA 		b	.L5
 2463              	.L6:
 141:../lab12-cyclic.c ****         
 142:../lab12-cyclic.c ****     while( 1 )
 143:../lab12-cyclic.c ****     {
 144:../lab12-cyclic.c ****         sleep();                        /* Entra en estado IDLE, sale por interrupción */
 145:../lab12-cyclic.c ****         if( flagTimer )
 146:../lab12-cyclic.c ****         {
 147:../lab12-cyclic.c ****         	flagTimer = FALSE;
 148:../lab12-cyclic.c ****         	(*pjobs[i])();              /* Las tareas que forman el trabajo se ejecutan en esta hebra 
 149:../lab12-cyclic.c ****         	i = ( i==NUM_JOBS-1 ? 0 : i+1 );
 150:../lab12-cyclic.c ****         }
 151:../lab12-cyclic.c ****     }
 2464              		.loc 1 151 0
 2465 00c8 0000A0E1 		mov	r0, r0	@ nop
 2466              	.L5:
 144:../lab12-cyclic.c ****         sleep();                        /* Entra en estado IDLE, sale por interrupción */
 2467              		.loc 1 144 0
 2468 00cc FEFFFFEB 		bl	sleep
 145:../lab12-cyclic.c ****         if( flagTimer )
 2469              		.loc 1 145 0
 2470 00d0 6C309FE5 		ldr	r3, .L7+24
 2471 00d4 0030D3E5 		ldrb	r3, [r3, #0]
 2472 00d8 FF3003E2 		and	r3, r3, #255
 2473 00dc 000053E3 		cmp	r3, #0
 2474 00e0 F8FFFF0A 		beq	.L6
 147:../lab12-cyclic.c ****         	flagTimer = FALSE;
 2475              		.loc 1 147 0
 2476 00e4 58309FE5 		ldr	r3, .L7+24
 2477 00e8 0020A0E3 		mov	r2, #0
 2478 00ec 0020C3E5 		strb	r2, [r3, #0]
 148:../lab12-cyclic.c ****         	(*pjobs[i])();              /* Las tareas que forman el trabajo se ejecutan en esta hebra 
 2479              		.loc 1 148 0
 2480 00f0 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 2481 00f4 54309FE5 		ldr	r3, .L7+36
 2482 00f8 023193E7 		ldr	r3, [r3, r2, asl #2]
 2483 00fc 0FE0A0E1 		mov	lr, pc
 2484 0100 13FF2FE1 		bx	r3
 149:../lab12-cyclic.c ****         	i = ( i==NUM_JOBS-1 ? 0 : i+1 );
 2485              		.loc 1 149 0
 2486 0104 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2487 0108 C70053E3 		cmp	r3, #199
 2488 010c 0300000A 		beq	.L3
 149:../lab12-cyclic.c ****         	i = ( i==NUM_JOBS-1 ? 0 : i+1 );
 2489              		.loc 1 149 0 is_stmt 0 discriminator 1
 2490 0110 0D305BE5 		ldrb	r3, [fp, #-13]
 2491 0114 013083E2 		add	r3, r3, #1
 2492 0118 FF3003E2 		and	r3, r3, #255
 2493 011c 000000EA 		b	.L4
 2494              	.L3:
 149:../lab12-cyclic.c ****         	i = ( i==NUM_JOBS-1 ? 0 : i+1 );
 2495              		.loc 1 149 0 discriminator 2
 2496 0120 0030A0E3 		mov	r3, #0
 2497              	.L4:
 149:../lab12-cyclic.c ****         	i = ( i==NUM_JOBS-1 ? 0 : i+1 );
 2498              		.loc 1 149 0 discriminator 3
 2499 0124 0D304BE5 		strb	r3, [fp, #-13]
 2500              		.loc 1 151 0 is_stmt 1 discriminator 3
 2501 0128 E7FFFFEA 		b	.L5
 2502              	.L8:
 2503              		.align	2
 2504              	.L7:
 2505 012c 20030000 		.word	.LC0
 2506 0130 50030000 		.word	.LC1
 2507 0134 00000000 		.word	flagTask5
 2508 0138 00000000 		.word	flagTask6
 2509 013c 00000000 		.word	flagTask8
 2510 0140 00000000 		.word	flagPb
 2511 0144 00000000 		.word	flagTimer
 2512 0148 00000000 		.word	isr_pb
 2513 014c 00000000 		.word	isr_tick
 2514 0150 00000000 		.word	pjobs
 2515              		.cfi_endproc
 2516              	.LFE0:
 2518              		.align	2
 2519              		.global	JobA
 2521              	JobA:
 2522              	.LFB1:
 152:../lab12-cyclic.c **** }
 153:../lab12-cyclic.c **** 
 154:../lab12-cyclic.c **** /*******************************************************************/
 155:../lab12-cyclic.c **** 
 156:../lab12-cyclic.c **** void JobA( void )
 157:../lab12-cyclic.c **** {
 2523              		.loc 1 157 0
 2524              		.cfi_startproc
 2525              		@ Function supports interworking.
 2526              		@ args = 0, pretend = 0, frame = 0
 2527              		@ frame_needed = 1, uses_anonymous_args = 0
 2528 0154 0DC0A0E1 		mov	ip, sp
 2529              	.LCFI2:
 2530              		.cfi_def_cfa_register 12
 2531 0158 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2532 015c 04B04CE2 		sub	fp, ip, #4
 2533              		.cfi_offset 14, -8
 2534              		.cfi_offset 13, -12
 2535              		.cfi_offset 11, -16
 2536              	.LCFI3:
 2537              		.cfi_def_cfa 11, 4
 158:../lab12-cyclic.c ****     Task2();
 2538              		.loc 1 158 0
 2539 0160 FEFFFFEB 		bl	Task2
 159:../lab12-cyclic.c ****     Task7();
 2540              		.loc 1 159 0
 2541 0164 FEFFFFEB 		bl	Task7
 160:../lab12-cyclic.c **** }
 2542              		.loc 1 160 0
 2543 0168 0CD04BE2 		sub	sp, fp, #12
 2544 016c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2545 0170 1EFF2FE1 		bx	lr
 2546              		.cfi_endproc
 2547              	.LFE1:
 2549              		.align	2
 2550              		.global	JobB
 2552              	JobB:
 2553              	.LFB2:
 161:../lab12-cyclic.c **** 
 162:../lab12-cyclic.c **** void JobB( void )
 163:../lab12-cyclic.c **** {
 2554              		.loc 1 163 0
 2555              		.cfi_startproc
 2556              		@ Function supports interworking.
 2557              		@ args = 0, pretend = 0, frame = 0
 2558              		@ frame_needed = 1, uses_anonymous_args = 0
 2559 0174 0DC0A0E1 		mov	ip, sp
 2560              	.LCFI4:
 2561              		.cfi_def_cfa_register 12
 2562 0178 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2563 017c 04B04CE2 		sub	fp, ip, #4
 2564              		.cfi_offset 14, -8
 2565              		.cfi_offset 13, -12
 2566              		.cfi_offset 11, -16
 2567              	.LCFI5:
 2568              		.cfi_def_cfa 11, 4
 164:../lab12-cyclic.c ****     Task2();
 2569              		.loc 1 164 0
 2570 0180 FEFFFFEB 		bl	Task2
 165:../lab12-cyclic.c ****     Task5();
 2571              		.loc 1 165 0
 2572 0184 FEFFFFEB 		bl	Task5
 166:../lab12-cyclic.c ****     Task6();
 2573              		.loc 1 166 0
 2574 0188 FEFFFFEB 		bl	Task6
 167:../lab12-cyclic.c ****     Task7();
 2575              		.loc 1 167 0
 2576 018c FEFFFFEB 		bl	Task7
 168:../lab12-cyclic.c ****     Task8();
 2577              		.loc 1 168 0
 2578 0190 FEFFFFEB 		bl	Task8
 169:../lab12-cyclic.c **** }
 2579              		.loc 1 169 0
 2580 0194 0CD04BE2 		sub	sp, fp, #12
 2581 0198 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2582 019c 1EFF2FE1 		bx	lr
 2583              		.cfi_endproc
 2584              	.LFE2:
 2586              		.align	2
 2587              		.global	JobC
 2589              	JobC:
 2590              	.LFB3:
 170:../lab12-cyclic.c **** 
 171:../lab12-cyclic.c **** void JobC( void )
 172:../lab12-cyclic.c **** {
 2591              		.loc 1 172 0
 2592              		.cfi_startproc
 2593              		@ Function supports interworking.
 2594              		@ args = 0, pretend = 0, frame = 0
 2595              		@ frame_needed = 1, uses_anonymous_args = 0
 2596 01a0 0DC0A0E1 		mov	ip, sp
 2597              	.LCFI6:
 2598              		.cfi_def_cfa_register 12
 2599 01a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2600 01a8 04B04CE2 		sub	fp, ip, #4
 2601              		.cfi_offset 14, -8
 2602              		.cfi_offset 13, -12
 2603              		.cfi_offset 11, -16
 2604              	.LCFI7:
 2605              		.cfi_def_cfa 11, 4
 173:../lab12-cyclic.c ****     Task2();
 2606              		.loc 1 173 0
 2607 01ac FEFFFFEB 		bl	Task2
 174:../lab12-cyclic.c ****     Task5();
 2608              		.loc 1 174 0
 2609 01b0 FEFFFFEB 		bl	Task5
 175:../lab12-cyclic.c ****     Task6();
 2610              		.loc 1 175 0
 2611 01b4 FEFFFFEB 		bl	Task6
 176:../lab12-cyclic.c ****     Task1();
 2612              		.loc 1 176 0
 2613 01b8 FEFFFFEB 		bl	Task1
 177:../lab12-cyclic.c ****     Task7();
 2614              		.loc 1 177 0
 2615 01bc FEFFFFEB 		bl	Task7
 178:../lab12-cyclic.c ****     Task8();
 2616              		.loc 1 178 0
 2617 01c0 FEFFFFEB 		bl	Task8
 179:../lab12-cyclic.c **** }
 2618              		.loc 1 179 0
 2619 01c4 0CD04BE2 		sub	sp, fp, #12
 2620 01c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2621 01cc 1EFF2FE1 		bx	lr
 2622              		.cfi_endproc
 2623              	.LFE3:
 2625              		.align	2
 2626              		.global	JobD
 2628              	JobD:
 2629              	.LFB4:
 180:../lab12-cyclic.c **** 
 181:../lab12-cyclic.c **** void JobD( void )
 182:../lab12-cyclic.c **** {
 2630              		.loc 1 182 0
 2631              		.cfi_startproc
 2632              		@ Function supports interworking.
 2633              		@ args = 0, pretend = 0, frame = 0
 2634              		@ frame_needed = 1, uses_anonymous_args = 0
 2635 01d0 0DC0A0E1 		mov	ip, sp
 2636              	.LCFI8:
 2637              		.cfi_def_cfa_register 12
 2638 01d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2639 01d8 04B04CE2 		sub	fp, ip, #4
 2640              		.cfi_offset 14, -8
 2641              		.cfi_offset 13, -12
 2642              		.cfi_offset 11, -16
 2643              	.LCFI9:
 2644              		.cfi_def_cfa 11, 4
 183:../lab12-cyclic.c ****     Task2();
 2645              		.loc 1 183 0
 2646 01dc FEFFFFEB 		bl	Task2
 184:../lab12-cyclic.c ****     Task5();
 2647              		.loc 1 184 0
 2648 01e0 FEFFFFEB 		bl	Task5
 185:../lab12-cyclic.c ****     Task6();
 2649              		.loc 1 185 0
 2650 01e4 FEFFFFEB 		bl	Task6
 186:../lab12-cyclic.c ****     Task1();
 2651              		.loc 1 186 0
 2652 01e8 FEFFFFEB 		bl	Task1
 187:../lab12-cyclic.c ****     Task3();
 2653              		.loc 1 187 0
 2654 01ec FEFFFFEB 		bl	Task3
 188:../lab12-cyclic.c ****     Task7();
 2655              		.loc 1 188 0
 2656 01f0 FEFFFFEB 		bl	Task7
 189:../lab12-cyclic.c ****     Task8();
 2657              		.loc 1 189 0
 2658 01f4 FEFFFFEB 		bl	Task8
 190:../lab12-cyclic.c ****     Task9();
 2659              		.loc 1 190 0
 2660 01f8 FEFFFFEB 		bl	Task9
 191:../lab12-cyclic.c **** }
 2661              		.loc 1 191 0
 2662 01fc 0CD04BE2 		sub	sp, fp, #12
 2663 0200 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2664 0204 1EFF2FE1 		bx	lr
 2665              		.cfi_endproc
 2666              	.LFE4:
 2668              		.align	2
 2669              		.global	JobE
 2671              	JobE:
 2672              	.LFB5:
 192:../lab12-cyclic.c **** 
 193:../lab12-cyclic.c **** void JobE( void )
 194:../lab12-cyclic.c **** {
 2673              		.loc 1 194 0
 2674              		.cfi_startproc
 2675              		@ Function supports interworking.
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 1, uses_anonymous_args = 0
 2678 0208 0DC0A0E1 		mov	ip, sp
 2679              	.LCFI10:
 2680              		.cfi_def_cfa_register 12
 2681 020c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2682 0210 04B04CE2 		sub	fp, ip, #4
 2683              		.cfi_offset 14, -8
 2684              		.cfi_offset 13, -12
 2685              		.cfi_offset 11, -16
 2686              	.LCFI11:
 2687              		.cfi_def_cfa 11, 4
 195:../lab12-cyclic.c ****     Task2();
 2688              		.loc 1 195 0
 2689 0214 FEFFFFEB 		bl	Task2
 196:../lab12-cyclic.c ****     Task5();
 2690              		.loc 1 196 0
 2691 0218 FEFFFFEB 		bl	Task5
 197:../lab12-cyclic.c ****     Task6();
 2692              		.loc 1 197 0
 2693 021c FEFFFFEB 		bl	Task6
 198:../lab12-cyclic.c ****     Task1();
 2694              		.loc 1 198 0
 2695 0220 FEFFFFEB 		bl	Task1
 199:../lab12-cyclic.c ****     Task3();
 2696              		.loc 1 199 0
 2697 0224 FEFFFFEB 		bl	Task3
 200:../lab12-cyclic.c ****     Task4();
 2698              		.loc 1 200 0
 2699 0228 FEFFFFEB 		bl	Task4
 201:../lab12-cyclic.c ****     Task7();
 2700              		.loc 1 201 0
 2701 022c FEFFFFEB 		bl	Task7
 202:../lab12-cyclic.c ****     Task8();
 2702              		.loc 1 202 0
 2703 0230 FEFFFFEB 		bl	Task8
 203:../lab12-cyclic.c ****     Task9();
 2704              		.loc 1 203 0
 2705 0234 FEFFFFEB 		bl	Task9
 204:../lab12-cyclic.c **** }
 2706              		.loc 1 204 0
 2707 0238 0CD04BE2 		sub	sp, fp, #12
 2708 023c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2709 0240 1EFF2FE1 		bx	lr
 2710              		.cfi_endproc
 2711              	.LFE5:
 2713              		.section	.rodata
 2714 037e 0000     		.align	2
 2715              	.LC2:
 2716 0380 20546173 		.ascii	" Task 1: iniciada.\012\000"
 2716      6B20313A 
 2716      20696E69 
 2716      63696164 
 2716      612E0A00 
 2717              		.text
 2718              		.align	2
 2719              		.global	Task1
 2721              	Task1:
 2722              	.LFB6:
 205:../lab12-cyclic.c **** 
 206:../lab12-cyclic.c **** /*******************************************************************/
 207:../lab12-cyclic.c **** 
 208:../lab12-cyclic.c **** void Task1( void )  /* Cada 0,5 segundos (50 ticks) alterna el led que se enciende */
 209:../lab12-cyclic.c **** {
 2723              		.loc 1 209 0
 2724              		.cfi_startproc
 2725              		@ Function supports interworking.
 2726              		@ args = 0, pretend = 0, frame = 0
 2727              		@ frame_needed = 1, uses_anonymous_args = 0
 2728 0244 0DC0A0E1 		mov	ip, sp
 2729              	.LCFI12:
 2730              		.cfi_def_cfa_register 12
 2731 0248 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2732 024c 04B04CE2 		sub	fp, ip, #4
 2733              		.cfi_offset 14, -8
 2734              		.cfi_offset 13, -12
 2735              		.cfi_offset 11, -16
 2736              	.LCFI13:
 2737              		.cfi_def_cfa 11, 4
 210:../lab12-cyclic.c ****     static boolean init = TRUE;
 211:../lab12-cyclic.c **** 
 212:../lab12-cyclic.c ****     if( init )
 2738              		.loc 1 212 0
 2739 0250 4C309FE5 		ldr	r3, .L17
 2740 0254 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2741 0258 000053E3 		cmp	r3, #0
 2742 025c 0900000A 		beq	.L15
 213:../lab12-cyclic.c ****     {
 214:../lab12-cyclic.c ****         init = FALSE;
 2743              		.loc 1 214 0
 2744 0260 3C309FE5 		ldr	r3, .L17
 2745 0264 0020A0E3 		mov	r2, #0
 2746 0268 0020C3E5 		strb	r2, [r3, #0]
 215:../lab12-cyclic.c ****         uart0_puts( " Task 1: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 2747              		.loc 1 215 0
 2748 026c 34009FE5 		ldr	r0, .L17+4
 2749 0270 FEFFFFEB 		bl	uart0_puts
 216:../lab12-cyclic.c ****         led_on( LEFT_LED );
 2750              		.loc 1 216 0
 2751 0274 0100A0E3 		mov	r0, #1
 2752 0278 FEFFFFEB 		bl	led_on
 217:../lab12-cyclic.c ****         led_off( RIGHT_LED );
 2753              		.loc 1 217 0
 2754 027c 0200A0E3 		mov	r0, #2
 2755 0280 FEFFFFEB 		bl	led_off
 2756 0284 030000EA 		b	.L14
 2757              	.L15:
 218:../lab12-cyclic.c ****     }
 219:../lab12-cyclic.c ****     else
 220:../lab12-cyclic.c ****     {
 221:../lab12-cyclic.c ****         led_toggle( LEFT_LED );
 2758              		.loc 1 221 0
 2759 0288 0100A0E3 		mov	r0, #1
 2760 028c FEFFFFEB 		bl	led_toggle
 222:../lab12-cyclic.c ****         led_toggle( RIGHT_LED );
 2761              		.loc 1 222 0
 2762 0290 0200A0E3 		mov	r0, #2
 2763 0294 FEFFFFEB 		bl	led_toggle
 2764              	.L14:
 223:../lab12-cyclic.c ****     }
 224:../lab12-cyclic.c **** }
 2765              		.loc 1 224 0
 2766 0298 0CD04BE2 		sub	sp, fp, #12
 2767 029c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2768 02a0 1EFF2FE1 		bx	lr
 2769              	.L18:
 2770              		.align	2
 2771              	.L17:
 2772 02a4 08000000 		.word	init.4204
 2773 02a8 80030000 		.word	.LC2
 2774              		.cfi_endproc
 2775              	.LFE6:
 2777              		.section	.rodata
 2778              		.align	2
 2779              	.LC3:
 2780 0394 20546173 		.ascii	" Task 2: iniciada.\012\000"
 2780      6B20323A 
 2780      20696E69 
 2780      63696164 
 2780      612E0A00 
 2781              		.text
 2782              		.align	2
 2783              		.global	Task2
 2785              	Task2:
 2786              	.LFB7:
 225:../lab12-cyclic.c **** 
 226:../lab12-cyclic.c **** void Task2( void )  /* Cada 50 ms (5 ticks) muestrea el keypad y envía el scancode a otras tareas *
 227:../lab12-cyclic.c **** {
 2787              		.loc 1 227 0
 2788              		.cfi_startproc
 2789              		@ Function supports interworking.
 2790              		@ args = 0, pretend = 0, frame = 0
 2791              		@ frame_needed = 1, uses_anonymous_args = 0
 2792 02ac 0DC0A0E1 		mov	ip, sp
 2793              	.LCFI14:
 2794              		.cfi_def_cfa_register 12
 2795 02b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2796 02b4 04B04CE2 		sub	fp, ip, #4
 2797              		.cfi_offset 14, -8
 2798              		.cfi_offset 13, -12
 2799              		.cfi_offset 11, -16
 2800              	.LCFI15:
 2801              		.cfi_def_cfa 11, 4
 228:../lab12-cyclic.c ****     static boolean init = TRUE;
 229:../lab12-cyclic.c ****     static enum { wait_keydown, scan, wait_keyup } state;
 230:../lab12-cyclic.c **** 
 231:../lab12-cyclic.c ****     if( init )
 2802              		.loc 1 231 0
 2803 02b8 FC309FE5 		ldr	r3, .L30
 2804 02bc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2805 02c0 000053E3 		cmp	r3, #0
 2806 02c4 0800000A 		beq	.L20
 232:../lab12-cyclic.c ****     {
 233:../lab12-cyclic.c ****         init  = FALSE;
 2807              		.loc 1 233 0
 2808 02c8 EC309FE5 		ldr	r3, .L30
 2809 02cc 0020A0E3 		mov	r2, #0
 2810 02d0 0020C3E5 		strb	r2, [r3, #0]
 234:../lab12-cyclic.c ****         uart0_puts( " Task 2: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 2811              		.loc 1 234 0
 2812 02d4 E4009FE5 		ldr	r0, .L30+4
 2813 02d8 FEFFFFEB 		bl	uart0_puts
 235:../lab12-cyclic.c ****         state = wait_keydown;
 2814              		.loc 1 235 0
 2815 02dc E0309FE5 		ldr	r3, .L30+8
 2816 02e0 0020A0E3 		mov	r2, #0
 2817 02e4 0020C3E5 		strb	r2, [r3, #0]
 2818 02e8 300000EA 		b	.L19
 2819              	.L20:
 236:../lab12-cyclic.c ****     }
 237:../lab12-cyclic.c ****     else switch( state )
 2820              		.loc 1 237 0
 2821 02ec D0309FE5 		ldr	r3, .L30+8
 2822 02f0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2823 02f4 010053E3 		cmp	r3, #1
 2824 02f8 0B00000A 		beq	.L23
 2825 02fc 020053E3 		cmp	r3, #2
 2826 0300 1F00000A 		beq	.L24
 2827 0304 000053E3 		cmp	r3, #0
 2828 0308 2800001A 		bne	.L19
 2829              	.L22:
 238:../lab12-cyclic.c ****     {
 239:../lab12-cyclic.c ****         case wait_keydown:
 240:../lab12-cyclic.c ****             if( keypad_pressed() )
 2830              		.loc 1 240 0
 2831 030c FEFFFFEB 		bl	keypad_pressed
 2832 0310 0030A0E1 		mov	r3, r0
 2833 0314 000053E3 		cmp	r3, #0
 2834 0318 2100000A 		beq	.L28
 241:../lab12-cyclic.c ****                 state = scan;
 2835              		.loc 1 241 0
 2836 031c A0309FE5 		ldr	r3, .L30+8
 2837 0320 0120A0E3 		mov	r2, #1
 2838 0324 0020C3E5 		strb	r2, [r3, #0]
 242:../lab12-cyclic.c ****             break;
 2839              		.loc 1 242 0
 2840 0328 200000EA 		b	.L19
 2841              	.L23:
 243:../lab12-cyclic.c ****         case scan:
 244:../lab12-cyclic.c ****             scancode = keypad_scan();
 2842              		.loc 1 244 0
 2843 032c FEFFFFEB 		bl	keypad_scan
 2844 0330 0030A0E1 		mov	r3, r0
 2845 0334 0320A0E1 		mov	r2, r3
 2846 0338 88309FE5 		ldr	r3, .L30+12
 2847 033c 0020C3E5 		strb	r2, [r3, #0]
 245:../lab12-cyclic.c ****             if( scancode != KEYPAD_FAILURE )
 2848              		.loc 1 245 0
 2849 0340 80309FE5 		ldr	r3, .L30+12
 2850 0344 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2851 0348 FF0053E3 		cmp	r3, #255
 2852 034c 0800000A 		beq	.L26
 246:../lab12-cyclic.c ****             {
 247:../lab12-cyclic.c ****                 flagTask5 = TRUE;
 2853              		.loc 1 247 0
 2854 0350 74309FE5 		ldr	r3, .L30+16
 2855 0354 0120A0E3 		mov	r2, #1
 2856 0358 0020C3E5 		strb	r2, [r3, #0]
 248:../lab12-cyclic.c ****                 flagTask6 = TRUE;
 2857              		.loc 1 248 0
 2858 035c 6C309FE5 		ldr	r3, .L30+20
 2859 0360 0120A0E3 		mov	r2, #1
 2860 0364 0020C3E5 		strb	r2, [r3, #0]
 249:../lab12-cyclic.c ****                 flagTask8 = TRUE;
 2861              		.loc 1 249 0
 2862 0368 64309FE5 		ldr	r3, .L30+24
 2863 036c 0120A0E3 		mov	r2, #1
 2864 0370 0020C3E5 		strb	r2, [r3, #0]
 2865              	.L26:
 250:../lab12-cyclic.c ****             }
 251:../lab12-cyclic.c ****             state = wait_keyup;
 2866              		.loc 1 251 0
 2867 0374 48309FE5 		ldr	r3, .L30+8
 2868 0378 0220A0E3 		mov	r2, #2
 2869 037c 0020C3E5 		strb	r2, [r3, #0]
 252:../lab12-cyclic.c ****             break;
 2870              		.loc 1 252 0
 2871 0380 0A0000EA 		b	.L19
 2872              	.L24:
 253:../lab12-cyclic.c ****         case wait_keyup:
 254:../lab12-cyclic.c ****             if( !keypad_pressed() )
 2873              		.loc 1 254 0
 2874 0384 FEFFFFEB 		bl	keypad_pressed
 2875 0388 0030A0E1 		mov	r3, r0
 2876 038c 000053E3 		cmp	r3, #0
 2877 0390 0500001A 		bne	.L29
 255:../lab12-cyclic.c ****                 state = wait_keydown;
 2878              		.loc 1 255 0
 2879 0394 28309FE5 		ldr	r3, .L30+8
 2880 0398 0020A0E3 		mov	r2, #0
 2881 039c 0020C3E5 		strb	r2, [r3, #0]
 256:../lab12-cyclic.c ****             break;
 2882              		.loc 1 256 0
 2883 03a0 020000EA 		b	.L19
 2884              	.L28:
 242:../lab12-cyclic.c ****             break;
 2885              		.loc 1 242 0
 2886 03a4 0000A0E1 		mov	r0, r0	@ nop
 2887 03a8 000000EA 		b	.L19
 2888              	.L29:
 2889              		.loc 1 256 0
 2890 03ac 0000A0E1 		mov	r0, r0	@ nop
 2891              	.L19:
 257:../lab12-cyclic.c ****     }
 258:../lab12-cyclic.c **** }
 2892              		.loc 1 258 0
 2893 03b0 0CD04BE2 		sub	sp, fp, #12
 2894 03b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2895 03b8 1EFF2FE1 		bx	lr
 2896              	.L31:
 2897              		.align	2
 2898              	.L30:
 2899 03bc 07000000 		.word	init.4208
 2900 03c0 94030000 		.word	.LC3
 2901 03c4 08000000 		.word	state.4213
 2902 03c8 00000000 		.word	scancode
 2903 03cc 00000000 		.word	flagTask5
 2904 03d0 00000000 		.word	flagTask6
 2905 03d4 00000000 		.word	flagTask8
 2906              		.cfi_endproc
 2907              	.LFE7:
 2909              		.section	.rodata
 2910              		.align	2
 2911              	.LC4:
 2912 03a8 20546173 		.ascii	" Task 3: iniciada.\012\000"
 2912      6B20333A 
 2912      20696E69 
 2912      63696164 
 2912      612E0A00 
 2913              		.align	2
 2914              	.LC5:
 2915 03bc 20202854 		.ascii	"  (Task 3) Hora: \000"
 2915      61736B20 
 2915      33292048 
 2915      6F72613A 
 2915      2000
 2916 03ce 0000     		.align	2
 2917              	.LC6:
 2918 03d0 0A00     		.ascii	"\012\000"
 2919              		.text
 2920              		.align	2
 2921              		.global	Task3
 2923              	Task3:
 2924              	.LFB8:
 259:../lab12-cyclic.c **** 
 260:../lab12-cyclic.c **** void Task3( void  )  /* Cada segundo (100 ticks) muestra por la UART0 la hora del RTC */
 261:../lab12-cyclic.c **** {
 2925              		.loc 1 261 0
 2926              		.cfi_startproc
 2927              		@ Function supports interworking.
 2928              		@ args = 0, pretend = 0, frame = 8
 2929              		@ frame_needed = 1, uses_anonymous_args = 0
 2930 03d8 0DC0A0E1 		mov	ip, sp
 2931              	.LCFI16:
 2932              		.cfi_def_cfa_register 12
 2933 03dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2934 03e0 04B04CE2 		sub	fp, ip, #4
 2935              		.cfi_offset 14, -8
 2936              		.cfi_offset 13, -12
 2937              		.cfi_offset 11, -16
 2938              	.LCFI17:
 2939              		.cfi_def_cfa 11, 4
 2940 03e4 08D04DE2 		sub	sp, sp, #8
 262:../lab12-cyclic.c ****     static boolean init = TRUE;
 263:../lab12-cyclic.c ****     rtc_time_t rtc_time;
 264:../lab12-cyclic.c **** 
 265:../lab12-cyclic.c ****     if( init )
 2941              		.loc 1 265 0
 2942 03e8 7C309FE5 		ldr	r3, .L35
 2943 03ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2944 03f0 000053E3 		cmp	r3, #0
 2945 03f4 0500000A 		beq	.L33
 266:../lab12-cyclic.c ****     {
 267:../lab12-cyclic.c ****         init = FALSE;
 2946              		.loc 1 267 0
 2947 03f8 6C309FE5 		ldr	r3, .L35
 2948 03fc 0020A0E3 		mov	r2, #0
 2949 0400 0020C3E5 		strb	r2, [r3, #0]
 268:../lab12-cyclic.c ****         uart0_puts( " Task 3: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 2950              		.loc 1 268 0
 2951 0404 64009FE5 		ldr	r0, .L35+4
 2952 0408 FEFFFFEB 		bl	uart0_puts
 2953 040c 130000EA 		b	.L32
 2954              	.L33:
 269:../lab12-cyclic.c ****     }
 270:../lab12-cyclic.c ****     else
 271:../lab12-cyclic.c ****     {
 272:../lab12-cyclic.c ****         rtc_gettime( &rtc_time );
 2955              		.loc 1 272 0
 2956 0410 14304BE2 		sub	r3, fp, #20
 2957 0414 0300A0E1 		mov	r0, r3
 2958 0418 FEFFFFEB 		bl	rtc_gettime
 273:../lab12-cyclic.c ****         uart0_puts( "  (Task 3) Hora: " );
 2959              		.loc 1 273 0
 2960 041c 50009FE5 		ldr	r0, .L35+8
 2961 0420 FEFFFFEB 		bl	uart0_puts
 274:../lab12-cyclic.c ****         uart0_putint( rtc_time.hour );
 2962              		.loc 1 274 0
 2963 0424 12305BE5 		ldrb	r3, [fp, #-18]	@ zero_extendqisi2
 2964 0428 0300A0E1 		mov	r0, r3
 2965 042c FEFFFFEB 		bl	uart0_putint
 275:../lab12-cyclic.c ****         uart0_putchar( ':' );
 2966              		.loc 1 275 0
 2967 0430 3A00A0E3 		mov	r0, #58
 2968 0434 FEFFFFEB 		bl	uart0_putchar
 276:../lab12-cyclic.c ****         uart0_putint( rtc_time.min );
 2969              		.loc 1 276 0
 2970 0438 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 2971 043c 0300A0E1 		mov	r0, r3
 2972 0440 FEFFFFEB 		bl	uart0_putint
 277:../lab12-cyclic.c ****         uart0_putchar( ':' );
 2973              		.loc 1 277 0
 2974 0444 3A00A0E3 		mov	r0, #58
 2975 0448 FEFFFFEB 		bl	uart0_putchar
 278:../lab12-cyclic.c ****         uart0_putint( rtc_time.sec );
 2976              		.loc 1 278 0
 2977 044c 14305BE5 		ldrb	r3, [fp, #-20]	@ zero_extendqisi2
 2978 0450 0300A0E1 		mov	r0, r3
 2979 0454 FEFFFFEB 		bl	uart0_putint
 279:../lab12-cyclic.c ****         uart0_puts( "\n" );
 2980              		.loc 1 279 0
 2981 0458 18009FE5 		ldr	r0, .L35+12
 2982 045c FEFFFFEB 		bl	uart0_puts
 2983              	.L32:
 280:../lab12-cyclic.c ****     }
 281:../lab12-cyclic.c **** }
 2984              		.loc 1 281 0
 2985 0460 0CD04BE2 		sub	sp, fp, #12
 2986 0464 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2987 0468 1EFF2FE1 		bx	lr
 2988              	.L36:
 2989              		.align	2
 2990              	.L35:
 2991 046c 06000000 		.word	init.4221
 2992 0470 A8030000 		.word	.LC4
 2993 0474 BC030000 		.word	.LC5
 2994 0478 D0030000 		.word	.LC6
 2995              		.cfi_endproc
 2996              	.LFE8:
 2998              		.section	.rodata
 2999 03d2 0000     		.align	2
 3000              	.LC7:
 3001 03d4 20546173 		.ascii	" Task 4: iniciada.\012\000"
 3001      6B20343A 
 3001      20696E69 
 3001      63696164 
 3001      612E0A00 
 3002              		.align	2
 3003              	.LC8:
 3004 03e8 20202854 		.ascii	"  (Task 4) Ticks: \000"
 3004      61736B20 
 3004      34292054 
 3004      69636B73 
 3004      3A2000
 3005              		.text
 3006              		.align	2
 3007              		.global	Task4
 3009              	Task4:
 3010              	.LFB9:
 282:../lab12-cyclic.c **** 
 283:../lab12-cyclic.c **** void Task4( void )  /* Cada 10 segundos (1000 ticks) muestra por la UART0 los ticks transcurridos *
 284:../lab12-cyclic.c **** {
 3011              		.loc 1 284 0
 3012              		.cfi_startproc
 3013              		@ Function supports interworking.
 3014              		@ args = 0, pretend = 0, frame = 0
 3015              		@ frame_needed = 1, uses_anonymous_args = 0
 3016 047c 0DC0A0E1 		mov	ip, sp
 3017              	.LCFI18:
 3018              		.cfi_def_cfa_register 12
 3019 0480 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3020 0484 04B04CE2 		sub	fp, ip, #4
 3021              		.cfi_offset 14, -8
 3022              		.cfi_offset 13, -12
 3023              		.cfi_offset 11, -16
 3024              	.LCFI19:
 3025              		.cfi_def_cfa 11, 4
 285:../lab12-cyclic.c ****     static boolean init = TRUE;
 286:../lab12-cyclic.c ****     static uint32 ticks;
 287:../lab12-cyclic.c **** 
 288:../lab12-cyclic.c ****     if( init )
 3026              		.loc 1 288 0
 3027 0488 6C309FE5 		ldr	r3, .L40
 3028 048c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3029 0490 000053E3 		cmp	r3, #0
 3030 0494 0800000A 		beq	.L38
 289:../lab12-cyclic.c ****     {
 290:../lab12-cyclic.c ****         init = FALSE;
 3031              		.loc 1 290 0
 3032 0498 5C309FE5 		ldr	r3, .L40
 3033 049c 0020A0E3 		mov	r2, #0
 3034 04a0 0020C3E5 		strb	r2, [r3, #0]
 291:../lab12-cyclic.c ****         uart0_puts( " Task 4: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 3035              		.loc 1 291 0
 3036 04a4 54009FE5 		ldr	r0, .L40+4
 3037 04a8 FEFFFFEB 		bl	uart0_puts
 292:../lab12-cyclic.c ****         ticks = 0;
 3038              		.loc 1 292 0
 3039 04ac 50309FE5 		ldr	r3, .L40+8
 3040 04b0 0020A0E3 		mov	r2, #0
 3041 04b4 002083E5 		str	r2, [r3, #0]
 3042 04b8 0C0000EA 		b	.L37
 3043              	.L38:
 293:../lab12-cyclic.c ****     }
 294:../lab12-cyclic.c ****     else
 295:../lab12-cyclic.c ****     {
 296:../lab12-cyclic.c ****         ticks += TICKS_PER_SEC * 10;
 3044              		.loc 1 296 0
 3045 04bc 40309FE5 		ldr	r3, .L40+8
 3046 04c0 003093E5 		ldr	r3, [r3, #0]
 3047 04c4 FA2F83E2 		add	r2, r3, #1000
 3048 04c8 34309FE5 		ldr	r3, .L40+8
 3049 04cc 002083E5 		str	r2, [r3, #0]
 297:../lab12-cyclic.c ****         uart0_puts( "  (Task 4) Ticks: " );
 3050              		.loc 1 297 0
 3051 04d0 30009FE5 		ldr	r0, .L40+12
 3052 04d4 FEFFFFEB 		bl	uart0_puts
 298:../lab12-cyclic.c ****         uart0_putint( ticks );
 3053              		.loc 1 298 0
 3054 04d8 24309FE5 		ldr	r3, .L40+8
 3055 04dc 003093E5 		ldr	r3, [r3, #0]
 3056 04e0 0300A0E1 		mov	r0, r3
 3057 04e4 FEFFFFEB 		bl	uart0_putint
 299:../lab12-cyclic.c ****         uart0_puts( "\n" );
 3058              		.loc 1 299 0
 3059 04e8 1C009FE5 		ldr	r0, .L40+16
 3060 04ec FEFFFFEB 		bl	uart0_puts
 3061              	.L37:
 300:../lab12-cyclic.c ****     }
 301:../lab12-cyclic.c **** }
 3062              		.loc 1 301 0
 3063 04f0 0CD04BE2 		sub	sp, fp, #12
 3064 04f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3065 04f8 1EFF2FE1 		bx	lr
 3066              	.L41:
 3067              		.align	2
 3068              	.L40:
 3069 04fc 05000000 		.word	init.4226
 3070 0500 D4030000 		.word	.LC7
 3071 0504 04000000 		.word	ticks.4227
 3072 0508 E8030000 		.word	.LC8
 3073 050c D0030000 		.word	.LC6
 3074              		.cfi_endproc
 3075              	.LFE9:
 3077              		.section	.rodata
 3078 03fb 00       		.align	2
 3079              	.LC9:
 3080 03fc 20546173 		.ascii	" Task 5: iniciada.\012\000"
 3080      6B20353A 
 3080      20696E69 
 3080      63696164 
 3080      612E0A00 
 3081              		.align	2
 3082              	.LC10:
 3083 0410 20202854 		.ascii	"  (Task 5) Tecla pulsada: \000"
 3083      61736B20 
 3083      35292054 
 3083      65636C61 
 3083      2070756C 
 3084              		.text
 3085              		.align	2
 3086              		.global	Task5
 3088              	Task5:
 3089              	.LFB10:
 302:../lab12-cyclic.c **** 
 303:../lab12-cyclic.c **** void Task5( void )  /* Cada vez que reciba un scancode lo muestra por la UART0 */
 304:../lab12-cyclic.c **** {
 3090              		.loc 1 304 0
 3091              		.cfi_startproc
 3092              		@ Function supports interworking.
 3093              		@ args = 0, pretend = 0, frame = 0
 3094              		@ frame_needed = 1, uses_anonymous_args = 0
 3095 0510 0DC0A0E1 		mov	ip, sp
 3096              	.LCFI20:
 3097              		.cfi_def_cfa_register 12
 3098 0514 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3099 0518 04B04CE2 		sub	fp, ip, #4
 3100              		.cfi_offset 14, -8
 3101              		.cfi_offset 13, -12
 3102              		.cfi_offset 11, -16
 3103              	.LCFI21:
 3104              		.cfi_def_cfa 11, 4
 305:../lab12-cyclic.c ****     static boolean init = TRUE;
 306:../lab12-cyclic.c **** 
 307:../lab12-cyclic.c ****     if( init )
 3105              		.loc 1 307 0
 3106 051c 68309FE5 		ldr	r3, .L45
 3107 0520 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3108 0524 000053E3 		cmp	r3, #0
 3109 0528 0500000A 		beq	.L43
 308:../lab12-cyclic.c ****     {
 309:../lab12-cyclic.c ****         init = FALSE;
 3110              		.loc 1 309 0
 3111 052c 58309FE5 		ldr	r3, .L45
 3112 0530 0020A0E3 		mov	r2, #0
 3113 0534 0020C3E5 		strb	r2, [r3, #0]
 310:../lab12-cyclic.c ****         uart0_puts( " Task 5: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 3114              		.loc 1 310 0
 3115 0538 50009FE5 		ldr	r0, .L45+4
 3116 053c FEFFFFEB 		bl	uart0_puts
 3117 0540 0E0000EA 		b	.L42
 3118              	.L43:
 311:../lab12-cyclic.c ****     }
 312:../lab12-cyclic.c ****     else if( flagTask5 )
 3119              		.loc 1 312 0
 3120 0544 48309FE5 		ldr	r3, .L45+8
 3121 0548 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3122 054c 000053E3 		cmp	r3, #0
 3123 0550 0A00000A 		beq	.L42
 313:../lab12-cyclic.c ****     {
 314:../lab12-cyclic.c ****         flagTask5 = FALSE;
 3124              		.loc 1 314 0
 3125 0554 38309FE5 		ldr	r3, .L45+8
 3126 0558 0020A0E3 		mov	r2, #0
 3127 055c 0020C3E5 		strb	r2, [r3, #0]
 315:../lab12-cyclic.c ****         uart0_puts( "  (Task 5) Tecla pulsada: " );
 3128              		.loc 1 315 0
 3129 0560 30009FE5 		ldr	r0, .L45+12
 3130 0564 FEFFFFEB 		bl	uart0_puts
 316:../lab12-cyclic.c ****         uart0_puthex( scancode );
 3131              		.loc 1 316 0
 3132 0568 2C309FE5 		ldr	r3, .L45+16
 3133 056c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3134 0570 0300A0E1 		mov	r0, r3
 3135 0574 FEFFFFEB 		bl	uart0_puthex
 317:../lab12-cyclic.c ****         uart0_puts( "\n" );
 3136              		.loc 1 317 0
 3137 0578 20009FE5 		ldr	r0, .L45+20
 3138 057c FEFFFFEB 		bl	uart0_puts
 3139              	.L42:
 318:../lab12-cyclic.c ****     }
 319:../lab12-cyclic.c **** }
 3140              		.loc 1 319 0
 3141 0580 0CD04BE2 		sub	sp, fp, #12
 3142 0584 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3143 0588 1EFF2FE1 		bx	lr
 3144              	.L46:
 3145              		.align	2
 3146              	.L45:
 3147 058c 04000000 		.word	init.4231
 3148 0590 FC030000 		.word	.LC9
 3149 0594 00000000 		.word	flagTask5
 3150 0598 10040000 		.word	.LC10
 3151 059c 00000000 		.word	scancode
 3152 05a0 D0030000 		.word	.LC6
 3153              		.cfi_endproc
 3154              	.LFE10:
 3156              		.section	.rodata
 3157 042b 00       		.align	2
 3158              	.LC11:
 3159 042c 20546173 		.ascii	" Task 6: iniciada.\012\000"
 3159      6B20363A 
 3159      20696E69 
 3159      63696164 
 3159      612E0A00 
 3160              		.text
 3161              		.align	2
 3162              		.global	Task6
 3164              	Task6:
 3165              	.LFB11:
 320:../lab12-cyclic.c **** 
 321:../lab12-cyclic.c **** void Task6( void )  /* Cada vez que reciba un scancode lo muestra por los 7 segmentos */
 322:../lab12-cyclic.c **** {
 3166              		.loc 1 322 0
 3167              		.cfi_startproc
 3168              		@ Function supports interworking.
 3169              		@ args = 0, pretend = 0, frame = 0
 3170              		@ frame_needed = 1, uses_anonymous_args = 0
 3171 05a4 0DC0A0E1 		mov	ip, sp
 3172              	.LCFI22:
 3173              		.cfi_def_cfa_register 12
 3174 05a8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3175 05ac 04B04CE2 		sub	fp, ip, #4
 3176              		.cfi_offset 14, -8
 3177              		.cfi_offset 13, -12
 3178              		.cfi_offset 11, -16
 3179              	.LCFI23:
 3180              		.cfi_def_cfa 11, 4
 323:../lab12-cyclic.c ****     static boolean init = TRUE;
 324:../lab12-cyclic.c **** 
 325:../lab12-cyclic.c ****     if( init )
 3181              		.loc 1 325 0
 3182 05b0 58309FE5 		ldr	r3, .L50
 3183 05b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3184 05b8 000053E3 		cmp	r3, #0
 3185 05bc 0500000A 		beq	.L48
 326:../lab12-cyclic.c ****     {
 327:../lab12-cyclic.c ****         init = FALSE;
 3186              		.loc 1 327 0
 3187 05c0 48309FE5 		ldr	r3, .L50
 3188 05c4 0020A0E3 		mov	r2, #0
 3189 05c8 0020C3E5 		strb	r2, [r3, #0]
 328:../lab12-cyclic.c ****         uart0_puts( " Task 6: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 3190              		.loc 1 328 0
 3191 05cc 40009FE5 		ldr	r0, .L50+4
 3192 05d0 FEFFFFEB 		bl	uart0_puts
 3193 05d4 0A0000EA 		b	.L47
 3194              	.L48:
 329:../lab12-cyclic.c ****     }
 330:../lab12-cyclic.c ****     else if( flagTask6 )
 3195              		.loc 1 330 0
 3196 05d8 38309FE5 		ldr	r3, .L50+8
 3197 05dc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3198 05e0 000053E3 		cmp	r3, #0
 3199 05e4 0600000A 		beq	.L47
 331:../lab12-cyclic.c ****     {
 332:../lab12-cyclic.c ****         flagTask6 = FALSE;
 3200              		.loc 1 332 0
 3201 05e8 28309FE5 		ldr	r3, .L50+8
 3202 05ec 0020A0E3 		mov	r2, #0
 3203 05f0 0020C3E5 		strb	r2, [r3, #0]
 333:../lab12-cyclic.c ****         segs_putchar( scancode );
 3204              		.loc 1 333 0
 3205 05f4 20309FE5 		ldr	r3, .L50+12
 3206 05f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3207 05fc 0300A0E1 		mov	r0, r3
 3208 0600 FEFFFFEB 		bl	segs_putchar
 3209              	.L47:
 334:../lab12-cyclic.c ****     }
 335:../lab12-cyclic.c **** }
 3210              		.loc 1 335 0
 3211 0604 0CD04BE2 		sub	sp, fp, #12
 3212 0608 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3213 060c 1EFF2FE1 		bx	lr
 3214              	.L51:
 3215              		.align	2
 3216              	.L50:
 3217 0610 03000000 		.word	init.4235
 3218 0614 2C040000 		.word	.LC11
 3219 0618 00000000 		.word	flagTask6
 3220 061c 00000000 		.word	scancode
 3221              		.cfi_endproc
 3222              	.LFE11:
 3224              		.section	.rodata
 3225              		.align	2
 3226              	.LC12:
 3227 0440 20546173 		.ascii	" Task 7: iniciada.\012\000"
 3227      6B20373A 
 3227      20696E69 
 3227      63696164 
 3227      612E0A00 
 3228              		.align	2
 3229              	.LC13:
 3230 0454 20202854 		.ascii	"  (Task 7) Se ha pulsado alg\372n pushbutton...\012"
 3230      61736B20 
 3230      37292053 
 3230      65206861 
 3230      2070756C 
 3231 0481 00       		.ascii	"\000"
 3232              		.text
 3233              		.align	2
 3234              		.global	Task7
 3236              	Task7:
 3237              	.LFB12:
 336:../lab12-cyclic.c **** 
 337:../lab12-cyclic.c **** void Task7( void )  /* Cada vez que se presione un pulsador lo avisa por la UART0 */
 338:../lab12-cyclic.c **** {
 3238              		.loc 1 338 0
 3239              		.cfi_startproc
 3240              		@ Function supports interworking.
 3241              		@ args = 0, pretend = 0, frame = 0
 3242              		@ frame_needed = 1, uses_anonymous_args = 0
 3243 0620 0DC0A0E1 		mov	ip, sp
 3244              	.LCFI24:
 3245              		.cfi_def_cfa_register 12
 3246 0624 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3247 0628 04B04CE2 		sub	fp, ip, #4
 3248              		.cfi_offset 14, -8
 3249              		.cfi_offset 13, -12
 3250              		.cfi_offset 11, -16
 3251              	.LCFI25:
 3252              		.cfi_def_cfa 11, 4
 339:../lab12-cyclic.c ****     static boolean init = TRUE;
 340:../lab12-cyclic.c **** 
 341:../lab12-cyclic.c ****     if( init )
 3253              		.loc 1 341 0
 3254 062c 54309FE5 		ldr	r3, .L55
 3255 0630 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3256 0634 000053E3 		cmp	r3, #0
 3257 0638 0500000A 		beq	.L53
 342:../lab12-cyclic.c ****     {
 343:../lab12-cyclic.c ****         init = FALSE;
 3258              		.loc 1 343 0
 3259 063c 44309FE5 		ldr	r3, .L55
 3260 0640 0020A0E3 		mov	r2, #0
 3261 0644 0020C3E5 		strb	r2, [r3, #0]
 344:../lab12-cyclic.c ****         uart0_puts( " Task 7: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es nec
 3262              		.loc 1 344 0
 3263 0648 3C009FE5 		ldr	r0, .L55+4
 3264 064c FEFFFFEB 		bl	uart0_puts
 3265 0650 090000EA 		b	.L52
 3266              	.L53:
 345:../lab12-cyclic.c ****     }
 346:../lab12-cyclic.c ****     else if( flagPb )
 3267              		.loc 1 346 0
 3268 0654 34309FE5 		ldr	r3, .L55+8
 3269 0658 0030D3E5 		ldrb	r3, [r3, #0]
 3270 065c FF3003E2 		and	r3, r3, #255
 3271 0660 000053E3 		cmp	r3, #0
 3272 0664 0400000A 		beq	.L52
 347:../lab12-cyclic.c ****     {   
 348:../lab12-cyclic.c ****         flagPb = FALSE;
 3273              		.loc 1 348 0
 3274 0668 20309FE5 		ldr	r3, .L55+8
 3275 066c 0020A0E3 		mov	r2, #0
 3276 0670 0020C3E5 		strb	r2, [r3, #0]
 349:../lab12-cyclic.c ****         uart0_puts( "  (Task 7) Se ha pulsado algún pushbutton...\n" );
 3277              		.loc 1 349 0
 3278 0674 18009FE5 		ldr	r0, .L55+12
 3279 0678 FEFFFFEB 		bl	uart0_puts
 3280              	.L52:
 350:../lab12-cyclic.c ****     }
 351:../lab12-cyclic.c **** }
 3281              		.loc 1 351 0
 3282 067c 0CD04BE2 		sub	sp, fp, #12
 3283 0680 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3284 0684 1EFF2FE1 		bx	lr
 3285              	.L56:
 3286              		.align	2
 3287              	.L55:
 3288 0688 02000000 		.word	init.4239
 3289 068c 40040000 		.word	.LC12
 3290 0690 00000000 		.word	flagPb
 3291 0694 54040000 		.word	.LC13
 3292              		.cfi_endproc
 3293              	.LFE12:
 3295              		.section	.rodata
 3296 0482 0000     		.align	2
 3297              	.LC14:
 3298 0484 20546173 		.ascii	" Task 8: iniciada.\012\000"
 3298      6B20383A 
 3298      20696E69 
 3298      63696164 
 3298      612E0A00 
 3299              		.text
 3300              		.align	2
 3301              		.global	Task8
 3303              	Task8:
 3304              	.LFB13:
 352:../lab12-cyclic.c **** 
 353:../lab12-cyclic.c **** void Task8( void ) // Cada vez que reciba un scancode lo escribe en el LCD
 354:../lab12-cyclic.c **** {
 3305              		.loc 1 354 0
 3306              		.cfi_startproc
 3307              		@ Function supports interworking.
 3308              		@ args = 0, pretend = 0, frame = 0
 3309              		@ frame_needed = 1, uses_anonymous_args = 0
 3310 0698 0DC0A0E1 		mov	ip, sp
 3311              	.LCFI26:
 3312              		.cfi_def_cfa_register 12
 3313 069c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3314 06a0 04B04CE2 		sub	fp, ip, #4
 3315              		.cfi_offset 14, -8
 3316              		.cfi_offset 13, -12
 3317              		.cfi_offset 11, -16
 3318              	.LCFI27:
 3319              		.cfi_def_cfa 11, 4
 3320 06a4 08D04DE2 		sub	sp, sp, #8
 355:../lab12-cyclic.c **** 	static boolean init = TRUE;
 356:../lab12-cyclic.c **** 
 357:../lab12-cyclic.c **** 	if( init )
 3321              		.loc 1 357 0
 3322 06a8 88309FE5 		ldr	r3, .L60
 3323 06ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3324 06b0 000053E3 		cmp	r3, #0
 3325 06b4 0F00000A 		beq	.L58
 358:../lab12-cyclic.c **** 	{
 359:../lab12-cyclic.c **** 		init = FALSE;
 3326              		.loc 1 359 0
 3327 06b8 78309FE5 		ldr	r3, .L60
 3328 06bc 0020A0E3 		mov	r2, #0
 3329 06c0 0020C3E5 		strb	r2, [r3, #0]
 360:../lab12-cyclic.c **** 		uart0_puts( " Task 8: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario
 3330              		.loc 1 360 0
 3331 06c4 70009FE5 		ldr	r0, .L60+4
 3332 06c8 FEFFFFEB 		bl	uart0_puts
 361:../lab12-cyclic.c **** 		lcd_clear();
 3333              		.loc 1 361 0
 3334 06cc FEFFFFEB 		bl	lcd_clear
 362:../lab12-cyclic.c **** 		lcd_draw_box( 10, 10, 155, 230, BLACK, 5 );
 3335              		.loc 1 362 0
 3336 06d0 0F30A0E3 		mov	r3, #15
 3337 06d4 00308DE5 		str	r3, [sp, #0]
 3338 06d8 0530A0E3 		mov	r3, #5
 3339 06dc 04308DE5 		str	r3, [sp, #4]
 3340 06e0 0A00A0E3 		mov	r0, #10
 3341 06e4 0A10A0E3 		mov	r1, #10
 3342 06e8 9B20A0E3 		mov	r2, #155
 3343 06ec E630A0E3 		mov	r3, #230
 3344 06f0 FEFFFFEB 		bl	lcd_draw_box
 3345 06f4 0C0000EA 		b	.L57
 3346              	.L58:
 363:../lab12-cyclic.c **** 	}
 364:../lab12-cyclic.c **** 	else if( flagTask8 )
 3347              		.loc 1 364 0
 3348 06f8 40309FE5 		ldr	r3, .L60+8
 3349 06fc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3350 0700 000053E3 		cmp	r3, #0
 3351 0704 0800000A 		beq	.L57
 365:../lab12-cyclic.c **** 	{
 366:../lab12-cyclic.c **** 		flagTask6 = FALSE;
 3352              		.loc 1 366 0
 3353 0708 34309FE5 		ldr	r3, .L60+12
 3354 070c 0020A0E3 		mov	r2, #0
 3355 0710 0020C3E5 		strb	r2, [r3, #0]
 367:../lab12-cyclic.c **** 		lcd_puthex_x2(200, 115, BLACK, scancode );
 3356              		.loc 1 367 0
 3357 0714 2C309FE5 		ldr	r3, .L60+16
 3358 0718 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3359 071c C800A0E3 		mov	r0, #200
 3360 0720 7310A0E3 		mov	r1, #115
 3361 0724 0F20A0E3 		mov	r2, #15
 3362 0728 FEFFFFEB 		bl	lcd_puthex_x2
 3363              	.L57:
 368:../lab12-cyclic.c **** 	}
 369:../lab12-cyclic.c **** 
 370:../lab12-cyclic.c **** }
 3364              		.loc 1 370 0
 3365 072c 0CD04BE2 		sub	sp, fp, #12
 3366 0730 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3367 0734 1EFF2FE1 		bx	lr
 3368              	.L61:
 3369              		.align	2
 3370              	.L60:
 3371 0738 01000000 		.word	init.4243
 3372 073c 84040000 		.word	.LC14
 3373 0740 00000000 		.word	flagTask8
 3374 0744 00000000 		.word	flagTask6
 3375 0748 00000000 		.word	scancode
 3376              		.cfi_endproc
 3377              	.LFE13:
 3379              		.section	.rodata
 3380              		.align	2
 3381              	.LC15:
 3382 0498 20546173 		.ascii	" Task 9: iniciada.\012\000"
 3382      6B20393A 
 3382      20696E69 
 3382      63696164 
 3382      612E0A00 
 3383              		.text
 3384              		.align	2
 3385              		.global	Task9
 3387              	Task9:
 3388              	.LFB14:
 371:../lab12-cyclic.c **** 
 372:../lab12-cyclic.c **** void Task9( void )
 373:../lab12-cyclic.c **** {
 3389              		.loc 1 373 0
 3390              		.cfi_startproc
 3391              		@ Function supports interworking.
 3392              		@ args = 0, pretend = 0, frame = 0
 3393              		@ frame_needed = 1, uses_anonymous_args = 0
 3394 074c 0DC0A0E1 		mov	ip, sp
 3395              	.LCFI28:
 3396              		.cfi_def_cfa_register 12
 3397 0750 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3398 0754 04B04CE2 		sub	fp, ip, #4
 3399              		.cfi_offset 14, -8
 3400              		.cfi_offset 13, -12
 3401              		.cfi_offset 11, -16
 3402              	.LCFI29:
 3403              		.cfi_def_cfa 11, 4
 3404 0758 08D04DE2 		sub	sp, sp, #8
 374:../lab12-cyclic.c **** 	static boolean init = TRUE;
 375:../lab12-cyclic.c **** 	static uint32 og_time;
 376:../lab12-cyclic.c **** 	if( init )
 3405              		.loc 1 376 0
 3406 075c 88309FE5 		ldr	r3, .L65
 3407 0760 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3408 0764 000053E3 		cmp	r3, #0
 3409 0768 1100000A 		beq	.L63
 377:../lab12-cyclic.c **** 	{
 378:../lab12-cyclic.c **** 		init = FALSE;
 3410              		.loc 1 378 0
 3411 076c 78309FE5 		ldr	r3, .L65
 3412 0770 0020A0E3 		mov	r2, #0
 3413 0774 0020C3E5 		strb	r2, [r3, #0]
 379:../lab12-cyclic.c **** 		uart0_puts( " Task 9: iniciada.\n" );  /* Muestra un mensaje inicial en la UART0 (no es necesario
 3414              		.loc 1 379 0
 3415 0778 70009FE5 		ldr	r0, .L65+4
 3416 077c FEFFFFEB 		bl	uart0_puts
 380:../lab12-cyclic.c **** 		lcd_draw_box( 165, 10, 310, 230, BLACK, 5 );
 3417              		.loc 1 380 0
 3418 0780 0F30A0E3 		mov	r3, #15
 3419 0784 00308DE5 		str	r3, [sp, #0]
 3420 0788 0530A0E3 		mov	r3, #5
 3421 078c 04308DE5 		str	r3, [sp, #4]
 3422 0790 A500A0E3 		mov	r0, #165
 3423 0794 0A10A0E3 		mov	r1, #10
 3424 0798 54209FE5 		ldr	r2, .L65+8
 3425 079c E630A0E3 		mov	r3, #230
 3426 07a0 FEFFFFEB 		bl	lcd_draw_box
 381:../lab12-cyclic.c **** 		og_time = 0;
 3427              		.loc 1 381 0
 3428 07a4 4C309FE5 		ldr	r3, .L65+12
 3429 07a8 0020A0E3 		mov	r2, #0
 3430 07ac 002083E5 		str	r2, [r3, #0]
 3431 07b0 0A0000EA 		b	.L62
 3432              	.L63:
 382:../lab12-cyclic.c **** 	}
 383:../lab12-cyclic.c **** 	else
 384:../lab12-cyclic.c **** 	{
 385:../lab12-cyclic.c **** 		og_time++;
 3433              		.loc 1 385 0
 3434 07b4 3C309FE5 		ldr	r3, .L65+12
 3435 07b8 003093E5 		ldr	r3, [r3, #0]
 3436 07bc 012083E2 		add	r2, r3, #1
 3437 07c0 30309FE5 		ldr	r3, .L65+12
 3438 07c4 002083E5 		str	r2, [r3, #0]
 386:../lab12-cyclic.c **** 		lcd_putint_x2(125, 115, BLACK, og_time );
 3439              		.loc 1 386 0
 3440 07c8 28309FE5 		ldr	r3, .L65+12
 3441 07cc 003093E5 		ldr	r3, [r3, #0]
 3442 07d0 7D00A0E3 		mov	r0, #125
 3443 07d4 7310A0E3 		mov	r1, #115
 3444 07d8 0F20A0E3 		mov	r2, #15
 3445 07dc FEFFFFEB 		bl	lcd_putint_x2
 3446              	.L62:
 387:../lab12-cyclic.c **** 	}
 388:../lab12-cyclic.c **** 
 389:../lab12-cyclic.c **** }
 3447              		.loc 1 389 0
 3448 07e0 0CD04BE2 		sub	sp, fp, #12
 3449 07e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3450 07e8 1EFF2FE1 		bx	lr
 3451              	.L66:
 3452              		.align	2
 3453              	.L65:
 3454 07ec 00000000 		.word	init.4247
 3455 07f0 98040000 		.word	.LC15
 3456 07f4 36010000 		.word	310
 3457 07f8 00000000 		.word	og_time.4248
 3458              		.cfi_endproc
 3459              	.LFE14:
 3461              		.align	2
 3462              		.global	isr_pb
 3464              	isr_pb:
 3465              	.LFB15:
 390:../lab12-cyclic.c **** /*******************************************************************/
 391:../lab12-cyclic.c **** 
 392:../lab12-cyclic.c **** void isr_pb( void )
 393:../lab12-cyclic.c **** {
 3466              		.loc 1 393 0
 3467              		.cfi_startproc
 3468              		@ Interrupt Service Routine.
 3469              		@ args = 0, pretend = 0, frame = 0
 3470              		@ frame_needed = 1, uses_anonymous_args = 0
 3471 07fc 04C02DE5 		str	ip, [sp, #-4]!
 3472 0800 0DC0A0E1 		mov	ip, sp
 3473              	.LCFI30:
 3474              		.cfi_def_cfa_register 12
 3475 0804 0CD82DE9 		stmfd	sp!, {r2, r3, fp, ip, lr, pc}
 3476 0808 04B04CE2 		sub	fp, ip, #4
 3477              		.cfi_offset 14, -8
 3478              		.cfi_offset 13, -12
 3479              		.cfi_offset 11, -16
 3480              		.cfi_offset 3, -20
 3481              		.cfi_offset 2, -24
 3482              	.LCFI31:
 3483              		.cfi_def_cfa 11, 4
 394:../lab12-cyclic.c ****     flagPb = TRUE;
 3484              		.loc 1 394 0
 3485 080c 2C309FE5 		ldr	r3, .L68
 3486 0810 0120A0E3 		mov	r2, #1
 3487 0814 0020C3E5 		strb	r2, [r3, #0]
 395:../lab12-cyclic.c ****     EXTINTPND = BIT_RIGHTPB | BIT_LEFTPB;
 3488              		.loc 1 395 0
 3489 0818 24309FE5 		ldr	r3, .L68+4
 3490 081c 0C20A0E3 		mov	r2, #12
 3491 0820 002083E5 		str	r2, [r3, #0]
 396:../lab12-cyclic.c ****     I_ISPC = BIT_PB;
 3492              		.loc 1 396 0
 3493 0824 1C309FE5 		ldr	r3, .L68+8
 3494 0828 0226A0E3 		mov	r2, #2097152
 3495 082c 002083E5 		str	r2, [r3, #0]
 397:../lab12-cyclic.c **** }
 3496              		.loc 1 397 0
 3497 0830 14D04BE2 		sub	sp, fp, #20
 3498 0834 0C689DE8 		ldmfd	sp, {r2, r3, fp, sp, lr}
 3499 0838 04C09DE4 		ldmfd	sp!, {ip}
 3500 083c 04F05EE2 		subs	pc, lr, #4
 3501              	.L69:
 3502              		.align	2
 3503              	.L68:
 3504 0840 00000000 		.word	flagPb
 3505 0844 5400D201 		.word	30539860
 3506 0848 2400E001 		.word	31457316
 3507              		.cfi_endproc
 3508              	.LFE15:
 3510              		.align	2
 3511              		.global	isr_tick
 3513              	isr_tick:
 3514              	.LFB16:
 398:../lab12-cyclic.c **** 
 399:../lab12-cyclic.c **** void isr_tick( void )
 400:../lab12-cyclic.c **** {     
 3515              		.loc 1 400 0
 3516              		.cfi_startproc
 3517              		@ Interrupt Service Routine.
 3518              		@ args = 0, pretend = 0, frame = 0
 3519              		@ frame_needed = 1, uses_anonymous_args = 0
 3520 084c 04C02DE5 		str	ip, [sp, #-4]!
 3521 0850 0DC0A0E1 		mov	ip, sp
 3522              	.LCFI32:
 3523              		.cfi_def_cfa_register 12
 3524 0854 0CD82DE9 		stmfd	sp!, {r2, r3, fp, ip, lr, pc}
 3525 0858 04B04CE2 		sub	fp, ip, #4
 3526              		.cfi_offset 14, -8
 3527              		.cfi_offset 13, -12
 3528              		.cfi_offset 11, -16
 3529              		.cfi_offset 3, -20
 3530              		.cfi_offset 2, -24
 3531              	.LCFI33:
 3532              		.cfi_def_cfa 11, 4
 401:../lab12-cyclic.c ****     flagTimer = TRUE;
 3533              		.loc 1 401 0
 3534 085c 20309FE5 		ldr	r3, .L71
 3535 0860 0120A0E3 		mov	r2, #1
 3536 0864 0020C3E5 		strb	r2, [r3, #0]
 402:../lab12-cyclic.c ****     I_ISPC = BIT_TIMER0;
 3537              		.loc 1 402 0
 3538 0868 18309FE5 		ldr	r3, .L71+4
 3539 086c 022AA0E3 		mov	r2, #8192
 3540 0870 002083E5 		str	r2, [r3, #0]
 403:../lab12-cyclic.c **** };
 3541              		.loc 1 403 0
 3542 0874 14D04BE2 		sub	sp, fp, #20
 3543 0878 0C689DE8 		ldmfd	sp, {r2, r3, fp, sp, lr}
 3544 087c 04C09DE4 		ldmfd	sp!, {ip}
 3545 0880 04F05EE2 		subs	pc, lr, #4
 3546              	.L72:
 3547              		.align	2
 3548              	.L71:
 3549 0884 00000000 		.word	flagTimer
 3550 0888 2400E001 		.word	31457316
 3551              		.cfi_endproc
 3552              	.LFE16:
 3554              		.data
 3557              	init.4247:
 3558 0000 01       		.byte	1
 3559              		.bss
 3560              		.align	2
 3561              	og_time.4248:
 3562 0000 00000000 		.space	4
 3563              		.data
 3566              	init.4243:
 3567 0001 01       		.byte	1
 3570              	init.4239:
 3571 0002 01       		.byte	1
 3574              	init.4235:
 3575 0003 01       		.byte	1
 3578              	init.4231:
 3579 0004 01       		.byte	1
 3582              	init.4226:
 3583 0005 01       		.byte	1
 3584              		.bss
 3585              		.align	2
 3586              	ticks.4227:
 3587 0004 00000000 		.space	4
 3588              		.data
 3591              	init.4221:
 3592 0006 01       		.byte	1
 3595              	init.4208:
 3596 0007 01       		.byte	1
 3597              		.bss
 3598              	state.4213:
 3599 0008 00       		.space	1
 3600 0009 000000   		.data
 3603              	init.4204:
 3604 0008 01       		.byte	1
 3605              		.text
 3606              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lab12-cyclic.c
                            *COM*:00000001 scancode
                            *COM*:00000001 flagTask5
                            *COM*:00000001 flagTask6
                            *COM*:00000001 flagTask8
                            *COM*:00000001 flagPb
                            *COM*:00000001 flagTimer
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2157   .rodata:00000000 pjobs
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2154   .rodata:00000000 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2521   .text:00000154 JobA
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2552   .text:00000174 JobB
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2589   .text:000001a0 JobC
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2628   .text:000001d0 JobD
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2671   .text:00000208 JobE
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2367   .text:00000000 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2370   .text:00000000 main
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2721   .text:00000244 Task1
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2785   .text:000002ac Task2
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2923   .text:000003d8 Task3
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3009   .text:0000047c Task4
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3088   .text:00000510 Task5
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3164   .text:000005a4 Task6
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3236   .text:00000620 Task7
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3303   .text:00000698 Task8
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3387   .text:0000074c Task9
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2505   .text:0000012c $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3464   .text:000007fc isr_pb
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3513   .text:0000084c isr_tick
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2518   .text:00000154 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2772   .text:000002a4 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3603   .data:00000008 init.4204
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2782   .text:000002ac $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2899   .text:000003bc $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3595   .data:00000007 init.4208
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3598   .bss:00000008 state.4213
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2920   .text:000003d8 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:2991   .text:0000046c $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3591   .data:00000006 init.4221
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3006   .text:0000047c $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3069   .text:000004fc $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3582   .data:00000005 init.4226
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3586   .bss:00000004 ticks.4227
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3085   .text:00000510 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3147   .text:0000058c $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3578   .data:00000004 init.4231
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3161   .text:000005a4 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3217   .text:00000610 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3574   .data:00000003 init.4235
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3233   .text:00000620 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3288   .text:00000688 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3570   .data:00000002 init.4239
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3300   .text:00000698 $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3371   .text:00000738 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3566   .data:00000001 init.4243
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3384   .text:0000074c $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3454   .text:000007ec $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3557   .data:00000000 init.4247
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3561   .bss:00000000 og_time.4248
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3461   .text:000007fc $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3504   .text:00000840 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3510   .text:0000084c $a
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3549   .text:00000884 $d
C:\Users\guill\AppData\Local\Temp\ccQiOu2Q.s:3560   .bss:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sys_init
timers_init
uart0_init
leds_init
segs_init
rtc_init
pbs_init
keypad_init
lcd_init
lcd_clear
lcd_on
uart0_puts
pbs_open
timer0_open_ms
sleep
led_on
led_off
led_toggle
keypad_pressed
keypad_scan
rtc_gettime
uart0_putint
uart0_putchar
uart0_puthex
segs_putchar
lcd_draw_box
lcd_puthex_x2
lcd_putint_x2
