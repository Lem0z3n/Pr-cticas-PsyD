
proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b20  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000019b4  0c108b20  0c108b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c10a4d4  0c10a4d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000004  0c10a4dc  0c10a4dc  000124dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00009754  0c10a4e0  0c10a4e0  000124e0  2**2
                  ALLOC
  5 .debug_abbrev 00000d49  00000000  00000000  000124e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c7f  00000000  00000000  00013229  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000131f  00000000  00000000  00015ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_macinfo 0003d253  00000000  00000000  000171c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001cb4  00000000  00000000  0005441a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000c05  00000000  00000000  000560ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000322  00000000  00000000  00056cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001a0  00000000  00000000  00056ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d3e  00000000  00000000  00057195  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000002a  00000000  00000000  00057ed3  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000032  00000000  00000000  00057efd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000187c  00000000  00000000  00057f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <delete_task>:
#include <s3c44b0x.h>

static task_t tasks[MAX_TASKS];   /* Lista ordenada de TCBs */

void delete_task( uint32 id )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
 c100010:	e50b0010 	str	r0, [fp, #-16]
    tasks[id].pfunction = NULL;
 c100014:	e59f3074 	ldr	r3, [pc, #116]	; c100090 <_code_start+0x90>
 c100018:	e51b2010 	ldr	r2, [fp, #-16]
 c10001c:	e3a01000 	mov	r1, #0
 c100020:	e7831202 	str	r1, [r3, r2, lsl #4]
    tasks[id].period = 0; 
 c100024:	e59f1064 	ldr	r1, [pc, #100]	; c100090 <_code_start+0x90>
 c100028:	e51b2010 	ldr	r2, [fp, #-16]
 c10002c:	e3a03004 	mov	r3, #4
 c100030:	e1a02202 	lsl	r2, r2, #4
 c100034:	e0812002 	add	r2, r1, r2
 c100038:	e0823003 	add	r3, r2, r3
 c10003c:	e3a02000 	mov	r2, #0
 c100040:	e5832000 	str	r2, [r3]
    tasks[id].ticks = 0;
 c100044:	e59f1044 	ldr	r1, [pc, #68]	; c100090 <_code_start+0x90>
 c100048:	e51b2010 	ldr	r2, [fp, #-16]
 c10004c:	e3a03008 	mov	r3, #8
 c100050:	e1a02202 	lsl	r2, r2, #4
 c100054:	e0812002 	add	r2, r1, r2
 c100058:	e0823003 	add	r3, r2, r3
 c10005c:	e3a02000 	mov	r2, #0
 c100060:	e5832000 	str	r2, [r3]
    tasks[id].ready = FALSE;     
 c100064:	e59f1024 	ldr	r1, [pc, #36]	; c100090 <_code_start+0x90>
 c100068:	e51b2010 	ldr	r2, [fp, #-16]
 c10006c:	e3a03008 	mov	r3, #8
 c100070:	e1a02202 	lsl	r2, r2, #4
 c100074:	e0812002 	add	r2, r1, r2
 c100078:	e0823003 	add	r3, r2, r3
 c10007c:	e3a02000 	mov	r2, #0
 c100080:	e5c32004 	strb	r2, [r3, #4]
}
 c100084:	e24bd00c 	sub	sp, fp, #12
 c100088:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10008c:	e12fff1e 	bx	lr
 c100090:	0c10a4e0 	.word	0x0c10a4e0

0c100094 <create_task>:

uint32 create_task( void (*pfunction)( void ), uint32 period )
{
 c100094:	e1a0c00d 	mov	ip, sp
 c100098:	e92dd800 	push	{fp, ip, lr, pc}
 c10009c:	e24cb004 	sub	fp, ip, #4
 c1000a0:	e24dd010 	sub	sp, sp, #16
 c1000a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1000a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32 id;
    
    for( id=0; id<MAX_TASKS && tasks[id].pfunction ; id++ ); /* Busca la primera entrada libre (con función no NULL) de la lista de TCB */
 c1000ac:	e3a03000 	mov	r3, #0
 c1000b0:	e50b3010 	str	r3, [fp, #-16]
 c1000b4:	ea000002 	b	c1000c4 <create_task+0x30>
 c1000b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1000bc:	e2833001 	add	r3, r3, #1
 c1000c0:	e50b3010 	str	r3, [fp, #-16]
 c1000c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1000c8:	e3530009 	cmp	r3, #9
 c1000cc:	8a000004 	bhi	c1000e4 <create_task+0x50>
 c1000d0:	e59f309c 	ldr	r3, [pc, #156]	; c100174 <create_task+0xe0>
 c1000d4:	e51b2010 	ldr	r2, [fp, #-16]
 c1000d8:	e7933202 	ldr	r3, [r3, r2, lsl #4]
 c1000dc:	e3530000 	cmp	r3, #0
 c1000e0:	1afffff4 	bne	c1000b8 <create_task+0x24>
    
    tasks[id].pfunction = pfunction;
 c1000e4:	e59f3088 	ldr	r3, [pc, #136]	; c100174 <create_task+0xe0>
 c1000e8:	e51b2010 	ldr	r2, [fp, #-16]
 c1000ec:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c1000f0:	e7831202 	str	r1, [r3, r2, lsl #4]
    tasks[id].period = period; 
 c1000f4:	e59f1078 	ldr	r1, [pc, #120]	; c100174 <create_task+0xe0>
 c1000f8:	e51b2010 	ldr	r2, [fp, #-16]
 c1000fc:	e3a03004 	mov	r3, #4
 c100100:	e1a02202 	lsl	r2, r2, #4
 c100104:	e0812002 	add	r2, r1, r2
 c100108:	e0823003 	add	r3, r2, r3
 c10010c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c100110:	e5832000 	str	r2, [r3]
    tasks[id].ticks = 0;
 c100114:	e59f1058 	ldr	r1, [pc, #88]	; c100174 <create_task+0xe0>
 c100118:	e51b2010 	ldr	r2, [fp, #-16]
 c10011c:	e3a03008 	mov	r3, #8
 c100120:	e1a02202 	lsl	r2, r2, #4
 c100124:	e0812002 	add	r2, r1, r2
 c100128:	e0823003 	add	r3, r2, r3
 c10012c:	e3a02000 	mov	r2, #0
 c100130:	e5832000 	str	r2, [r3]
    tasks[id].ready = FALSE;     
 c100134:	e59f1038 	ldr	r1, [pc, #56]	; c100174 <create_task+0xe0>
 c100138:	e51b2010 	ldr	r2, [fp, #-16]
 c10013c:	e3a03008 	mov	r3, #8
 c100140:	e1a02202 	lsl	r2, r2, #4
 c100144:	e0812002 	add	r2, r1, r2
 c100148:	e0823003 	add	r3, r2, r3
 c10014c:	e3a02000 	mov	r2, #0
 c100150:	e5c32004 	strb	r2, [r3, #4]
        
    (*pfunction)();     /* Asume que la primera llamada a la tarea la inicializa */
 c100154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100158:	e1a0e00f 	mov	lr, pc
 c10015c:	e12fff13 	bx	r3

    return id;    
 c100160:	e51b3010 	ldr	r3, [fp, #-16]
}
 c100164:	e1a00003 	mov	r0, r3
 c100168:	e24bd00c 	sub	sp, fp, #12
 c10016c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100170:	e12fff1e 	bx	lr
 c100174:	0c10a4e0 	.word	0x0c10a4e0

0c100178 <scheduler_init>:

void scheduler_init( void )
{
 c100178:	e1a0c00d 	mov	ip, sp
 c10017c:	e92dd800 	push	{fp, ip, lr, pc}
 c100180:	e24cb004 	sub	fp, ip, #4
 c100184:	e24dd008 	sub	sp, sp, #8
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )
 c100188:	e3a03000 	mov	r3, #0
 c10018c:	e50b3010 	str	r3, [fp, #-16]
 c100190:	ea000004 	b	c1001a8 <scheduler_init+0x30>
        delete_task( id );
 c100194:	e51b0010 	ldr	r0, [fp, #-16]
 c100198:	ebffff98 	bl	c100000 <delete_task>

void scheduler_init( void )
{
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )
 c10019c:	e51b3010 	ldr	r3, [fp, #-16]
 c1001a0:	e2833001 	add	r3, r3, #1
 c1001a4:	e50b3010 	str	r3, [fp, #-16]
 c1001a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1001ac:	e3530009 	cmp	r3, #9
 c1001b0:	9afffff7 	bls	c100194 <scheduler_init+0x1c>
        delete_task( id );
};
 c1001b4:	e24bd00c 	sub	sp, fp, #12
 c1001b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1001bc:	e12fff1e 	bx	lr

0c1001c0 <scheduler>:

void scheduler( void ) /* Esta funcion es la ISR del timer0 */
{
 c1001c0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1001c4:	e1a0c00d 	mov	ip, sp
 c1001c8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1001cc:	e24cb004 	sub	fp, ip, #4
 c1001d0:	e24dd008 	sub	sp, sp, #8
    uint32 id;
    
    I_ISPC = BIT_TIMER0;    /* Borra el bit de interrupción pendiente */
 c1001d4:	e59f3108 	ldr	r3, [pc, #264]	; c1002e4 <scheduler+0x124>
 c1001d8:	e3a02a02 	mov	r2, #8192	; 0x2000
 c1001dc:	e5832000 	str	r2, [r3]

    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c1001e0:	e3a03000 	mov	r3, #0
 c1001e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1001e8:	ea000036 	b	c1002c8 <scheduler+0x108>
        if( tasks[id].pfunction )
 c1001ec:	e59f30f4 	ldr	r3, [pc, #244]	; c1002e8 <scheduler+0x128>
 c1001f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1001f4:	e7933202 	ldr	r3, [r3, r2, lsl #4]
 c1001f8:	e3530000 	cmp	r3, #0
 c1001fc:	0a00002e 	beq	c1002bc <scheduler+0xfc>
            if( ++tasks[id].ticks == tasks[id].period ) /* Si el contador de ticks equivale a su periodo de ejecución: */
 c100200:	e59f10e0 	ldr	r1, [pc, #224]	; c1002e8 <scheduler+0x128>
 c100204:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100208:	e3a03008 	mov	r3, #8
 c10020c:	e1a02202 	lsl	r2, r2, #4
 c100210:	e0812002 	add	r2, r1, r2
 c100214:	e0823003 	add	r3, r2, r3
 c100218:	e5933000 	ldr	r3, [r3]
 c10021c:	e2832001 	add	r2, r3, #1
 c100220:	e59f00c0 	ldr	r0, [pc, #192]	; c1002e8 <scheduler+0x128>
 c100224:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c100228:	e3a03008 	mov	r3, #8
 c10022c:	e1a01201 	lsl	r1, r1, #4
 c100230:	e0801001 	add	r1, r0, r1
 c100234:	e0813003 	add	r3, r1, r3
 c100238:	e5832000 	str	r2, [r3]
 c10023c:	e59f10a4 	ldr	r1, [pc, #164]	; c1002e8 <scheduler+0x128>
 c100240:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100244:	e3a03008 	mov	r3, #8
 c100248:	e1a02202 	lsl	r2, r2, #4
 c10024c:	e0812002 	add	r2, r1, r2
 c100250:	e0823003 	add	r3, r2, r3
 c100254:	e5932000 	ldr	r2, [r3]
 c100258:	e59f0088 	ldr	r0, [pc, #136]	; c1002e8 <scheduler+0x128>
 c10025c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c100260:	e3a03004 	mov	r3, #4
 c100264:	e1a01201 	lsl	r1, r1, #4
 c100268:	e0801001 	add	r1, r0, r1
 c10026c:	e0813003 	add	r3, r1, r3
 c100270:	e5933000 	ldr	r3, [r3]
 c100274:	e1520003 	cmp	r2, r3
 c100278:	1a00000f 	bne	c1002bc <scheduler+0xfc>
            {
                tasks[id].ticks = 0;                    /* Inicializa a 0 su contador de ticks */
 c10027c:	e59f1064 	ldr	r1, [pc, #100]	; c1002e8 <scheduler+0x128>
 c100280:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100284:	e3a03008 	mov	r3, #8
 c100288:	e1a02202 	lsl	r2, r2, #4
 c10028c:	e0812002 	add	r2, r1, r2
 c100290:	e0823003 	add	r3, r2, r3
 c100294:	e3a02000 	mov	r2, #0
 c100298:	e5832000 	str	r2, [r3]
                tasks[id].ready = TRUE;                 /* Pasa la tarea a estado "preparado" */
 c10029c:	e59f1044 	ldr	r1, [pc, #68]	; c1002e8 <scheduler+0x128>
 c1002a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1002a4:	e3a03008 	mov	r3, #8
 c1002a8:	e1a02202 	lsl	r2, r2, #4
 c1002ac:	e0812002 	add	r2, r1, r2
 c1002b0:	e0823003 	add	r3, r2, r3
 c1002b4:	e3a02001 	mov	r2, #1
 c1002b8:	e5c32004 	strb	r2, [r3, #4]
{
    uint32 id;
    
    I_ISPC = BIT_TIMER0;    /* Borra el bit de interrupción pendiente */

    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c1002bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1002c0:	e2833001 	add	r3, r3, #1
 c1002c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1002c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1002cc:	e3530009 	cmp	r3, #9
 c1002d0:	9affffc5 	bls	c1001ec <scheduler+0x2c>
            if( ++tasks[id].ticks == tasks[id].period ) /* Si el contador de ticks equivale a su periodo de ejecución: */
            {
                tasks[id].ticks = 0;                    /* Inicializa a 0 su contador de ticks */
                tasks[id].ready = TRUE;                 /* Pasa la tarea a estado "preparado" */
            };
};
 c1002d4:	e24bd01c 	sub	sp, fp, #28
 c1002d8:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1002dc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1002e0:	e25ef004 	subs	pc, lr, #4
 c1002e4:	01e00024 	.word	0x01e00024
 c1002e8:	0c10a4e0 	.word	0x0c10a4e0

0c1002ec <dispacher>:
    
void dispacher( void )
{
 c1002ec:	e1a0c00d 	mov	ip, sp
 c1002f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1002f4:	e24cb004 	sub	fp, ip, #4
 c1002f8:	e24dd008 	sub	sp, sp, #8
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c1002fc:	e3a03000 	mov	r3, #0
 c100300:	e50b3010 	str	r3, [fp, #-16]
 c100304:	ea000018 	b	c10036c <dispacher+0x80>
        if( tasks[id].ready == TRUE )                   /* Si la tarea está en estado "preparado": */
 c100308:	e59f1074 	ldr	r1, [pc, #116]	; c100384 <dispacher+0x98>
 c10030c:	e51b2010 	ldr	r2, [fp, #-16]
 c100310:	e3a03008 	mov	r3, #8
 c100314:	e1a02202 	lsl	r2, r2, #4
 c100318:	e0812002 	add	r2, r1, r2
 c10031c:	e0823003 	add	r3, r2, r3
 c100320:	e5d33004 	ldrb	r3, [r3, #4]
 c100324:	e3530001 	cmp	r3, #1
 c100328:	1a00000c 	bne	c100360 <dispacher+0x74>
        {
            (*tasks[id].pfunction)();                   /* La ejecuta */
 c10032c:	e59f3050 	ldr	r3, [pc, #80]	; c100384 <dispacher+0x98>
 c100330:	e51b2010 	ldr	r2, [fp, #-16]
 c100334:	e7933202 	ldr	r3, [r3, r2, lsl #4]
 c100338:	e1a0e00f 	mov	lr, pc
 c10033c:	e12fff13 	bx	r3
            tasks[id].ready = FALSE;                    /* Pasa la tarea a estado "no preparado" */
 c100340:	e59f103c 	ldr	r1, [pc, #60]	; c100384 <dispacher+0x98>
 c100344:	e51b2010 	ldr	r2, [fp, #-16]
 c100348:	e3a03008 	mov	r3, #8
 c10034c:	e1a02202 	lsl	r2, r2, #4
 c100350:	e0812002 	add	r2, r1, r2
 c100354:	e0823003 	add	r3, r2, r3
 c100358:	e3a02000 	mov	r2, #0
 c10035c:	e5c32004 	strb	r2, [r3, #4]
    
void dispacher( void )
{
    uint32 id;
    
    for( id=0; id<MAX_TASKS; id++ )                     /* Recorre la lista completa de TCB */
 c100360:	e51b3010 	ldr	r3, [fp, #-16]
 c100364:	e2833001 	add	r3, r3, #1
 c100368:	e50b3010 	str	r3, [fp, #-16]
 c10036c:	e51b3010 	ldr	r3, [fp, #-16]
 c100370:	e3530009 	cmp	r3, #9
 c100374:	9affffe3 	bls	c100308 <dispacher+0x1c>
        if( tasks[id].ready == TRUE )                   /* Si la tarea está en estado "preparado": */
        {
            (*tasks[id].pfunction)();                   /* La ejecuta */
            tasks[id].ready = FALSE;                    /* Pasa la tarea a estado "no preparado" */
        }
};
 c100378:	e24bd00c 	sub	sp, fp, #12
 c10037c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100380:	e12fff1e 	bx	lr
 c100384:	0c10a4e0 	.word	0x0c10a4e0

0c100388 <plotTime>:
#include <lcd.h>
#include <rtc.h>
#include "proyecto.h"

void plotTime()
{
 c100388:	e1a0c00d 	mov	ip, sp
 c10038c:	e92dd800 	push	{fp, ip, lr, pc}
 c100390:	e24cb004 	sub	fp, ip, #4
 c100394:	e24dd008 	sub	sp, sp, #8

	rtc_time_t rtc_time;

	rtc_gettime(&rtc_time);
 c100398:	e24b3014 	sub	r3, fp, #20
 c10039c:	e1a00003 	mov	r0, r3
 c1003a0:	eb00119d 	bl	c104a1c <rtc_gettime>

	lcd_puts(84,0,BLACK, rtc_stringDate(rtc_time));
 c1003a4:	e24b3014 	sub	r3, fp, #20
 c1003a8:	e8930003 	ldm	r3, {r0, r1}
 c1003ac:	eb0012fa 	bl	c104f9c <rtc_stringDate>
 c1003b0:	e1a03000 	mov	r3, r0
 c1003b4:	e3a00054 	mov	r0, #84	; 0x54
 c1003b8:	e3a01000 	mov	r1, #0
 c1003bc:	e3a0200f 	mov	r2, #15
 c1003c0:	eb000d20 	bl	c103848 <lcd_puts>
}
 c1003c4:	e24bd00c 	sub	sp, fp, #12
 c1003c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003cc:	e12fff1e 	bx	lr

0c1003d0 <plotWelcomeScreen>:

void plotWelcomeScreen( void )
{
 c1003d0:	e1a0c00d 	mov	ip, sp
 c1003d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1003d8:	e24cb004 	sub	fp, ip, #4
 c1003dc:	e24dd008 	sub	sp, sp, #8

    lcd_clear();
 c1003e0:	eb000ae0 	bl	c102f68 <lcd_clear>
    lcd_puts_x2( 24, 48, BLACK, "Pulse la pantalla" );
 c1003e4:	e3a00018 	mov	r0, #24
 c1003e8:	e3a01030 	mov	r1, #48	; 0x30
 c1003ec:	e3a0200f 	mov	r2, #15
 c1003f0:	e59f30e4 	ldr	r3, [pc, #228]	; c1004dc <plotWelcomeScreen+0x10c>
 c1003f4:	eb000ec9 	bl	c103f20 <lcd_puts_x2>
    lcd_puts_x2( 24, 76, BLACK, "  para comenzar  " );
 c1003f8:	e3a00018 	mov	r0, #24
 c1003fc:	e3a0104c 	mov	r1, #76	; 0x4c
 c100400:	e3a0200f 	mov	r2, #15
 c100404:	e59f30d4 	ldr	r3, [pc, #212]	; c1004e0 <plotWelcomeScreen+0x110>
 c100408:	eb000ec4 	bl	c103f20 <lcd_puts_x2>
    lcd_draw_box(0, 126, LCD_WIDTH-1 , LCD_HEIGHT-20, BLACK, 1);
 c10040c:	e3a0300f 	mov	r3, #15
 c100410:	e58d3000 	str	r3, [sp]
 c100414:	e3a03001 	mov	r3, #1
 c100418:	e58d3004 	str	r3, [sp, #4]
 c10041c:	e3a00000 	mov	r0, #0
 c100420:	e3a0107e 	mov	r1, #126	; 0x7e
 c100424:	e59f20b8 	ldr	r2, [pc, #184]	; c1004e4 <plotWelcomeScreen+0x114>
 c100428:	e3a030dc 	mov	r3, #220	; 0xdc
 c10042c:	eb000ba5 	bl	c1032c8 <lcd_draw_box>
    lcd_puts(66, 122, BLACK, " HORARIO DE FUNCIONAMIENTO ");
 c100430:	e3a00042 	mov	r0, #66	; 0x42
 c100434:	e3a0107a 	mov	r1, #122	; 0x7a
 c100438:	e3a0200f 	mov	r2, #15
 c10043c:	e59f30a4 	ldr	r3, [pc, #164]	; c1004e8 <plotWelcomeScreen+0x118>
 c100440:	eb000d00 	bl	c103848 <lcd_puts>
    lcd_puts(24, 140, BLACK, "dom: gratis");
 c100444:	e3a00018 	mov	r0, #24
 c100448:	e3a0108c 	mov	r1, #140	; 0x8c
 c10044c:	e3a0200f 	mov	r2, #15
 c100450:	e59f3094 	ldr	r3, [pc, #148]	; c1004ec <plotWelcomeScreen+0x11c>
 c100454:	eb000cfb 	bl	c103848 <lcd_puts>
    lcd_puts(24, 156, BLACK, "lun: 09:00-21:00");
 c100458:	e3a00018 	mov	r0, #24
 c10045c:	e3a0109c 	mov	r1, #156	; 0x9c
 c100460:	e3a0200f 	mov	r2, #15
 c100464:	e59f3084 	ldr	r3, [pc, #132]	; c1004f0 <plotWelcomeScreen+0x120>
 c100468:	eb000cf6 	bl	c103848 <lcd_puts>
    lcd_puts(24, 172, BLACK, "mar: 09:00-21:00");
 c10046c:	e3a00018 	mov	r0, #24
 c100470:	e3a010ac 	mov	r1, #172	; 0xac
 c100474:	e3a0200f 	mov	r2, #15
 c100478:	e59f3074 	ldr	r3, [pc, #116]	; c1004f4 <plotWelcomeScreen+0x124>
 c10047c:	eb000cf1 	bl	c103848 <lcd_puts>
    lcd_puts(24, 188, BLACK, "mie: 09:00-21:00");
 c100480:	e3a00018 	mov	r0, #24
 c100484:	e3a010bc 	mov	r1, #188	; 0xbc
 c100488:	e3a0200f 	mov	r2, #15
 c10048c:	e59f3064 	ldr	r3, [pc, #100]	; c1004f8 <plotWelcomeScreen+0x128>
 c100490:	eb000cec 	bl	c103848 <lcd_puts>
    lcd_puts(166, 140, BLACK, "jue: 09:00-21:00");
 c100494:	e3a000a6 	mov	r0, #166	; 0xa6
 c100498:	e3a0108c 	mov	r1, #140	; 0x8c
 c10049c:	e3a0200f 	mov	r2, #15
 c1004a0:	e59f3054 	ldr	r3, [pc, #84]	; c1004fc <plotWelcomeScreen+0x12c>
 c1004a4:	eb000ce7 	bl	c103848 <lcd_puts>
    lcd_puts(166, 156, BLACK, "vie: 09:00-21:00");
 c1004a8:	e3a000a6 	mov	r0, #166	; 0xa6
 c1004ac:	e3a0109c 	mov	r1, #156	; 0x9c
 c1004b0:	e3a0200f 	mov	r2, #15
 c1004b4:	e59f3044 	ldr	r3, [pc, #68]	; c100500 <plotWelcomeScreen+0x130>
 c1004b8:	eb000ce2 	bl	c103848 <lcd_puts>
    lcd_puts(166, 172, BLACK, "sab: 09:00-15:00");
 c1004bc:	e3a000a6 	mov	r0, #166	; 0xa6
 c1004c0:	e3a010ac 	mov	r1, #172	; 0xac
 c1004c4:	e3a0200f 	mov	r2, #15
 c1004c8:	e59f3034 	ldr	r3, [pc, #52]	; c100504 <plotWelcomeScreen+0x134>
 c1004cc:	eb000cdd 	bl	c103848 <lcd_puts>

}
 c1004d0:	e24bd00c 	sub	sp, fp, #12
 c1004d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1004d8:	e12fff1e 	bx	lr
 c1004dc:	0c108b20 	.word	0x0c108b20
 c1004e0:	0c108b34 	.word	0x0c108b34
 c1004e4:	0000013f 	.word	0x0000013f
 c1004e8:	0c108b48 	.word	0x0c108b48
 c1004ec:	0c108b64 	.word	0x0c108b64
 c1004f0:	0c108b70 	.word	0x0c108b70
 c1004f4:	0c108b84 	.word	0x0c108b84
 c1004f8:	0c108b98 	.word	0x0c108b98
 c1004fc:	0c108bac 	.word	0x0c108bac
 c100500:	0c108bc0 	.word	0x0c108bc0
 c100504:	0c108bd4 	.word	0x0c108bd4

0c100508 <plotSelectionScreen>:


void plotSelectionScreen( parking_t* places)
{
 c100508:	e1a0c00d 	mov	ip, sp
 c10050c:	e92dd800 	push	{fp, ip, lr, pc}
 c100510:	e24cb004 	sub	fp, ip, #4
 c100514:	e24dd020 	sub	sp, sp, #32
 c100518:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	lcd_clear();
 c10051c:	eb000a91 	bl	c102f68 <lcd_clear>
	lcd_puts_x2( 32, 32, BLACK, "Seleccione plaza" );
 c100520:	e3a00020 	mov	r0, #32
 c100524:	e3a01020 	mov	r1, #32
 c100528:	e3a0200f 	mov	r2, #15
 c10052c:	e59f3218 	ldr	r3, [pc, #536]	; c10074c <plotSelectionScreen+0x244>
 c100530:	eb000e7a 	bl	c103f20 <lcd_puts_x2>
	lcd_draw_box(0, 64, LCD_WIDTH/4, 128, BLACK, 1);
 c100534:	e3a0300f 	mov	r3, #15
 c100538:	e58d3000 	str	r3, [sp]
 c10053c:	e3a03001 	mov	r3, #1
 c100540:	e58d3004 	str	r3, [sp, #4]
 c100544:	e3a00000 	mov	r0, #0
 c100548:	e3a01040 	mov	r1, #64	; 0x40
 c10054c:	e3a02050 	mov	r2, #80	; 0x50
 c100550:	e3a03080 	mov	r3, #128	; 0x80
 c100554:	eb000b5b 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(LCD_WIDTH/4, 64, LCD_WIDTH*2/4, 128, BLACK, 1);
 c100558:	e3a0300f 	mov	r3, #15
 c10055c:	e58d3000 	str	r3, [sp]
 c100560:	e3a03001 	mov	r3, #1
 c100564:	e58d3004 	str	r3, [sp, #4]
 c100568:	e3a00050 	mov	r0, #80	; 0x50
 c10056c:	e3a01040 	mov	r1, #64	; 0x40
 c100570:	e3a020a0 	mov	r2, #160	; 0xa0
 c100574:	e3a03080 	mov	r3, #128	; 0x80
 c100578:	eb000b52 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(LCD_WIDTH*2/4, 64, LCD_WIDTH*3/4, 128, BLACK, 1);
 c10057c:	e3a0300f 	mov	r3, #15
 c100580:	e58d3000 	str	r3, [sp]
 c100584:	e3a03001 	mov	r3, #1
 c100588:	e58d3004 	str	r3, [sp, #4]
 c10058c:	e3a000a0 	mov	r0, #160	; 0xa0
 c100590:	e3a01040 	mov	r1, #64	; 0x40
 c100594:	e3a020f0 	mov	r2, #240	; 0xf0
 c100598:	e3a03080 	mov	r3, #128	; 0x80
 c10059c:	eb000b49 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(LCD_WIDTH*3/4, 64, LCD_WIDTH-1, 128, BLACK, 1);
 c1005a0:	e3a0300f 	mov	r3, #15
 c1005a4:	e58d3000 	str	r3, [sp]
 c1005a8:	e3a03001 	mov	r3, #1
 c1005ac:	e58d3004 	str	r3, [sp, #4]
 c1005b0:	e3a000f0 	mov	r0, #240	; 0xf0
 c1005b4:	e3a01040 	mov	r1, #64	; 0x40
 c1005b8:	e59f2190 	ldr	r2, [pc, #400]	; c100750 <plotSelectionScreen+0x248>
 c1005bc:	e3a03080 	mov	r3, #128	; 0x80
 c1005c0:	eb000b40 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(0, 128 , LCD_WIDTH/4, 192, BLACK, 1);
 c1005c4:	e3a0300f 	mov	r3, #15
 c1005c8:	e58d3000 	str	r3, [sp]
 c1005cc:	e3a03001 	mov	r3, #1
 c1005d0:	e58d3004 	str	r3, [sp, #4]
 c1005d4:	e3a00000 	mov	r0, #0
 c1005d8:	e3a01080 	mov	r1, #128	; 0x80
 c1005dc:	e3a02050 	mov	r2, #80	; 0x50
 c1005e0:	e3a030c0 	mov	r3, #192	; 0xc0
 c1005e4:	eb000b37 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(LCD_WIDTH/4, 128, LCD_WIDTH*2/4, 192, BLACK, 1);
 c1005e8:	e3a0300f 	mov	r3, #15
 c1005ec:	e58d3000 	str	r3, [sp]
 c1005f0:	e3a03001 	mov	r3, #1
 c1005f4:	e58d3004 	str	r3, [sp, #4]
 c1005f8:	e3a00050 	mov	r0, #80	; 0x50
 c1005fc:	e3a01080 	mov	r1, #128	; 0x80
 c100600:	e3a020a0 	mov	r2, #160	; 0xa0
 c100604:	e3a030c0 	mov	r3, #192	; 0xc0
 c100608:	eb000b2e 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(LCD_WIDTH*2/4, 128, LCD_WIDTH*3/4, 192, BLACK, 1);
 c10060c:	e3a0300f 	mov	r3, #15
 c100610:	e58d3000 	str	r3, [sp]
 c100614:	e3a03001 	mov	r3, #1
 c100618:	e58d3004 	str	r3, [sp, #4]
 c10061c:	e3a000a0 	mov	r0, #160	; 0xa0
 c100620:	e3a01080 	mov	r1, #128	; 0x80
 c100624:	e3a020f0 	mov	r2, #240	; 0xf0
 c100628:	e3a030c0 	mov	r3, #192	; 0xc0
 c10062c:	eb000b25 	bl	c1032c8 <lcd_draw_box>
	lcd_draw_box(LCD_WIDTH*3/4, 128, LCD_WIDTH-1, 192, BLACK, 1);
 c100630:	e3a0300f 	mov	r3, #15
 c100634:	e58d3000 	str	r3, [sp]
 c100638:	e3a03001 	mov	r3, #1
 c10063c:	e58d3004 	str	r3, [sp, #4]
 c100640:	e3a000f0 	mov	r0, #240	; 0xf0
 c100644:	e3a01080 	mov	r1, #128	; 0x80
 c100648:	e59f2100 	ldr	r2, [pc, #256]	; c100750 <plotSelectionScreen+0x248>
 c10064c:	e3a030c0 	mov	r3, #192	; 0xc0
 c100650:	eb000b1c 	bl	c1032c8 <lcd_draw_box>

	int i, x = LCD_WIDTH/16+8, y = 80;
 c100654:	e3a0301c 	mov	r3, #28
 c100658:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10065c:	e3a03050 	mov	r3, #80	; 0x50
 c100660:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	char id;
	for(i = 0; i < MAXPLACES; i++)
 c100664:	e3a03000 	mov	r3, #0
 c100668:	e50b3010 	str	r3, [fp, #-16]
 c10066c:	ea000030 	b	c100734 <plotSelectionScreen+0x22c>
	{
		if(places[i].free)
 c100670:	e51b2010 	ldr	r2, [fp, #-16]
 c100674:	e1a03002 	mov	r3, r2
 c100678:	e1a03083 	lsl	r3, r3, #1
 c10067c:	e0833002 	add	r3, r3, r2
 c100680:	e1a03103 	lsl	r3, r3, #2
 c100684:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100688:	e0823003 	add	r3, r2, r3
 c10068c:	e5d33001 	ldrb	r3, [r3, #1]
 c100690:	e3530000 	cmp	r3, #0
 c100694:	0a00000c 	beq	c1006cc <plotSelectionScreen+0x1c4>
		{
			lcd_putint_x2(x,y,BLACK, i+1);
 c100698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10069c:	e1a03803 	lsl	r3, r3, #16
 c1006a0:	e1a01823 	lsr	r1, r3, #16
 c1006a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1006a8:	e1a03803 	lsl	r3, r3, #16
 c1006ac:	e1a02823 	lsr	r2, r3, #16
 c1006b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1006b4:	e2833001 	add	r3, r3, #1
 c1006b8:	e1a00001 	mov	r0, r1
 c1006bc:	e1a01002 	mov	r1, r2
 c1006c0:	e3a0200f 	mov	r2, #15
 c1006c4:	eb000e32 	bl	c103f94 <lcd_putint_x2>
 c1006c8:	ea00000c 	b	c100700 <plotSelectionScreen+0x1f8>
		}
		else
		{
			id ='X';
 c1006cc:	e3a03058 	mov	r3, #88	; 0x58
 c1006d0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
			lcd_putchar_x2(x,y,BLACK,id);
 c1006d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1006d8:	e1a03803 	lsl	r3, r3, #16
 c1006dc:	e1a01823 	lsr	r1, r3, #16
 c1006e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1006e4:	e1a03803 	lsl	r3, r3, #16
 c1006e8:	e1a02823 	lsr	r2, r3, #16
 c1006ec:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1006f0:	e1a00001 	mov	r0, r1
 c1006f4:	e1a01002 	mov	r1, r2
 c1006f8:	e3a0200f 	mov	r2, #15
 c1006fc:	eb000cf3 	bl	c103ad0 <lcd_putchar_x2>
		}

		x += LCD_WIDTH/8;
 c100700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100704:	e2833028 	add	r3, r3, #40	; 0x28
 c100708:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if(i == 3) {
 c10070c:	e51b3010 	ldr	r3, [fp, #-16]
 c100710:	e3530003 	cmp	r3, #3
 c100714:	1a000003 	bne	c100728 <plotSelectionScreen+0x220>
			x = LCD_WIDTH/16+8;
 c100718:	e3a0301c 	mov	r3, #28
 c10071c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			y = 145;
 c100720:	e3a03091 	mov	r3, #145	; 0x91
 c100724:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	lcd_draw_box(LCD_WIDTH*2/4, 128, LCD_WIDTH*3/4, 192, BLACK, 1);
	lcd_draw_box(LCD_WIDTH*3/4, 128, LCD_WIDTH-1, 192, BLACK, 1);

	int i, x = LCD_WIDTH/16+8, y = 80;
	char id;
	for(i = 0; i < MAXPLACES; i++)
 c100728:	e51b3010 	ldr	r3, [fp, #-16]
 c10072c:	e2833001 	add	r3, r3, #1
 c100730:	e50b3010 	str	r3, [fp, #-16]
 c100734:	e51b3010 	ldr	r3, [fp, #-16]
 c100738:	e3530007 	cmp	r3, #7
 c10073c:	daffffcb 	ble	c100670 <plotSelectionScreen+0x168>
			x = LCD_WIDTH/16+8;
			y = 145;
		}

	}
}
 c100740:	e24bd00c 	sub	sp, fp, #12
 c100744:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100748:	e12fff1e 	bx	lr
 c10074c:	0c108be8 	.word	0x0c108be8
 c100750:	0000013f 	.word	0x0000013f

0c100754 <plotSelEnc>:

void plotSelEnc()
{
 c100754:	e1a0c00d 	mov	ip, sp
 c100758:	e92dd800 	push	{fp, ip, lr, pc}
 c10075c:	e24cb004 	sub	fp, ip, #4
	lcd_puts( 32, LCD_HEIGHT - 35, BLACK, ("Pulse una plaza por favor."));
 c100760:	e3a00020 	mov	r0, #32
 c100764:	e3a010cd 	mov	r1, #205	; 0xcd
 c100768:	e3a0200f 	mov	r2, #15
 c10076c:	e59f300c 	ldr	r3, [pc, #12]	; c100780 <plotSelEnc+0x2c>
 c100770:	eb000c34 	bl	c103848 <lcd_puts>
}
 c100774:	e24bd00c 	sub	sp, fp, #12
 c100778:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10077c:	e12fff1e 	bx	lr
 c100780:	0c108bfc 	.word	0x0c108bfc

0c100784 <plotPaymentScreen>:

void plotPaymentScreen(parking_t parking, uint8 credit)
{
 c100784:	e1a0c00d 	mov	ip, sp
 c100788:	e92dd800 	push	{fp, ip, lr, pc}
 c10078c:	e24cb004 	sub	fp, ip, #4
 c100790:	e24dd018 	sub	sp, sp, #24
 c100794:	e24bc018 	sub	ip, fp, #24
 c100798:	e88c0007 	stm	ip, {r0, r1, r2}
 c10079c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	lcd_clear();
 c1007a0:	eb0009f0 	bl	c102f68 <lcd_clear>
	lcd_draw_box(0,16,LCD_WIDTH-1,70,BLACK,1);
 c1007a4:	e3a0300f 	mov	r3, #15
 c1007a8:	e58d3000 	str	r3, [sp]
 c1007ac:	e3a03001 	mov	r3, #1
 c1007b0:	e58d3004 	str	r3, [sp, #4]
 c1007b4:	e3a00000 	mov	r0, #0
 c1007b8:	e3a01010 	mov	r1, #16
 c1007bc:	e59f2124 	ldr	r2, [pc, #292]	; c1008e8 <plotPaymentScreen+0x164>
 c1007c0:	e3a03046 	mov	r3, #70	; 0x46
 c1007c4:	eb000abf 	bl	c1032c8 <lcd_draw_box>
	lcd_puts(LCD_WIDTH/2-32, 16, BLACK, " TARIFAS ");
 c1007c8:	e3a00080 	mov	r0, #128	; 0x80
 c1007cc:	e3a01010 	mov	r1, #16
 c1007d0:	e3a0200f 	mov	r2, #15
 c1007d4:	e59f3110 	ldr	r3, [pc, #272]	; c1008ec <plotPaymentScreen+0x168>
 c1007d8:	eb000c1a 	bl	c103848 <lcd_puts>
	lcd_puts(32,26,BLACK,"Precio por minuto: 0,01 euros");
 c1007dc:	e3a00020 	mov	r0, #32
 c1007e0:	e3a0101a 	mov	r1, #26
 c1007e4:	e3a0200f 	mov	r2, #15
 c1007e8:	e59f3100 	ldr	r3, [pc, #256]	; c1008f0 <plotPaymentScreen+0x16c>
 c1007ec:	eb000c15 	bl	c103848 <lcd_puts>
	lcd_puts(32,42,BLACK," Estancia minima:  20 minutos");
 c1007f0:	e3a00020 	mov	r0, #32
 c1007f4:	e3a0102a 	mov	r1, #42	; 0x2a
 c1007f8:	e3a0200f 	mov	r2, #15
 c1007fc:	e59f30f0 	ldr	r3, [pc, #240]	; c1008f4 <plotPaymentScreen+0x170>
 c100800:	eb000c10 	bl	c103848 <lcd_puts>
	lcd_puts(32,58,BLACK," Estancia maxima: 240 minutos");
 c100804:	e3a00020 	mov	r0, #32
 c100808:	e3a0103a 	mov	r1, #58	; 0x3a
 c10080c:	e3a0200f 	mov	r2, #15
 c100810:	e59f30e0 	ldr	r3, [pc, #224]	; c1008f8 <plotPaymentScreen+0x174>
 c100814:	eb000c0b 	bl	c103848 <lcd_puts>
	lcd_puts_x2( 64, 80, BLACK, "PLAZA ");
 c100818:	e3a00040 	mov	r0, #64	; 0x40
 c10081c:	e3a01050 	mov	r1, #80	; 0x50
 c100820:	e3a0200f 	mov	r2, #15
 c100824:	e59f30d0 	ldr	r3, [pc, #208]	; c1008fc <plotPaymentScreen+0x178>
 c100828:	eb000dbc 	bl	c103f20 <lcd_puts_x2>
	lcd_putint_x2( 64+48, 80, BLACK, parking.id);
 c10082c:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c100830:	e3a00070 	mov	r0, #112	; 0x70
 c100834:	e3a01050 	mov	r1, #80	; 0x50
 c100838:	e3a0200f 	mov	r2, #15
 c10083c:	eb000dd4 	bl	c103f94 <lcd_putint_x2>
	lcd_puts((LCD_WIDTH/2) -80, 80 + 50, BLACK, "Credito:   ,   euros");
 c100840:	e3a00050 	mov	r0, #80	; 0x50
 c100844:	e3a01082 	mov	r1, #130	; 0x82
 c100848:	e3a0200f 	mov	r2, #15
 c10084c:	e59f30ac 	ldr	r3, [pc, #172]	; c100900 <plotPaymentScreen+0x17c>
 c100850:	eb000bfc 	bl	c103848 <lcd_puts>
	plotPayCredit(credit);
 c100854:	e59f30a8 	ldr	r3, [pc, #168]	; c100904 <plotPaymentScreen+0x180>
 c100858:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10085c:	e1a00002 	mov	r0, r2
 c100860:	e1a0e00f 	mov	lr, pc
 c100864:	e12fff13 	bx	r3
	plotPayDeadline(parking.deadline);
 c100868:	e59fc098 	ldr	ip, [pc, #152]	; c100908 <plotPaymentScreen+0x184>
 c10086c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100870:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100874:	e1a02802 	lsl	r2, r2, #16
 c100878:	e1823003 	orr	r3, r2, r3
 c10087c:	e3a02000 	mov	r2, #0
 c100880:	e1a02003 	mov	r2, r3
 c100884:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100888:	e55b1010 	ldrb	r1, [fp, #-16]
 c10088c:	e1a01801 	lsl	r1, r1, #16
 c100890:	e1811003 	orr	r1, r1, r3
 c100894:	e3a03000 	mov	r3, #0
 c100898:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 c10089c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 c1008a0:	e1813003 	orr	r3, r1, r3
 c1008a4:	e1a00002 	mov	r0, r2
 c1008a8:	e1a01003 	mov	r1, r3
 c1008ac:	e1a0e00f 	mov	lr, pc
 c1008b0:	e12fff1c 	bx	ip
	lcd_puts( (LCD_WIDTH/2) -56, LCD_HEIGHT - 55, BLACK, ("Inserte monedas"));
 c1008b4:	e3a00068 	mov	r0, #104	; 0x68
 c1008b8:	e3a010b9 	mov	r1, #185	; 0xb9
 c1008bc:	e3a0200f 	mov	r2, #15
 c1008c0:	e59f3044 	ldr	r3, [pc, #68]	; c10090c <plotPaymentScreen+0x188>
 c1008c4:	eb000bdf 	bl	c103848 <lcd_puts>
	lcd_puts( 32, LCD_HEIGHT - 35, BLACK, ("Pulse la pantalla para aceptar"));
 c1008c8:	e3a00020 	mov	r0, #32
 c1008cc:	e3a010cd 	mov	r1, #205	; 0xcd
 c1008d0:	e3a0200f 	mov	r2, #15
 c1008d4:	e59f3034 	ldr	r3, [pc, #52]	; c100910 <plotPaymentScreen+0x18c>
 c1008d8:	eb000bda 	bl	c103848 <lcd_puts>

}
 c1008dc:	e24bd00c 	sub	sp, fp, #12
 c1008e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008e4:	e12fff1e 	bx	lr
 c1008e8:	0000013f 	.word	0x0000013f
 c1008ec:	0c108c18 	.word	0x0c108c18
 c1008f0:	0c108c24 	.word	0x0c108c24
 c1008f4:	0c108c44 	.word	0x0c108c44
 c1008f8:	0c108c64 	.word	0x0c108c64
 c1008fc:	0c108c84 	.word	0x0c108c84
 c100900:	0c108c8c 	.word	0x0c108c8c
 c100904:	0c100914 	.word	0x0c100914
 c100908:	0c1009a0 	.word	0x0c1009a0
 c10090c:	0c108ca4 	.word	0x0c108ca4
 c100910:	0c108cb4 	.word	0x0c108cb4

0c100914 <plotPayCredit>:

void plotPayCredit(uint8 credit)
{
 c100914:	e1a0c00d 	mov	ip, sp
 c100918:	e92dd800 	push	{fp, ip, lr, pc}
 c10091c:	e24cb004 	sub	fp, ip, #4
 c100920:	e24dd008 	sub	sp, sp, #8
 c100924:	e1a03000 	mov	r3, r0
 c100928:	e54b300d 	strb	r3, [fp, #-13]
	lcd_putint((LCD_WIDTH/2), 80 + 50, BLACK, credit/100);
 c10092c:	e55b200d 	ldrb	r2, [fp, #-13]
 c100930:	e59f3064 	ldr	r3, [pc, #100]	; c10099c <plotPayCredit+0x88>
 c100934:	e0831392 	umull	r1, r3, r2, r3
 c100938:	e1a032a3 	lsr	r3, r3, #5
 c10093c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100940:	e3a000a0 	mov	r0, #160	; 0xa0
 c100944:	e3a01082 	mov	r1, #130	; 0x82
 c100948:	e3a0200f 	mov	r2, #15
 c10094c:	eb000bda 	bl	c1038bc <lcd_putint>
	lcd_putint((LCD_WIDTH/2)+16, 80 + 50, BLACK, credit%100);
 c100950:	e55b200d 	ldrb	r2, [fp, #-13]
 c100954:	e59f3040 	ldr	r3, [pc, #64]	; c10099c <plotPayCredit+0x88>
 c100958:	e0831392 	umull	r1, r3, r2, r3
 c10095c:	e1a012a3 	lsr	r1, r3, #5
 c100960:	e1a03001 	mov	r3, r1
 c100964:	e1a03103 	lsl	r3, r3, #2
 c100968:	e0833001 	add	r3, r3, r1
 c10096c:	e1a01103 	lsl	r1, r3, #2
 c100970:	e0833001 	add	r3, r3, r1
 c100974:	e1a03103 	lsl	r3, r3, #2
 c100978:	e0633002 	rsb	r3, r3, r2
 c10097c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100980:	e3a000b0 	mov	r0, #176	; 0xb0
 c100984:	e3a01082 	mov	r1, #130	; 0x82
 c100988:	e3a0200f 	mov	r2, #15
 c10098c:	eb000bca 	bl	c1038bc <lcd_putint>
}
 c100990:	e24bd00c 	sub	sp, fp, #12
 c100994:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100998:	e12fff1e 	bx	lr
 c10099c:	51eb851f 	.word	0x51eb851f

0c1009a0 <plotPayDeadline>:

void plotPayDeadline(rtc_time_t deadline)
{
 c1009a0:	e1a0c00d 	mov	ip, sp
 c1009a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1009a8:	e24cb004 	sub	fp, ip, #4
 c1009ac:	e24dd008 	sub	sp, sp, #8
 c1009b0:	e24b3014 	sub	r3, fp, #20
 c1009b4:	e8830003 	stm	r3, {r0, r1}
	lcd_puts( (LCD_WIDTH/2) -100, 80 + 70, BLACK, "Fin: ");
 c1009b8:	e3a0003c 	mov	r0, #60	; 0x3c
 c1009bc:	e3a01096 	mov	r1, #150	; 0x96
 c1009c0:	e3a0200f 	mov	r2, #15
 c1009c4:	e59f302c 	ldr	r3, [pc, #44]	; c1009f8 <plotPayDeadline+0x58>
 c1009c8:	eb000b9e 	bl	c103848 <lcd_puts>
	lcd_puts( (LCD_WIDTH/2) -60, 80 + 70, BLACK, rtc_stringDate(deadline));
 c1009cc:	e24b3014 	sub	r3, fp, #20
 c1009d0:	e8930003 	ldm	r3, {r0, r1}
 c1009d4:	eb001170 	bl	c104f9c <rtc_stringDate>
 c1009d8:	e1a03000 	mov	r3, r0
 c1009dc:	e3a00064 	mov	r0, #100	; 0x64
 c1009e0:	e3a01096 	mov	r1, #150	; 0x96
 c1009e4:	e3a0200f 	mov	r2, #15
 c1009e8:	eb000b96 	bl	c103848 <lcd_puts>
}
 c1009ec:	e24bd00c 	sub	sp, fp, #12
 c1009f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1009f4:	e12fff1e 	bx	lr
 c1009f8:	0c108cd4 	.word	0x0c108cd4

0c1009fc <plotLicPlateScreen>:

void plotLicPlateScreen(parking_t parking)
{
 c1009fc:	e1a0c00d 	mov	ip, sp
 c100a00:	e92dd800 	push	{fp, ip, lr, pc}
 c100a04:	e24cb004 	sub	fp, ip, #4
 c100a08:	e24dd010 	sub	sp, sp, #16
 c100a0c:	e24b3018 	sub	r3, fp, #24
 c100a10:	e8830007 	stm	r3, {r0, r1, r2}
	lcd_clear();
 c100a14:	eb000953 	bl	c102f68 <lcd_clear>
	lcd_puts_x2( 64, 40, BLACK, "PLAZA ");
 c100a18:	e3a00040 	mov	r0, #64	; 0x40
 c100a1c:	e3a01028 	mov	r1, #40	; 0x28
 c100a20:	e3a0200f 	mov	r2, #15
 c100a24:	e59f3078 	ldr	r3, [pc, #120]	; c100aa4 <plotLicPlateScreen+0xa8>
 c100a28:	eb000d3c 	bl	c103f20 <lcd_puts_x2>
	lcd_putint_x2( 64+48, 40, BLACK, parking.id);
 c100a2c:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c100a30:	e3a00070 	mov	r0, #112	; 0x70
 c100a34:	e3a01028 	mov	r1, #40	; 0x28
 c100a38:	e3a0200f 	mov	r2, #15
 c100a3c:	eb000d54 	bl	c103f94 <lcd_putint_x2>
	lcd_puts((LCD_WIDTH/2) -100, 95, BLACK, "Matricula: ?");
 c100a40:	e3a0003c 	mov	r0, #60	; 0x3c
 c100a44:	e3a0105f 	mov	r1, #95	; 0x5f
 c100a48:	e3a0200f 	mov	r2, #15
 c100a4c:	e59f3054 	ldr	r3, [pc, #84]	; c100aa8 <plotLicPlateScreen+0xac>
 c100a50:	eb000b7c 	bl	c103848 <lcd_puts>
	plotPayDeadline(parking.deadline);
 c100a54:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100a58:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100a5c:	e1a02802 	lsl	r2, r2, #16
 c100a60:	e1823003 	orr	r3, r2, r3
 c100a64:	e3a02000 	mov	r2, #0
 c100a68:	e1a02003 	mov	r2, r3
 c100a6c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100a70:	e55b1010 	ldrb	r1, [fp, #-16]
 c100a74:	e1a01801 	lsl	r1, r1, #16
 c100a78:	e1811003 	orr	r1, r1, r3
 c100a7c:	e3a03000 	mov	r3, #0
 c100a80:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 c100a84:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 c100a88:	e1813003 	orr	r3, r1, r3
 c100a8c:	e1a00002 	mov	r0, r2
 c100a90:	e1a01003 	mov	r1, r3
 c100a94:	ebffffc1 	bl	c1009a0 <plotPayDeadline>
}
 c100a98:	e24bd00c 	sub	sp, fp, #12
 c100a9c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100aa0:	e12fff1e 	bx	lr
 c100aa4:	0c108c84 	.word	0x0c108c84
 c100aa8:	0c108cdc 	.word	0x0c108cdc

0c100aac <plotLicPlateUpdate>:

void plotLicPlateUpdate(int16 licPlate)
{
 c100aac:	e1a0c00d 	mov	ip, sp
 c100ab0:	e92dd800 	push	{fp, ip, lr, pc}
 c100ab4:	e24cb004 	sub	fp, ip, #4
 c100ab8:	e24dd008 	sub	sp, sp, #8
 c100abc:	e1a03000 	mov	r3, r0
 c100ac0:	e14b30be 	strh	r3, [fp, #-14]
	lcd_puthex((LCD_WIDTH/2) -12, 95, BLACK, licPlate);
 c100ac4:	e15b30fe 	ldrsh	r3, [fp, #-14]
 c100ac8:	e3a00094 	mov	r0, #148	; 0x94
 c100acc:	e3a0105f 	mov	r1, #95	; 0x5f
 c100ad0:	e3a0200f 	mov	r2, #15
 c100ad4:	eb000bc5 	bl	c1039f0 <lcd_puthex>
}
 c100ad8:	e24bd00c 	sub	sp, fp, #12
 c100adc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ae0:	e12fff1e 	bx	lr

0c100ae4 <plotLicPlateEnc>:

void plotLicPlateEnc()
{
 c100ae4:	e1a0c00d 	mov	ip, sp
 c100ae8:	e92dd800 	push	{fp, ip, lr, pc}
 c100aec:	e24cb004 	sub	fp, ip, #4
	lcd_puts( 16, LCD_HEIGHT - 35, BLACK, ("Introduzca una matricula valida por favor."));
 c100af0:	e3a00010 	mov	r0, #16
 c100af4:	e3a010cd 	mov	r1, #205	; 0xcd
 c100af8:	e3a0200f 	mov	r2, #15
 c100afc:	e59f300c 	ldr	r3, [pc, #12]	; c100b10 <plotLicPlateEnc+0x2c>
 c100b00:	eb000b50 	bl	c103848 <lcd_puts>
}
 c100b04:	e24bd00c 	sub	sp, fp, #12
 c100b08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b0c:	e12fff1e 	bx	lr
 c100b10:	0c108cec 	.word	0x0c108cec

0c100b14 <plotSucScreen>:

void plotSucScreen(parking_t parking)
{
 c100b14:	e1a0c00d 	mov	ip, sp
 c100b18:	e92dd800 	push	{fp, ip, lr, pc}
 c100b1c:	e24cb004 	sub	fp, ip, #4
 c100b20:	e24dd010 	sub	sp, sp, #16
 c100b24:	e24b3018 	sub	r3, fp, #24
 c100b28:	e8830007 	stm	r3, {r0, r1, r2}
	lcd_clear();
 c100b2c:	eb00090d 	bl	c102f68 <lcd_clear>
	lcd_puts_x2( 32, LCD_HEIGHT /2-50, BLACK, ("Plaza i pagada") );
 c100b30:	e3a00020 	mov	r0, #32
 c100b34:	e3a01046 	mov	r1, #70	; 0x46
 c100b38:	e3a0200f 	mov	r2, #15
 c100b3c:	e59f30a0 	ldr	r3, [pc, #160]	; c100be4 <plotSucScreen+0xd0>
 c100b40:	eb000cf6 	bl	c103f20 <lcd_puts_x2>
	lcd_putint_x2( 80, LCD_HEIGHT /2-50, BLACK, parking.id );
 c100b44:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c100b48:	e3a00050 	mov	r0, #80	; 0x50
 c100b4c:	e3a01046 	mov	r1, #70	; 0x46
 c100b50:	e3a0200f 	mov	r2, #15
 c100b54:	eb000d0e 	bl	c103f94 <lcd_putint_x2>
	lcd_puts( 32, LCD_HEIGHT /2 -12, BLACK, ("    Fin: "));
 c100b58:	e3a00020 	mov	r0, #32
 c100b5c:	e3a0106c 	mov	r1, #108	; 0x6c
 c100b60:	e3a0200f 	mov	r2, #15
 c100b64:	e59f307c 	ldr	r3, [pc, #124]	; c100be8 <plotSucScreen+0xd4>
 c100b68:	eb000b36 	bl	c103848 <lcd_puts>
	lcd_puts( 104, LCD_HEIGHT /2 -12, BLACK, rtc_stringDate(parking.deadline));
 c100b6c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100b70:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100b74:	e1a02802 	lsl	r2, r2, #16
 c100b78:	e1823003 	orr	r3, r2, r3
 c100b7c:	e3a02000 	mov	r2, #0
 c100b80:	e1a02003 	mov	r2, r3
 c100b84:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100b88:	e55b1010 	ldrb	r1, [fp, #-16]
 c100b8c:	e1a01801 	lsl	r1, r1, #16
 c100b90:	e1811003 	orr	r1, r1, r3
 c100b94:	e3a03000 	mov	r3, #0
 c100b98:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 c100b9c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 c100ba0:	e1813003 	orr	r3, r1, r3
 c100ba4:	e1a00002 	mov	r0, r2
 c100ba8:	e1a01003 	mov	r1, r3
 c100bac:	eb0010fa 	bl	c104f9c <rtc_stringDate>
 c100bb0:	e1a03000 	mov	r3, r0
 c100bb4:	e3a00068 	mov	r0, #104	; 0x68
 c100bb8:	e3a0106c 	mov	r1, #108	; 0x6c
 c100bbc:	e3a0200f 	mov	r2, #15
 c100bc0:	eb000b20 	bl	c103848 <lcd_puts>
	lcd_puts( 32, LCD_HEIGHT /2 + 50, BLACK, ("    Que tenga un gran dia "));
 c100bc4:	e3a00020 	mov	r0, #32
 c100bc8:	e3a010aa 	mov	r1, #170	; 0xaa
 c100bcc:	e3a0200f 	mov	r2, #15
 c100bd0:	e59f3014 	ldr	r3, [pc, #20]	; c100bec <plotSucScreen+0xd8>
 c100bd4:	eb000b1b 	bl	c103848 <lcd_puts>
}
 c100bd8:	e24bd00c 	sub	sp, fp, #12
 c100bdc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100be0:	e12fff1e 	bx	lr
 c100be4:	0c108d18 	.word	0x0c108d18
 c100be8:	0c108d28 	.word	0x0c108d28
 c100bec:	0c108d34 	.word	0x0c108d34

0c100bf0 <plotSelecFailure>:

void plotSelecFailure(parking_t parking)
{
 c100bf0:	e1a0c00d 	mov	ip, sp
 c100bf4:	e92dd800 	push	{fp, ip, lr, pc}
 c100bf8:	e24cb004 	sub	fp, ip, #4
 c100bfc:	e24dd010 	sub	sp, sp, #16
 c100c00:	e24b3018 	sub	r3, fp, #24
 c100c04:	e8830007 	stm	r3, {r0, r1, r2}
	lcd_clear();
 c100c08:	eb0008d6 	bl	c102f68 <lcd_clear>
	lcd_puts_x2( 32, LCD_HEIGHT /2-50, BLACK, ("Plaza i ocupada") );
 c100c0c:	e3a00020 	mov	r0, #32
 c100c10:	e3a01046 	mov	r1, #70	; 0x46
 c100c14:	e3a0200f 	mov	r2, #15
 c100c18:	e59f308c 	ldr	r3, [pc, #140]	; c100cac <plotSelecFailure+0xbc>
 c100c1c:	eb000cbf 	bl	c103f20 <lcd_puts_x2>
	lcd_putint_x2( 80, LCD_HEIGHT /2-50, BLACK, parking.id );
 c100c20:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c100c24:	e3a00050 	mov	r0, #80	; 0x50
 c100c28:	e3a01046 	mov	r1, #70	; 0x46
 c100c2c:	e3a0200f 	mov	r2, #15
 c100c30:	eb000cd7 	bl	c103f94 <lcd_putint_x2>
	lcd_puts( 32, LCD_HEIGHT /2 + 38, BLACK, ("    Fin: "));
 c100c34:	e3a00020 	mov	r0, #32
 c100c38:	e3a0109e 	mov	r1, #158	; 0x9e
 c100c3c:	e3a0200f 	mov	r2, #15
 c100c40:	e59f3068 	ldr	r3, [pc, #104]	; c100cb0 <plotSelecFailure+0xc0>
 c100c44:	eb000aff 	bl	c103848 <lcd_puts>
	lcd_puts( 104, LCD_HEIGHT /2 + 38, BLACK, rtc_stringDate(parking.deadline));
 c100c48:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100c4c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100c50:	e1a02802 	lsl	r2, r2, #16
 c100c54:	e1823003 	orr	r3, r2, r3
 c100c58:	e3a02000 	mov	r2, #0
 c100c5c:	e1a02003 	mov	r2, r3
 c100c60:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c100c64:	e55b1010 	ldrb	r1, [fp, #-16]
 c100c68:	e1a01801 	lsl	r1, r1, #16
 c100c6c:	e1811003 	orr	r1, r1, r3
 c100c70:	e3a03000 	mov	r3, #0
 c100c74:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 c100c78:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 c100c7c:	e1813003 	orr	r3, r1, r3
 c100c80:	e1a00002 	mov	r0, r2
 c100c84:	e1a01003 	mov	r1, r3
 c100c88:	eb0010c3 	bl	c104f9c <rtc_stringDate>
 c100c8c:	e1a03000 	mov	r3, r0
 c100c90:	e3a00068 	mov	r0, #104	; 0x68
 c100c94:	e3a0109e 	mov	r1, #158	; 0x9e
 c100c98:	e3a0200f 	mov	r2, #15
 c100c9c:	eb000ae9 	bl	c103848 <lcd_puts>
}
 c100ca0:	e24bd00c 	sub	sp, fp, #12
 c100ca4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ca8:	e12fff1e 	bx	lr
 c100cac:	0c108d50 	.word	0x0c108d50
 c100cb0:	0c108d28 	.word	0x0c108d28

0c100cb4 <plotPayExcessFailure>:

void plotPayExcessFailure()
{
 c100cb4:	e1a0c00d 	mov	ip, sp
 c100cb8:	e92dd800 	push	{fp, ip, lr, pc}
 c100cbc:	e24cb004 	sub	fp, ip, #4
	lcd_clear();
 c100cc0:	eb0008a8 	bl	c102f68 <lcd_clear>
	lcd_puts_x2(16, (LCD_HEIGHT/2)-30, BLACK, "Saldo max superado");
 c100cc4:	e3a00010 	mov	r0, #16
 c100cc8:	e3a0105a 	mov	r1, #90	; 0x5a
 c100ccc:	e3a0200f 	mov	r2, #15
 c100cd0:	e59f3020 	ldr	r3, [pc, #32]	; c100cf8 <plotPayExcessFailure+0x44>
 c100cd4:	eb000c91 	bl	c103f20 <lcd_puts_x2>
	lcd_puts(40, (LCD_HEIGHT/2), BLACK, "el maximo saldo es 2,40 euros");
 c100cd8:	e3a00028 	mov	r0, #40	; 0x28
 c100cdc:	e3a01078 	mov	r1, #120	; 0x78
 c100ce0:	e3a0200f 	mov	r2, #15
 c100ce4:	e59f3010 	ldr	r3, [pc, #16]	; c100cfc <plotPayExcessFailure+0x48>
 c100ce8:	eb000ad6 	bl	c103848 <lcd_puts>
}
 c100cec:	e24bd00c 	sub	sp, fp, #12
 c100cf0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100cf4:	e12fff1e 	bx	lr
 c100cf8:	0c108d60 	.word	0x0c108d60
 c100cfc:	0c108d74 	.word	0x0c108d74

0c100d00 <plotPayInsufFailure>:

void plotPayInsufFailure()
{
 c100d00:	e1a0c00d 	mov	ip, sp
 c100d04:	e92dd800 	push	{fp, ip, lr, pc}
 c100d08:	e24cb004 	sub	fp, ip, #4
	lcd_clear();
 c100d0c:	eb000895 	bl	c102f68 <lcd_clear>
	lcd_puts_x2(16, (LCD_HEIGHT/2)-30, BLACK, "Saldo insuficiente");
 c100d10:	e3a00010 	mov	r0, #16
 c100d14:	e3a0105a 	mov	r1, #90	; 0x5a
 c100d18:	e3a0200f 	mov	r2, #15
 c100d1c:	e59f3020 	ldr	r3, [pc, #32]	; c100d44 <plotPayInsufFailure+0x44>
 c100d20:	eb000c7e 	bl	c103f20 <lcd_puts_x2>
	lcd_puts(40, (LCD_HEIGHT/2), BLACK, "el saldo minimo es 0,20 euros");
 c100d24:	e3a00028 	mov	r0, #40	; 0x28
 c100d28:	e3a01078 	mov	r1, #120	; 0x78
 c100d2c:	e3a0200f 	mov	r2, #15
 c100d30:	e59f3010 	ldr	r3, [pc, #16]	; c100d48 <plotPayInsufFailure+0x48>
 c100d34:	eb000ac3 	bl	c103848 <lcd_puts>
}
 c100d38:	e24bd00c 	sub	sp, fp, #12
 c100d3c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d40:	e12fff1e 	bx	lr
 c100d44:	0c108d94 	.word	0x0c108d94
 c100d48:	0c108da8 	.word	0x0c108da8

0c100d4c <main>:

/*******************************************************************/

void main( void )

{
 c100d4c:	e1a0c00d 	mov	ip, sp
 c100d50:	e92dd800 	push	{fp, ip, lr, pc}
 c100d54:	e24cb004 	sub	fp, ip, #4
    
    sys_init();      
 c100d58:	eb00121c 	bl	c1055d0 <sys_init>
    leds_init();
 c100d5c:	eb000dd5 	bl	c1044b8 <leds_init>
    segs_init();
 c100d60:	eb0011cc 	bl	c105498 <segs_init>
    uart0_init();
 c100d64:	eb001a00 	bl	c10756c <uart0_init>
    rtc_init();
 c100d68:	eb000e3f 	bl	c10466c <rtc_init>
    timers_init();
 c100d6c:	eb00156f 	bl	c106330 <timers_init>
    keypad_init();
 c100d70:	eb0005ec 	bl	c102528 <keypad_init>
    lcd_init();
 c100d74:	eb0007f2 	bl	c102d44 <lcd_init>
    ts_init();
 c100d78:	eb001807 	bl	c106d9c <ts_init>

    lcd_on();
 c100d7c:	eb000851 	bl	c102ec8 <lcd_on>
    ts_on();
 c100d80:	eb001817 	bl	c106de4 <ts_on>

    setup();
 c100d84:	eb000430 	bl	c101e4c <setup>

    scheduler_init();                       /* Inicializa el kernel */
 c100d88:	ebfffcfa 	bl	c100178 <scheduler_init>

    create_task( tsScanTask,          5 );    /* Crea las tareas de la aplicacion... */
 c100d8c:	e59f0058 	ldr	r0, [pc, #88]	; c100dec <main+0xa0>
 c100d90:	e3a01005 	mov	r1, #5
 c100d94:	ebfffcbe 	bl	c100094 <create_task>
    create_task( kpScanTask,   5 );    /* ... el kernel asigna la prioridad segun orden de creacion */
 c100d98:	e59f0050 	ldr	r0, [pc, #80]	; c100df0 <main+0xa4>
 c100d9c:	e3a01005 	mov	r1, #5
 c100da0:	ebfffcbb 	bl	c100094 <create_task>
    create_task( mainTask,           10 );    /* ... las tareas mas frecuentes tienen mayor prioridad (criterio Rate-Monotonic-Scheduling) */
 c100da4:	e59f0048 	ldr	r0, [pc, #72]	; c100df4 <main+0xa8>
 c100da8:	e3a0100a 	mov	r1, #10
 c100dac:	ebfffcb8 	bl	c100094 <create_task>
    create_task( coinsMoverTask,     10 );
 c100db0:	e59f0040 	ldr	r0, [pc, #64]	; c100df8 <main+0xac>
 c100db4:	e3a0100a 	mov	r1, #10
 c100db8:	ebfffcb5 	bl	c100094 <create_task>
    create_task( clockTask,          10 );
 c100dbc:	e59f0038 	ldr	r0, [pc, #56]	; c100dfc <main+0xb0>
 c100dc0:	e3a0100a 	mov	r1, #10
 c100dc4:	ebfffcb2 	bl	c100094 <create_task>
    create_task( ticketPrinterTask,  10 );
 c100dc8:	e59f0030 	ldr	r0, [pc, #48]	; c100e00 <main+0xb4>
 c100dcc:	e3a0100a 	mov	r1, #10
 c100dd0:	ebfffcaf 	bl	c100094 <create_task>

    timer0_open_tick( scheduler, TICKS_PER_SEC );  /* Instala scheduler como RTI del timer0  */
 c100dd4:	e59f0028 	ldr	r0, [pc, #40]	; c100e04 <main+0xb8>
 c100dd8:	e3a01064 	mov	r1, #100	; 0x64
 c100ddc:	eb0016f0 	bl	c1069a4 <timer0_open_tick>

    while( 1 )
    {
        sleep();                /* Entra en estado IDLE, sale por interrupcion */
 c100de0:	eb0014be 	bl	c1060e0 <sleep>
        dispacher();            /* Las tareas preparadas se ejecutan en esta hebra (background) en orden de prioridad */
 c100de4:	ebfffd40 	bl	c1002ec <dispacher>
    }
 c100de8:	eafffffc 	b	c100de0 <main+0x94>
 c100dec:	0c101840 	.word	0x0c101840
 c100df0:	0c10192c 	.word	0x0c10192c
 c100df4:	0c100e08 	.word	0x0c100e08
 c100df8:	0c101af0 	.word	0x0c101af0
 c100dfc:	0c101824 	.word	0x0c101824
 c100e00:	0c101798 	.word	0x0c101798
 c100e04:	0c1001c0 	.word	0x0c1001c0

0c100e08 <mainTask>:

/* 
** Tarea principal, se activa cada 100 ms muestreando los mensajes enviados de otras tareas y actuando en consecuencia  
*/
void mainTask( void )  
{
 c100e08:	e1a0c00d 	mov	ip, sp
 c100e0c:	e92dd800 	push	{fp, ip, lr, pc}
 c100e10:	e24cb004 	sub	fp, ip, #4
 c100e14:	e24dd008 	sub	sp, sp, #8
    static uint16 ticks;
    static uint8 placeSelected;
    static rtc_time_t og_deadline;


    if( init )
 c100e18:	e59f394c 	ldr	r3, [pc, #2380]	; c10176c <mainTask+0x964>
 c100e1c:	e5d33000 	ldrb	r3, [r3]
 c100e20:	e3530000 	cmp	r3, #0
 c100e24:	0a000034 	beq	c100efc <mainTask+0xf4>
    {
        init   = FALSE;
 c100e28:	e59f393c 	ldr	r3, [pc, #2364]	; c10176c <mainTask+0x964>
 c100e2c:	e3a02000 	mov	r2, #0
 c100e30:	e5c32000 	strb	r2, [r3]
        plotWelcomeScreen();
 c100e34:	ebfffd65 	bl	c1003d0 <plotWelcomeScreen>
        credit = 0;
 c100e38:	e59f3930 	ldr	r3, [pc, #2352]	; c101770 <mainTask+0x968>
 c100e3c:	e3a02000 	mov	r2, #0
 c100e40:	e1c320b0 	strh	r2, [r3]
        int i;
        for(i = 0; i < MAXPLACES; i++)
 c100e44:	e3a03000 	mov	r3, #0
 c100e48:	e50b3010 	str	r3, [fp, #-16]
 c100e4c:	ea000023 	b	c100ee0 <mainTask+0xd8>
        {
        	parking[i].id = i+1;
 c100e50:	e51b3010 	ldr	r3, [fp, #-16]
 c100e54:	e20330ff 	and	r3, r3, #255	; 0xff
 c100e58:	e2833001 	add	r3, r3, #1
 c100e5c:	e20310ff 	and	r1, r3, #255	; 0xff
 c100e60:	e59f090c 	ldr	r0, [pc, #2316]	; c101774 <mainTask+0x96c>
 c100e64:	e51b2010 	ldr	r2, [fp, #-16]
 c100e68:	e1a03002 	mov	r3, r2
 c100e6c:	e1a03083 	lsl	r3, r3, #1
 c100e70:	e0833002 	add	r3, r3, r2
 c100e74:	e1a03103 	lsl	r3, r3, #2
 c100e78:	e0803003 	add	r3, r0, r3
 c100e7c:	e1a02001 	mov	r2, r1
 c100e80:	e5c32000 	strb	r2, [r3]
        	parking[i].free = TRUE;
 c100e84:	e59f18e8 	ldr	r1, [pc, #2280]	; c101774 <mainTask+0x96c>
 c100e88:	e51b2010 	ldr	r2, [fp, #-16]
 c100e8c:	e1a03002 	mov	r3, r2
 c100e90:	e1a03083 	lsl	r3, r3, #1
 c100e94:	e0833002 	add	r3, r3, r2
 c100e98:	e1a03103 	lsl	r3, r3, #2
 c100e9c:	e0813003 	add	r3, r1, r3
 c100ea0:	e3a02001 	mov	r2, #1
 c100ea4:	e5c32001 	strb	r2, [r3, #1]
        	parking[i].licPlate = 0;
 c100ea8:	e59f08c4 	ldr	r0, [pc, #2244]	; c101774 <mainTask+0x96c>
 c100eac:	e51b2010 	ldr	r2, [fp, #-16]
 c100eb0:	e3a01008 	mov	r1, #8
 c100eb4:	e1a03002 	mov	r3, r2
 c100eb8:	e1a03083 	lsl	r3, r3, #1
 c100ebc:	e0833002 	add	r3, r3, r2
 c100ec0:	e1a03103 	lsl	r3, r3, #2
 c100ec4:	e0803003 	add	r3, r0, r3
 c100ec8:	e0833001 	add	r3, r3, r1
 c100ecc:	e3a02000 	mov	r2, #0
 c100ed0:	e1c320b2 	strh	r2, [r3, #2]
    {
        init   = FALSE;
        plotWelcomeScreen();
        credit = 0;
        int i;
        for(i = 0; i < MAXPLACES; i++)
 c100ed4:	e51b3010 	ldr	r3, [fp, #-16]
 c100ed8:	e2833001 	add	r3, r3, #1
 c100edc:	e50b3010 	str	r3, [fp, #-16]
 c100ee0:	e51b3010 	ldr	r3, [fp, #-16]
 c100ee4:	e3530007 	cmp	r3, #7
 c100ee8:	daffffd8 	ble	c100e50 <mainTask+0x48>
        {
        	parking[i].id = i+1;
        	parking[i].free = TRUE;
        	parking[i].licPlate = 0;
        }
        state = waiting;
 c100eec:	e59f3884 	ldr	r3, [pc, #2180]	; c101778 <mainTask+0x970>
 c100ef0:	e3a02000 	mov	r2, #0
 c100ef4:	e5c32000 	strb	r2, [r3]
 c100ef8:	ea000218 	b	c101760 <mainTask+0x958>
    }
    else switch( state )
 c100efc:	e59f3874 	ldr	r3, [pc, #2164]	; c101778 <mainTask+0x970>
 c100f00:	e5d33000 	ldrb	r3, [r3]
 c100f04:	e3530005 	cmp	r3, #5
 c100f08:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100f0c:	ea000213 	b	c101760 <mainTask+0x958>
 c100f10:	0c100f28 	.word	0x0c100f28
 c100f14:	0c100fa0 	.word	0x0c100fa0
 c100f18:	0c101688 	.word	0x0c101688
 c100f1c:	0c101174 	.word	0x0c101174
 c100f20:	0c1013a0 	.word	0x0c1013a0
 c100f24:	0c1015dc 	.word	0x0c1015dc
    {
        case waiting:                        /* Estado en donde rechaza monedas y espera la pulsacion de la pantalla */
            if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
 c100f28:	e59f384c 	ldr	r3, [pc, #2124]	; c10177c <mainTask+0x974>
 c100f2c:	e5d33000 	ldrb	r3, [r3]
 c100f30:	e3530000 	cmp	r3, #0
 c100f34:	0a00000b 	beq	c100f68 <mainTask+0x160>
            {
                tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
 c100f38:	e59f383c 	ldr	r3, [pc, #2108]	; c10177c <mainTask+0x974>
 c100f3c:	e3a02000 	mov	r2, #0
 c100f40:	e5c32000 	strb	r2, [r3]
                lcd_clear();                               /* Borra pantalla */
 c100f44:	eb000807 	bl	c102f68 <lcd_clear>
                plotSelectionScreen(parking);
 c100f48:	e59f0824 	ldr	r0, [pc, #2084]	; c101774 <mainTask+0x96c>
 c100f4c:	ebfffd6d 	bl	c100508 <plotSelectionScreen>
                state = selection;                  /* Salta al estado selection ... */
 c100f50:	e59f3820 	ldr	r3, [pc, #2080]	; c101778 <mainTask+0x970>
 c100f54:	e3a02001 	mov	r2, #1
 c100f58:	e5c32000 	strb	r2, [r3]
                ticks = 1000;                               /* ... en el que debera permanecer un maximo de 500 ticks sin no hay actividad */
 c100f5c:	e59f381c 	ldr	r3, [pc, #2076]	; c101780 <mainTask+0x978>
 c100f60:	e3a02ffa 	mov	r2, #1000	; 0x3e8
 c100f64:	e1c320b0 	strh	r2, [r3]
            }    
            if( kpPressedMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
 c100f68:	e59f3814 	ldr	r3, [pc, #2068]	; c101784 <mainTask+0x97c>
 c100f6c:	e5d33000 	ldrb	r3, [r3]
 c100f70:	e3530000 	cmp	r3, #0
 c100f74:	0a0001ee 	beq	c101734 <mainTask+0x92c>
            {
                kpPressedMsg.flag = FALSE;              /* Marca el mensaje como leido */
 c100f78:	e59f3804 	ldr	r3, [pc, #2052]	; c101784 <mainTask+0x97c>
 c100f7c:	e3a02000 	mov	r2, #0
 c100f80:	e5c32000 	strb	r2, [r3]
                coinsMoverMsg.accept = FALSE;              /* Envia un mensaje para que la moneda se devuelva */
 c100f84:	e59f37fc 	ldr	r3, [pc, #2044]	; c101788 <mainTask+0x980>
 c100f88:	e3a02000 	mov	r2, #0
 c100f8c:	e5c32001 	strb	r2, [r3, #1]
                coinsMoverMsg.flag   = TRUE;
 c100f90:	e59f37f0 	ldr	r3, [pc, #2032]	; c101788 <mainTask+0x980>
 c100f94:	e3a02001 	mov	r2, #1
 c100f98:	e5c32000 	strb	r2, [r3]
            }    
            break;
 c100f9c:	ea0001ef 	b	c101760 <mainTask+0x958>
        case selection:
        	if( !(--ticks) )                           /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo maximo */
 c100fa0:	e59f37d8 	ldr	r3, [pc, #2008]	; c101780 <mainTask+0x978>
 c100fa4:	e1d330b0 	ldrh	r3, [r3]
 c100fa8:	e2433001 	sub	r3, r3, #1
 c100fac:	e1a03803 	lsl	r3, r3, #16
 c100fb0:	e1a02823 	lsr	r2, r3, #16
 c100fb4:	e59f37c4 	ldr	r3, [pc, #1988]	; c101780 <mainTask+0x978>
 c100fb8:	e1c320b0 	strh	r2, [r3]
 c100fbc:	e59f37bc 	ldr	r3, [pc, #1980]	; c101780 <mainTask+0x978>
 c100fc0:	e1d330b0 	ldrh	r3, [r3]
 c100fc4:	e3530000 	cmp	r3, #0
 c100fc8:	1a000003 	bne	c100fdc <mainTask+0x1d4>
			{
				plotWelcomeScreen();                       /* Visualiza pantalla inicial */
 c100fcc:	ebfffcff 	bl	c1003d0 <plotWelcomeScreen>
				state = waiting;                      /* Salta al estado demo_waiting */
 c100fd0:	e59f37a0 	ldr	r3, [pc, #1952]	; c101778 <mainTask+0x970>
 c100fd4:	e3a02000 	mov	r2, #0
 c100fd8:	e5c32000 	strb	r2, [r3]
			}
        	if( kpPressedMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
 c100fdc:	e59f37a0 	ldr	r3, [pc, #1952]	; c101784 <mainTask+0x97c>
 c100fe0:	e5d33000 	ldrb	r3, [r3]
 c100fe4:	e3530000 	cmp	r3, #0
 c100fe8:	0a000008 	beq	c101010 <mainTask+0x208>
			{
				kpPressedMsg.flag = FALSE;              /* Marca el mensaje como leido */
 c100fec:	e59f3790 	ldr	r3, [pc, #1936]	; c101784 <mainTask+0x97c>
 c100ff0:	e3a02000 	mov	r2, #0
 c100ff4:	e5c32000 	strb	r2, [r3]
				coinsMoverMsg.accept = FALSE;              /* Envia un mensaje para que la moneda se devuelva */
 c100ff8:	e59f3788 	ldr	r3, [pc, #1928]	; c101788 <mainTask+0x980>
 c100ffc:	e3a02000 	mov	r2, #0
 c101000:	e5c32001 	strb	r2, [r3, #1]
				coinsMoverMsg.flag   = TRUE;
 c101004:	e59f377c 	ldr	r3, [pc, #1916]	; c101788 <mainTask+0x980>
 c101008:	e3a02001 	mov	r2, #1
 c10100c:	e5c32000 	strb	r2, [r3]
			}
        	if( tsPressedMsg.flag )
 c101010:	e59f3764 	ldr	r3, [pc, #1892]	; c10177c <mainTask+0x974>
 c101014:	e5d33000 	ldrb	r3, [r3]
 c101018:	e3530000 	cmp	r3, #0
 c10101c:	0a0001c6 	beq	c10173c <mainTask+0x934>
        	{
        		tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
 c101020:	e59f3754 	ldr	r3, [pc, #1876]	; c10177c <mainTask+0x974>
 c101024:	e3a02000 	mov	r2, #0
 c101028:	e5c32000 	strb	r2, [r3]
				if(parking[(placeSelected = selectorTask())].free) //si se selecciona una plaza disponible vamos al pago
 c10102c:	eb0002fb 	bl	c101c20 <selectorTask>
 c101030:	e1a03000 	mov	r3, r0
 c101034:	e20320ff 	and	r2, r3, #255	; 0xff
 c101038:	e59f374c 	ldr	r3, [pc, #1868]	; c10178c <mainTask+0x984>
 c10103c:	e5c32000 	strb	r2, [r3]
 c101040:	e59f3744 	ldr	r3, [pc, #1860]	; c10178c <mainTask+0x984>
 c101044:	e5d33000 	ldrb	r3, [r3]
 c101048:	e1a02003 	mov	r2, r3
 c10104c:	e59f1720 	ldr	r1, [pc, #1824]	; c101774 <mainTask+0x96c>
 c101050:	e1a03002 	mov	r3, r2
 c101054:	e1a03083 	lsl	r3, r3, #1
 c101058:	e0833002 	add	r3, r3, r2
 c10105c:	e1a03103 	lsl	r3, r3, #2
 c101060:	e0813003 	add	r3, r1, r3
 c101064:	e5d33001 	ldrb	r3, [r3, #1]
 c101068:	e3530000 	cmp	r3, #0
 c10106c:	0a000028 	beq	c101114 <mainTask+0x30c>
				{
					rtc_gettime(&og_deadline);
 c101070:	e59f0718 	ldr	r0, [pc, #1816]	; c101790 <mainTask+0x988>
 c101074:	eb000e68 	bl	c104a1c <rtc_gettime>
					parking[placeSelected].deadline = og_deadline;	//establecer la fecha inicial de la plaza
 c101078:	e59f370c 	ldr	r3, [pc, #1804]	; c10178c <mainTask+0x984>
 c10107c:	e5d33000 	ldrb	r3, [r3]
 c101080:	e1a02003 	mov	r2, r3
 c101084:	e59f16e8 	ldr	r1, [pc, #1768]	; c101774 <mainTask+0x96c>
 c101088:	e1a03002 	mov	r3, r2
 c10108c:	e1a03083 	lsl	r3, r3, #1
 c101090:	e0833002 	add	r3, r3, r2
 c101094:	e1a03103 	lsl	r3, r3, #2
 c101098:	e0812003 	add	r2, r1, r3
 c10109c:	e59f36ec 	ldr	r3, [pc, #1772]	; c101790 <mainTask+0x988>
 c1010a0:	e2821002 	add	r1, r2, #2
 c1010a4:	e1a02003 	mov	r2, r3
 c1010a8:	e3a03007 	mov	r3, #7
 c1010ac:	e1a00001 	mov	r0, r1
 c1010b0:	e1a01002 	mov	r1, r2
 c1010b4:	e1a02003 	mov	r2, r3
 c1010b8:	eb001e28 	bl	c108960 <memcpy>
					plotPaymentScreen(parking[placeSelected],credit);
 c1010bc:	e59f36c8 	ldr	r3, [pc, #1736]	; c10178c <mainTask+0x984>
 c1010c0:	e5d33000 	ldrb	r3, [r3]
 c1010c4:	e1a02003 	mov	r2, r3
 c1010c8:	e59f36a0 	ldr	r3, [pc, #1696]	; c101770 <mainTask+0x968>
 c1010cc:	e1d330b0 	ldrh	r3, [r3]
 c1010d0:	e203c0ff 	and	ip, r3, #255	; 0xff
 c1010d4:	e59f1698 	ldr	r1, [pc, #1688]	; c101774 <mainTask+0x96c>
 c1010d8:	e1a03002 	mov	r3, r2
 c1010dc:	e1a03083 	lsl	r3, r3, #1
 c1010e0:	e0833002 	add	r3, r3, r2
 c1010e4:	e1a03103 	lsl	r3, r3, #2
 c1010e8:	e0813003 	add	r3, r1, r3
 c1010ec:	e8930007 	ldm	r3, {r0, r1, r2}
 c1010f0:	e1a0300c 	mov	r3, ip
 c1010f4:	ebfffda2 	bl	c100784 <plotPaymentScreen>
					state = payment;
 c1010f8:	e59f3678 	ldr	r3, [pc, #1656]	; c101778 <mainTask+0x970>
 c1010fc:	e3a02003 	mov	r2, #3
 c101100:	e5c32000 	strb	r2, [r3]
					ticks = 500;
 c101104:	e59f3674 	ldr	r3, [pc, #1652]	; c101780 <mainTask+0x978>
 c101108:	e3a02f7d 	mov	r2, #500	; 0x1f4
 c10110c:	e1c320b0 	strh	r2, [r3]
					state = error;
				} else {
					plotSelEnc();
				}
        	}
        	break;
 c101110:	ea000192 	b	c101760 <mainTask+0x958>
					parking[placeSelected].deadline = og_deadline;	//establecer la fecha inicial de la plaza
					plotPaymentScreen(parking[placeSelected],credit);
					state = payment;
					ticks = 500;

				} else if(placeSelected != 10){ // si no vamos a la pantalla de error
 c101114:	e59f3670 	ldr	r3, [pc, #1648]	; c10178c <mainTask+0x984>
 c101118:	e5d33000 	ldrb	r3, [r3]
 c10111c:	e353000a 	cmp	r3, #10
 c101120:	0a000011 	beq	c10116c <mainTask+0x364>

					ticks = 300;
 c101124:	e59f3654 	ldr	r3, [pc, #1620]	; c101780 <mainTask+0x978>
 c101128:	e3a02f4b 	mov	r2, #300	; 0x12c
 c10112c:	e1c320b0 	strh	r2, [r3]
					plotSelecFailure(parking[placeSelected]);
 c101130:	e59f3654 	ldr	r3, [pc, #1620]	; c10178c <mainTask+0x984>
 c101134:	e5d33000 	ldrb	r3, [r3]
 c101138:	e1a02003 	mov	r2, r3
 c10113c:	e59f1630 	ldr	r1, [pc, #1584]	; c101774 <mainTask+0x96c>
 c101140:	e1a03002 	mov	r3, r2
 c101144:	e1a03083 	lsl	r3, r3, #1
 c101148:	e0833002 	add	r3, r3, r2
 c10114c:	e1a03103 	lsl	r3, r3, #2
 c101150:	e0813003 	add	r3, r1, r3
 c101154:	e8930007 	ldm	r3, {r0, r1, r2}
 c101158:	ebfffea4 	bl	c100bf0 <plotSelecFailure>
					state = error;
 c10115c:	e59f3614 	ldr	r3, [pc, #1556]	; c101778 <mainTask+0x970>
 c101160:	e3a02002 	mov	r2, #2
 c101164:	e5c32000 	strb	r2, [r3]
				} else {
					plotSelEnc();
				}
        	}
        	break;
 c101168:	ea00017c 	b	c101760 <mainTask+0x958>

					ticks = 300;
					plotSelecFailure(parking[placeSelected]);
					state = error;
				} else {
					plotSelEnc();
 c10116c:	ebfffd78 	bl	c100754 <plotSelEnc>
				}
        	}
        	break;
 c101170:	ea00017a 	b	c101760 <mainTask+0x958>
        case payment:
        	if( !(--ticks) )                           /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo maximo */
 c101174:	e59f3604 	ldr	r3, [pc, #1540]	; c101780 <mainTask+0x978>
 c101178:	e1d330b0 	ldrh	r3, [r3]
 c10117c:	e2433001 	sub	r3, r3, #1
 c101180:	e1a03803 	lsl	r3, r3, #16
 c101184:	e1a02823 	lsr	r2, r3, #16
 c101188:	e59f35f0 	ldr	r3, [pc, #1520]	; c101780 <mainTask+0x978>
 c10118c:	e1c320b0 	strh	r2, [r3]
 c101190:	e59f35e8 	ldr	r3, [pc, #1512]	; c101780 <mainTask+0x978>
 c101194:	e1d330b0 	ldrh	r3, [r3]
 c101198:	e3530000 	cmp	r3, #0
 c10119c:	1a000003 	bne	c1011b0 <mainTask+0x3a8>
			{
				plotWelcomeScreen();                       /* Visualiza pantalla inicial */
 c1011a0:	ebfffc8a 	bl	c1003d0 <plotWelcomeScreen>
				state = waiting;                      /* Salta al estado demo_waiting */
 c1011a4:	e59f35cc 	ldr	r3, [pc, #1484]	; c101778 <mainTask+0x970>
 c1011a8:	e3a02000 	mov	r2, #0
 c1011ac:	e5c32000 	strb	r2, [r3]
			}
        	if( kpPressedMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
 c1011b0:	e59f35cc 	ldr	r3, [pc, #1484]	; c101784 <mainTask+0x97c>
 c1011b4:	e5d33000 	ldrb	r3, [r3]
 c1011b8:	e3530000 	cmp	r3, #0
 c1011bc:	0a000049 	beq	c1012e8 <mainTask+0x4e0>
			{
				kpPressedMsg.flag   = FALSE;           /* Marca el mensaje como leido */
 c1011c0:	e59f35bc 	ldr	r3, [pc, #1468]	; c101784 <mainTask+0x97c>
 c1011c4:	e3a02000 	mov	r2, #0
 c1011c8:	e5c32000 	strb	r2, [r3]
				credit += kpPressedMsg.cents;          /* Incrementa el saldo */
 c1011cc:	e59f35b0 	ldr	r3, [pc, #1456]	; c101784 <mainTask+0x97c>
 c1011d0:	e5d33002 	ldrb	r3, [r3, #2]
 c1011d4:	e1a02003 	mov	r2, r3
 c1011d8:	e59f3590 	ldr	r3, [pc, #1424]	; c101770 <mainTask+0x968>
 c1011dc:	e1d330b0 	ldrh	r3, [r3]
 c1011e0:	e0823003 	add	r3, r2, r3
 c1011e4:	e1a03803 	lsl	r3, r3, #16
 c1011e8:	e1a02823 	lsr	r2, r3, #16
 c1011ec:	e59f357c 	ldr	r3, [pc, #1404]	; c101770 <mainTask+0x968>
 c1011f0:	e1c320b0 	strh	r2, [r3]
				updateDeadline(credit,&parking[placeSelected].deadline); // Actualiza la fecha de salida.
 c1011f4:	e59f3574 	ldr	r3, [pc, #1396]	; c101770 <mainTask+0x968>
 c1011f8:	e1d330b0 	ldrh	r3, [r3]
 c1011fc:	e20310ff 	and	r1, r3, #255	; 0xff
 c101200:	e59f3584 	ldr	r3, [pc, #1412]	; c10178c <mainTask+0x984>
 c101204:	e5d33000 	ldrb	r3, [r3]
 c101208:	e1a02003 	mov	r2, r3
 c10120c:	e1a03002 	mov	r3, r2
 c101210:	e1a03083 	lsl	r3, r3, #1
 c101214:	e0833002 	add	r3, r3, r2
 c101218:	e1a03103 	lsl	r3, r3, #2
 c10121c:	e59f2550 	ldr	r2, [pc, #1360]	; c101774 <mainTask+0x96c>
 c101220:	e0833002 	add	r3, r3, r2
 c101224:	e2833002 	add	r3, r3, #2
 c101228:	e1a00001 	mov	r0, r1
 c10122c:	e1a01003 	mov	r1, r3
 c101230:	eb00034e 	bl	c101f70 <updateDeadline>
				plotPayCredit(credit);
 c101234:	e59f3534 	ldr	r3, [pc, #1332]	; c101770 <mainTask+0x968>
 c101238:	e1d330b0 	ldrh	r3, [r3]
 c10123c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101240:	e1a00003 	mov	r0, r3
 c101244:	ebfffdb2 	bl	c100914 <plotPayCredit>
				plotPayDeadline(parking[placeSelected].deadline);
 c101248:	e59f353c 	ldr	r3, [pc, #1340]	; c10178c <mainTask+0x984>
 c10124c:	e5d33000 	ldrb	r3, [r3]
 c101250:	e1a02003 	mov	r2, r3
 c101254:	e59f1518 	ldr	r1, [pc, #1304]	; c101774 <mainTask+0x96c>
 c101258:	e1a03002 	mov	r3, r2
 c10125c:	e1a03083 	lsl	r3, r3, #1
 c101260:	e0833002 	add	r3, r3, r2
 c101264:	e1a03103 	lsl	r3, r3, #2
 c101268:	e0813003 	add	r3, r1, r3
 c10126c:	e1d320b2 	ldrh	r2, [r3, #2]
 c101270:	e1d310b4 	ldrh	r1, [r3, #4]
 c101274:	e1a01801 	lsl	r1, r1, #16
 c101278:	e1811002 	orr	r1, r1, r2
 c10127c:	e3a02000 	mov	r2, #0
 c101280:	e1a02001 	mov	r2, r1
 c101284:	e1d310b6 	ldrh	r1, [r3, #6]
 c101288:	e5d33008 	ldrb	r3, [r3, #8]
 c10128c:	e1a03803 	lsl	r3, r3, #16
 c101290:	e1831001 	orr	r1, r3, r1
 c101294:	e3a03000 	mov	r3, #0
 c101298:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 c10129c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
 c1012a0:	e1813003 	orr	r3, r1, r3
 c1012a4:	e1a00002 	mov	r0, r2
 c1012a8:	e1a01003 	mov	r1, r3
 c1012ac:	ebfffdbb 	bl	c1009a0 <plotPayDeadline>
				ticks = 500;                              /* Restaura el tiempo maximo sin actividad que permanece en este estado */
 c1012b0:	e59f34c8 	ldr	r3, [pc, #1224]	; c101780 <mainTask+0x978>
 c1012b4:	e3a02f7d 	mov	r2, #500	; 0x1f4
 c1012b8:	e1c320b0 	strh	r2, [r3]
				if(credit > 240){
 c1012bc:	e59f34ac 	ldr	r3, [pc, #1196]	; c101770 <mainTask+0x968>
 c1012c0:	e1d330b0 	ldrh	r3, [r3]
 c1012c4:	e35300f0 	cmp	r3, #240	; 0xf0
 c1012c8:	9a000006 	bls	c1012e8 <mainTask+0x4e0>
					credit = 0;
 c1012cc:	e59f349c 	ldr	r3, [pc, #1180]	; c101770 <mainTask+0x968>
 c1012d0:	e3a02000 	mov	r2, #0
 c1012d4:	e1c320b0 	strh	r2, [r3]
					plotPayExcessFailure();
 c1012d8:	ebfffe75 	bl	c100cb4 <plotPayExcessFailure>
					state = error;
 c1012dc:	e59f3494 	ldr	r3, [pc, #1172]	; c101778 <mainTask+0x970>
 c1012e0:	e3a02002 	mov	r2, #2
 c1012e4:	e5c32000 	strb	r2, [r3]
				}
			}
        	if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
 c1012e8:	e59f348c 	ldr	r3, [pc, #1164]	; c10177c <mainTask+0x974>
 c1012ec:	e5d33000 	ldrb	r3, [r3]
 c1012f0:	e3530000 	cmp	r3, #0
 c1012f4:	0a000112 	beq	c101744 <mainTask+0x93c>
			{
				tsPressedMsg.flag = FALSE;                /* Marca el mensaje como leido */
 c1012f8:	e59f347c 	ldr	r3, [pc, #1148]	; c10177c <mainTask+0x974>
 c1012fc:	e3a02000 	mov	r2, #0
 c101300:	e5c32000 	strb	r2, [r3]
				coinsMoverMsg.accept = TRUE;              /* Envia un mensaje para que las monedas se acepten */
 c101304:	e59f347c 	ldr	r3, [pc, #1148]	; c101788 <mainTask+0x980>
 c101308:	e3a02001 	mov	r2, #1
 c10130c:	e5c32001 	strb	r2, [r3, #1]
				coinsMoverMsg.flag   = TRUE;
 c101310:	e59f3470 	ldr	r3, [pc, #1136]	; c101788 <mainTask+0x980>
 c101314:	e3a02001 	mov	r2, #1
 c101318:	e5c32000 	strb	r2, [r3]
				if(credit < 20){
 c10131c:	e59f344c 	ldr	r3, [pc, #1100]	; c101770 <mainTask+0x968>
 c101320:	e1d330b0 	ldrh	r3, [r3]
 c101324:	e3530013 	cmp	r3, #19
 c101328:	8a000007 	bhi	c10134c <mainTask+0x544>
					credit = 0;
 c10132c:	e59f343c 	ldr	r3, [pc, #1084]	; c101770 <mainTask+0x968>
 c101330:	e3a02000 	mov	r2, #0
 c101334:	e1c320b0 	strh	r2, [r3]
					plotPayInsufFailure();
 c101338:	ebfffe70 	bl	c100d00 <plotPayInsufFailure>
					state = error;
 c10133c:	e59f3434 	ldr	r3, [pc, #1076]	; c101778 <mainTask+0x970>
 c101340:	e3a02002 	mov	r2, #2
 c101344:	e5c32000 	strb	r2, [r3]
					plotLicPlateScreen(parking[placeSelected]);
					kpPressedMsg.licPlateInput = TRUE;
					credit = 0;
				}
			}
        	break;
 c101348:	ea000104 	b	c101760 <mainTask+0x958>
				if(credit < 20){
					credit = 0;
					plotPayInsufFailure();
					state = error;
				} else {
					state = licPlateInput;
 c10134c:	e59f3424 	ldr	r3, [pc, #1060]	; c101778 <mainTask+0x970>
 c101350:	e3a02004 	mov	r2, #4
 c101354:	e5c32000 	strb	r2, [r3]
					plotLicPlateScreen(parking[placeSelected]);
 c101358:	e59f342c 	ldr	r3, [pc, #1068]	; c10178c <mainTask+0x984>
 c10135c:	e5d33000 	ldrb	r3, [r3]
 c101360:	e1a02003 	mov	r2, r3
 c101364:	e59f1408 	ldr	r1, [pc, #1032]	; c101774 <mainTask+0x96c>
 c101368:	e1a03002 	mov	r3, r2
 c10136c:	e1a03083 	lsl	r3, r3, #1
 c101370:	e0833002 	add	r3, r3, r2
 c101374:	e1a03103 	lsl	r3, r3, #2
 c101378:	e0813003 	add	r3, r1, r3
 c10137c:	e8930007 	ldm	r3, {r0, r1, r2}
 c101380:	ebfffd9d 	bl	c1009fc <plotLicPlateScreen>
					kpPressedMsg.licPlateInput = TRUE;
 c101384:	e59f33f8 	ldr	r3, [pc, #1016]	; c101784 <mainTask+0x97c>
 c101388:	e3a02001 	mov	r2, #1
 c10138c:	e5c32001 	strb	r2, [r3, #1]
					credit = 0;
 c101390:	e59f33d8 	ldr	r3, [pc, #984]	; c101770 <mainTask+0x968>
 c101394:	e3a02000 	mov	r2, #0
 c101398:	e1c320b0 	strh	r2, [r3]
				}
			}
        	break;
 c10139c:	ea0000ef 	b	c101760 <mainTask+0x958>
        case licPlateInput:
			if( !(--ticks) )                           /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo maximo */
 c1013a0:	e59f33d8 	ldr	r3, [pc, #984]	; c101780 <mainTask+0x978>
 c1013a4:	e1d330b0 	ldrh	r3, [r3]
 c1013a8:	e2433001 	sub	r3, r3, #1
 c1013ac:	e1a03803 	lsl	r3, r3, #16
 c1013b0:	e1a02823 	lsr	r2, r3, #16
 c1013b4:	e59f33c4 	ldr	r3, [pc, #964]	; c101780 <mainTask+0x978>
 c1013b8:	e1c320b0 	strh	r2, [r3]
 c1013bc:	e59f33bc 	ldr	r3, [pc, #956]	; c101780 <mainTask+0x978>
 c1013c0:	e1d330b0 	ldrh	r3, [r3]
 c1013c4:	e3530000 	cmp	r3, #0
 c1013c8:	1a000006 	bne	c1013e8 <mainTask+0x5e0>
			{
				plotWelcomeScreen();                       /* Visualiza pantalla inicial */
 c1013cc:	ebfffbff 	bl	c1003d0 <plotWelcomeScreen>
				kpPressedMsg.licPlateInput = FALSE;			//limpio el flag del keypress porque voy a cambiar de estado.
 c1013d0:	e59f33ac 	ldr	r3, [pc, #940]	; c101784 <mainTask+0x97c>
 c1013d4:	e3a02000 	mov	r2, #0
 c1013d8:	e5c32001 	strb	r2, [r3, #1]
				state = waiting;                      /* Salta al estado demo_waiting */
 c1013dc:	e59f3394 	ldr	r3, [pc, #916]	; c101778 <mainTask+0x970>
 c1013e0:	e3a02000 	mov	r2, #0
 c1013e4:	e5c32000 	strb	r2, [r3]
			}
			if( kpPressedMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
 c1013e8:	e59f3394 	ldr	r3, [pc, #916]	; c101784 <mainTask+0x97c>
 c1013ec:	e5d33000 	ldrb	r3, [r3]
 c1013f0:	e3530000 	cmp	r3, #0
 c1013f4:	0a00002a 	beq	c1014a4 <mainTask+0x69c>
			{
				kpPressedMsg.flag = FALSE;             						 /* Marca el mensaje como leido */
 c1013f8:	e59f3384 	ldr	r3, [pc, #900]	; c101784 <mainTask+0x97c>
 c1013fc:	e3a02000 	mov	r2, #0
 c101400:	e5c32000 	strb	r2, [r3]
				kpPressedMsg.licPlateInput = TRUE;							//activa el modo matricula
 c101404:	e59f3378 	ldr	r3, [pc, #888]	; c101784 <mainTask+0x97c>
 c101408:	e3a02001 	mov	r2, #1
 c10140c:	e5c32001 	strb	r2, [r3, #1]
				if(getLicPlate(&parking[placeSelected].licPlate))
 c101410:	e59f3374 	ldr	r3, [pc, #884]	; c10178c <mainTask+0x984>
 c101414:	e5d33000 	ldrb	r3, [r3]
 c101418:	e1a02003 	mov	r2, r3
 c10141c:	e1a03002 	mov	r3, r2
 c101420:	e1a03083 	lsl	r3, r3, #1
 c101424:	e0833002 	add	r3, r3, r2
 c101428:	e1a03103 	lsl	r3, r3, #2
 c10142c:	e2832008 	add	r2, r3, #8
 c101430:	e59f333c 	ldr	r3, [pc, #828]	; c101774 <mainTask+0x96c>
 c101434:	e0823003 	add	r3, r2, r3
 c101438:	e2833002 	add	r3, r3, #2
 c10143c:	e1a00003 	mov	r0, r3
 c101440:	eb000343 	bl	c102154 <getLicPlate>
 c101444:	e1a03000 	mov	r3, r0
 c101448:	e3530000 	cmp	r3, #0
 c10144c:	0a000011 	beq	c101498 <mainTask+0x690>
				{
					plotLicPlateUpdate(parking[placeSelected].licPlate);
 c101450:	e59f3334 	ldr	r3, [pc, #820]	; c10178c <mainTask+0x984>
 c101454:	e5d33000 	ldrb	r3, [r3]
 c101458:	e1a02003 	mov	r2, r3
 c10145c:	e59f0310 	ldr	r0, [pc, #784]	; c101774 <mainTask+0x96c>
 c101460:	e3a01008 	mov	r1, #8
 c101464:	e1a03002 	mov	r3, r2
 c101468:	e1a03083 	lsl	r3, r3, #1
 c10146c:	e0833002 	add	r3, r3, r2
 c101470:	e1a03103 	lsl	r3, r3, #2
 c101474:	e0803003 	add	r3, r0, r3
 c101478:	e0833001 	add	r3, r3, r1
 c10147c:	e1d330b2 	ldrh	r3, [r3, #2]
 c101480:	e1a03803 	lsl	r3, r3, #16
 c101484:	e1a03823 	lsr	r3, r3, #16
 c101488:	e1a03803 	lsl	r3, r3, #16
 c10148c:	e1a03843 	asr	r3, r3, #16
 c101490:	e1a00003 	mov	r0, r3
 c101494:	ebfffd84 	bl	c100aac <plotLicPlateUpdate>
				}
				ticks = 500;
 c101498:	e59f32e0 	ldr	r3, [pc, #736]	; c101780 <mainTask+0x978>
 c10149c:	e3a02f7d 	mov	r2, #500	; 0x1f4
 c1014a0:	e1c320b0 	strh	r2, [r3]
			}
			if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
 c1014a4:	e59f32d0 	ldr	r3, [pc, #720]	; c10177c <mainTask+0x974>
 c1014a8:	e5d33000 	ldrb	r3, [r3]
 c1014ac:	e3530000 	cmp	r3, #0
 c1014b0:	0a0000a5 	beq	c10174c <mainTask+0x944>
			{
				tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
 c1014b4:	e59f32c0 	ldr	r3, [pc, #704]	; c10177c <mainTask+0x974>
 c1014b8:	e3a02000 	mov	r2, #0
 c1014bc:	e5c32000 	strb	r2, [r3]
				parking[placeSelected].free = FALSE;
 c1014c0:	e59f32c4 	ldr	r3, [pc, #708]	; c10178c <mainTask+0x984>
 c1014c4:	e5d33000 	ldrb	r3, [r3]
 c1014c8:	e1a02003 	mov	r2, r3
 c1014cc:	e59f12a0 	ldr	r1, [pc, #672]	; c101774 <mainTask+0x96c>
 c1014d0:	e1a03002 	mov	r3, r2
 c1014d4:	e1a03083 	lsl	r3, r3, #1
 c1014d8:	e0833002 	add	r3, r3, r2
 c1014dc:	e1a03103 	lsl	r3, r3, #2
 c1014e0:	e0813003 	add	r3, r1, r3
 c1014e4:	e3a02000 	mov	r2, #0
 c1014e8:	e5c32001 	strb	r2, [r3, #1]
				ticketMsg.place = parking[placeSelected]; //imprime el ticket
 c1014ec:	e59f3298 	ldr	r3, [pc, #664]	; c10178c <mainTask+0x984>
 c1014f0:	e5d33000 	ldrb	r3, [r3]
 c1014f4:	e1a02003 	mov	r2, r3
 c1014f8:	e59f1294 	ldr	r1, [pc, #660]	; c101794 <mainTask+0x98c>
 c1014fc:	e59f0270 	ldr	r0, [pc, #624]	; c101774 <mainTask+0x96c>
 c101500:	e1a03002 	mov	r3, r2
 c101504:	e1a03083 	lsl	r3, r3, #1
 c101508:	e0833002 	add	r3, r3, r2
 c10150c:	e1a03103 	lsl	r3, r3, #2
 c101510:	e0803003 	add	r3, r0, r3
 c101514:	e2811002 	add	r1, r1, #2
 c101518:	e1a02003 	mov	r2, r3
 c10151c:	e3a0300c 	mov	r3, #12
 c101520:	e1a00001 	mov	r0, r1
 c101524:	e1a01002 	mov	r1, r2
 c101528:	e1a02003 	mov	r2, r3
 c10152c:	eb001d0b 	bl	c108960 <memcpy>
				ticketMsg.flag = TRUE;
 c101530:	e59f325c 	ldr	r3, [pc, #604]	; c101794 <mainTask+0x98c>
 c101534:	e3a02001 	mov	r2, #1
 c101538:	e5c32000 	strb	r2, [r3]
				kpPressedMsg.licPlateInput = FALSE;			//limpio el flag del keypress porque voy a cambiar de estado.
 c10153c:	e59f3240 	ldr	r3, [pc, #576]	; c101784 <mainTask+0x97c>
 c101540:	e3a02000 	mov	r2, #0
 c101544:	e5c32001 	strb	r2, [r3, #1]
				state = success;      		 /* Salta al estado success */
 c101548:	e59f3228 	ldr	r3, [pc, #552]	; c101778 <mainTask+0x970>
 c10154c:	e3a02005 	mov	r2, #5
 c101550:	e5c32000 	strb	r2, [r3]
				ticks = 500;
 c101554:	e59f3224 	ldr	r3, [pc, #548]	; c101780 <mainTask+0x978>
 c101558:	e3a02f7d 	mov	r2, #500	; 0x1f4
 c10155c:	e1c320b0 	strh	r2, [r3]

				if(!parking[placeSelected].licPlate){  //si hay un error en la matricula repite la operacion.
 c101560:	e59f3224 	ldr	r3, [pc, #548]	; c10178c <mainTask+0x984>
 c101564:	e5d33000 	ldrb	r3, [r3]
 c101568:	e1a02003 	mov	r2, r3
 c10156c:	e59f0200 	ldr	r0, [pc, #512]	; c101774 <mainTask+0x96c>
 c101570:	e3a01008 	mov	r1, #8
 c101574:	e1a03002 	mov	r3, r2
 c101578:	e1a03083 	lsl	r3, r3, #1
 c10157c:	e0833002 	add	r3, r3, r2
 c101580:	e1a03103 	lsl	r3, r3, #2
 c101584:	e0803003 	add	r3, r0, r3
 c101588:	e0833001 	add	r3, r3, r1
 c10158c:	e1d330b2 	ldrh	r3, [r3, #2]
 c101590:	e3530000 	cmp	r3, #0
 c101594:	1a000004 	bne	c1015ac <mainTask+0x7a4>
					state = licPlateInput;
 c101598:	e59f31d8 	ldr	r3, [pc, #472]	; c101778 <mainTask+0x970>
 c10159c:	e3a02004 	mov	r2, #4
 c1015a0:	e5c32000 	strb	r2, [r3]
					plotLicPlateEnc();
 c1015a4:	ebfffd4e 	bl	c100ae4 <plotLicPlateEnc>
				} else
					plotSucScreen(parking[placeSelected]); /* Visualiza pantalla de exito */;
			}

			break;
 c1015a8:	ea00006c 	b	c101760 <mainTask+0x958>

				if(!parking[placeSelected].licPlate){  //si hay un error en la matricula repite la operacion.
					state = licPlateInput;
					plotLicPlateEnc();
				} else
					plotSucScreen(parking[placeSelected]); /* Visualiza pantalla de exito */;
 c1015ac:	e59f31d8 	ldr	r3, [pc, #472]	; c10178c <mainTask+0x984>
 c1015b0:	e5d33000 	ldrb	r3, [r3]
 c1015b4:	e1a02003 	mov	r2, r3
 c1015b8:	e59f11b4 	ldr	r1, [pc, #436]	; c101774 <mainTask+0x96c>
 c1015bc:	e1a03002 	mov	r3, r2
 c1015c0:	e1a03083 	lsl	r3, r3, #1
 c1015c4:	e0833002 	add	r3, r3, r2
 c1015c8:	e1a03103 	lsl	r3, r3, #2
 c1015cc:	e0813003 	add	r3, r1, r3
 c1015d0:	e8930007 	ldm	r3, {r0, r1, r2}
 c1015d4:	ebfffd4e 	bl	c100b14 <plotSucScreen>
			}

			break;
 c1015d8:	ea000060 	b	c101760 <mainTask+0x958>
        case success:
			if( !(--ticks) )                           /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo maximo */
 c1015dc:	e59f319c 	ldr	r3, [pc, #412]	; c101780 <mainTask+0x978>
 c1015e0:	e1d330b0 	ldrh	r3, [r3]
 c1015e4:	e2433001 	sub	r3, r3, #1
 c1015e8:	e1a03803 	lsl	r3, r3, #16
 c1015ec:	e1a02823 	lsr	r2, r3, #16
 c1015f0:	e59f3188 	ldr	r3, [pc, #392]	; c101780 <mainTask+0x978>
 c1015f4:	e1c320b0 	strh	r2, [r3]
 c1015f8:	e59f3180 	ldr	r3, [pc, #384]	; c101780 <mainTask+0x978>
 c1015fc:	e1d330b0 	ldrh	r3, [r3]
 c101600:	e3530000 	cmp	r3, #0
 c101604:	1a000003 	bne	c101618 <mainTask+0x810>
			{
				plotWelcomeScreen();                       /* Visualiza pantalla inicial */
 c101608:	ebfffb70 	bl	c1003d0 <plotWelcomeScreen>
				state = waiting;                      /* Salta al estado demo_waiting */
 c10160c:	e59f3164 	ldr	r3, [pc, #356]	; c101778 <mainTask+0x970>
 c101610:	e3a02000 	mov	r2, #0
 c101614:	e5c32000 	strb	r2, [r3]
			}
			if( kpPressedMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
 c101618:	e59f3164 	ldr	r3, [pc, #356]	; c101784 <mainTask+0x97c>
 c10161c:	e5d33000 	ldrb	r3, [r3]
 c101620:	e3530000 	cmp	r3, #0
 c101624:	0a000008 	beq	c10164c <mainTask+0x844>
			{
				kpPressedMsg.flag = FALSE;              /* Marca el mensaje como leido */
 c101628:	e59f3154 	ldr	r3, [pc, #340]	; c101784 <mainTask+0x97c>
 c10162c:	e3a02000 	mov	r2, #0
 c101630:	e5c32000 	strb	r2, [r3]
				coinsMoverMsg.accept = FALSE;              /* Envia un mensaje para que la moneda se devuelva */
 c101634:	e59f314c 	ldr	r3, [pc, #332]	; c101788 <mainTask+0x980>
 c101638:	e3a02000 	mov	r2, #0
 c10163c:	e5c32001 	strb	r2, [r3, #1]
				coinsMoverMsg.flag   = TRUE;
 c101640:	e59f3140 	ldr	r3, [pc, #320]	; c101788 <mainTask+0x980>
 c101644:	e3a02001 	mov	r2, #1
 c101648:	e5c32000 	strb	r2, [r3]
			}
			if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
 c10164c:	e59f3128 	ldr	r3, [pc, #296]	; c10177c <mainTask+0x974>
 c101650:	e5d33000 	ldrb	r3, [r3]
 c101654:	e3530000 	cmp	r3, #0
 c101658:	0a00003d 	beq	c101754 <mainTask+0x94c>
			{
				tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
 c10165c:	e59f3118 	ldr	r3, [pc, #280]	; c10177c <mainTask+0x974>
 c101660:	e3a02000 	mov	r2, #0
 c101664:	e5c32000 	strb	r2, [r3]
				plotWelcomeScreen();                               /* Borra pantalla */
 c101668:	ebfffb58 	bl	c1003d0 <plotWelcomeScreen>
				state = waiting;                  /* Salta al estado selection ... */
 c10166c:	e59f3104 	ldr	r3, [pc, #260]	; c101778 <mainTask+0x970>
 c101670:	e3a02000 	mov	r2, #0
 c101674:	e5c32000 	strb	r2, [r3]
				ticks = 500;                               /* ... en el que debera permanecer un maximo de 500 ticks sin no hay actividad */
 c101678:	e59f3100 	ldr	r3, [pc, #256]	; c101780 <mainTask+0x978>
 c10167c:	e3a02f7d 	mov	r2, #500	; 0x1f4
 c101680:	e1c320b0 	strh	r2, [r3]
			}
			break;
 c101684:	ea000035 	b	c101760 <mainTask+0x958>

        case error:
			if( !(--ticks) )                           /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo maximo */
 c101688:	e59f30f0 	ldr	r3, [pc, #240]	; c101780 <mainTask+0x978>
 c10168c:	e1d330b0 	ldrh	r3, [r3]
 c101690:	e2433001 	sub	r3, r3, #1
 c101694:	e1a03803 	lsl	r3, r3, #16
 c101698:	e1a02823 	lsr	r2, r3, #16
 c10169c:	e59f30dc 	ldr	r3, [pc, #220]	; c101780 <mainTask+0x978>
 c1016a0:	e1c320b0 	strh	r2, [r3]
 c1016a4:	e59f30d4 	ldr	r3, [pc, #212]	; c101780 <mainTask+0x978>
 c1016a8:	e1d330b0 	ldrh	r3, [r3]
 c1016ac:	e3530000 	cmp	r3, #0
 c1016b0:	1a000003 	bne	c1016c4 <mainTask+0x8bc>
			{
				plotWelcomeScreen();                       /* Visualiza pantalla inicial */
 c1016b4:	ebfffb45 	bl	c1003d0 <plotWelcomeScreen>
				state = waiting;                      /* Salta al estado demo_waiting */
 c1016b8:	e59f30b8 	ldr	r3, [pc, #184]	; c101778 <mainTask+0x970>
 c1016bc:	e3a02000 	mov	r2, #0
 c1016c0:	e5c32000 	strb	r2, [r3]
			}
			if( kpPressedMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
 c1016c4:	e59f30b8 	ldr	r3, [pc, #184]	; c101784 <mainTask+0x97c>
 c1016c8:	e5d33000 	ldrb	r3, [r3]
 c1016cc:	e3530000 	cmp	r3, #0
 c1016d0:	0a000008 	beq	c1016f8 <mainTask+0x8f0>
			{
				kpPressedMsg.flag = FALSE;              /* Marca el mensaje como leido */
 c1016d4:	e59f30a8 	ldr	r3, [pc, #168]	; c101784 <mainTask+0x97c>
 c1016d8:	e3a02000 	mov	r2, #0
 c1016dc:	e5c32000 	strb	r2, [r3]
				coinsMoverMsg.accept = FALSE;              /* Envia un mensaje para que la moneda se devuelva */
 c1016e0:	e59f30a0 	ldr	r3, [pc, #160]	; c101788 <mainTask+0x980>
 c1016e4:	e3a02000 	mov	r2, #0
 c1016e8:	e5c32001 	strb	r2, [r3, #1]
				coinsMoverMsg.flag   = TRUE;
 c1016ec:	e59f3094 	ldr	r3, [pc, #148]	; c101788 <mainTask+0x980>
 c1016f0:	e3a02001 	mov	r2, #1
 c1016f4:	e5c32000 	strb	r2, [r3]
			}
			if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
 c1016f8:	e59f307c 	ldr	r3, [pc, #124]	; c10177c <mainTask+0x974>
 c1016fc:	e5d33000 	ldrb	r3, [r3]
 c101700:	e3530000 	cmp	r3, #0
 c101704:	0a000014 	beq	c10175c <mainTask+0x954>
			{
				tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
 c101708:	e59f306c 	ldr	r3, [pc, #108]	; c10177c <mainTask+0x974>
 c10170c:	e3a02000 	mov	r2, #0
 c101710:	e5c32000 	strb	r2, [r3]
				plotWelcomeScreen();                              /* vuelve al welcome screen*/
 c101714:	ebfffb2d 	bl	c1003d0 <plotWelcomeScreen>
				state = waiting;                  /* Salta al estado selection ... */
 c101718:	e59f3058 	ldr	r3, [pc, #88]	; c101778 <mainTask+0x970>
 c10171c:	e3a02000 	mov	r2, #0
 c101720:	e5c32000 	strb	r2, [r3]
				ticks = 500;                               /* ... en el que debera permanecer un maximo de 500 ticks sin no hay actividad */
 c101724:	e59f3054 	ldr	r3, [pc, #84]	; c101780 <mainTask+0x978>
 c101728:	e3a02f7d 	mov	r2, #500	; 0x1f4
 c10172c:	e1c320b0 	strh	r2, [r3]
			}
			break;
 c101730:	ea00000a 	b	c101760 <mainTask+0x958>
            {
                kpPressedMsg.flag = FALSE;              /* Marca el mensaje como leido */
                coinsMoverMsg.accept = FALSE;              /* Envia un mensaje para que la moneda se devuelva */
                coinsMoverMsg.flag   = TRUE;
            }    
            break;
 c101734:	e1a00000 	nop			; (mov r0, r0)
 c101738:	ea000008 	b	c101760 <mainTask+0x958>
					state = error;
				} else {
					plotSelEnc();
				}
        	}
        	break;
 c10173c:	e1a00000 	nop			; (mov r0, r0)
 c101740:	ea000006 	b	c101760 <mainTask+0x958>
					plotLicPlateScreen(parking[placeSelected]);
					kpPressedMsg.licPlateInput = TRUE;
					credit = 0;
				}
			}
        	break;
 c101744:	e1a00000 	nop			; (mov r0, r0)
 c101748:	ea000004 	b	c101760 <mainTask+0x958>
					plotLicPlateEnc();
				} else
					plotSucScreen(parking[placeSelected]); /* Visualiza pantalla de exito */;
			}

			break;
 c10174c:	e1a00000 	nop			; (mov r0, r0)
 c101750:	ea000002 	b	c101760 <mainTask+0x958>
				tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
				plotWelcomeScreen();                               /* Borra pantalla */
				state = waiting;                  /* Salta al estado selection ... */
				ticks = 500;                               /* ... en el que debera permanecer un maximo de 500 ticks sin no hay actividad */
			}
			break;
 c101754:	e1a00000 	nop			; (mov r0, r0)
 c101758:	ea000000 	b	c101760 <mainTask+0x958>
				tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
				plotWelcomeScreen();                              /* vuelve al welcome screen*/
				state = waiting;                  /* Salta al estado selection ... */
				ticks = 500;                               /* ... en el que debera permanecer un maximo de 500 ticks sin no hay actividad */
			}
			break;
 c10175c:	e1a00000 	nop			; (mov r0, r0)
    }
}
 c101760:	e24bd00c 	sub	sp, fp, #12
 c101764:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101768:	e12fff1e 	bx	lr
 c10176c:	0c10a4df 	.word	0x0c10a4df
 c101770:	0c10a58c 	.word	0x0c10a58c
 c101774:	0c10a5d4 	.word	0x0c10a5d4
 c101778:	0c10a58e 	.word	0x0c10a58e
 c10177c:	0c10a5b4 	.word	0x0c10a5b4
 c101780:	0c10a590 	.word	0x0c10a590
 c101784:	0c10a5bc 	.word	0x0c10a5bc
 c101788:	0c10a5d0 	.word	0x0c10a5d0
 c10178c:	0c10a592 	.word	0x0c10a592
 c101790:	0c10a594 	.word	0x0c10a594
 c101794:	0c10a5c0 	.word	0x0c10a5c0

0c101798 <ticketPrinterTask>:
/* 
** Emula el comportamiento de la impresora de tickets:
**   Cada segundo muestrea si ha recibido un mensaje de la tarea principal enviar a traves de la UART el texto del ticket del aparcamiento elegido
*/
void ticketPrinterTask( void )
{
 c101798:	e1a0c00d 	mov	ip, sp
 c10179c:	e92dd800 	push	{fp, ip, lr, pc}
 c1017a0:	e24cb004 	sub	fp, ip, #4
   if(!ticketMsg.flag){
 c1017a4:	e59f306c 	ldr	r3, [pc, #108]	; c101818 <ticketPrinterTask+0x80>
 c1017a8:	e5d33000 	ldrb	r3, [r3]
 c1017ac:	e3530000 	cmp	r3, #0
 c1017b0:	0a000014 	beq	c101808 <ticketPrinterTask+0x70>
	   return;
   }
   ticketMsg.flag = FALSE;
 c1017b4:	e59f305c 	ldr	r3, [pc, #92]	; c101818 <ticketPrinterTask+0x80>
 c1017b8:	e3a02000 	mov	r2, #0
 c1017bc:	e5c32000 	strb	r2, [r3]
   uart0_puts("Plaza ");
 c1017c0:	e59f0054 	ldr	r0, [pc, #84]	; c10181c <ticketPrinterTask+0x84>
 c1017c4:	eb0017a7 	bl	c107668 <uart0_puts>
   uart0_putint(ticketMsg.place.id);
 c1017c8:	e59f3048 	ldr	r3, [pc, #72]	; c101818 <ticketPrinterTask+0x80>
 c1017cc:	e5d33002 	ldrb	r3, [r3, #2]
 c1017d0:	e1a00003 	mov	r0, r3
 c1017d4:	eb0017bd 	bl	c1076d0 <uart0_putint>
   uart0_putchar('\n');
 c1017d8:	e3a0000a 	mov	r0, #10
 c1017dc:	eb00177b 	bl	c1075d0 <uart0_putchar>
   uart0_puts("Fin de estacionamiento:\n");
 c1017e0:	e59f0038 	ldr	r0, [pc, #56]	; c101820 <ticketPrinterTask+0x88>
 c1017e4:	eb00179f 	bl	c107668 <uart0_puts>
   uart0_puts(rtc_stringDate(ticketMsg.place.deadline));
 c1017e8:	e59f3028 	ldr	r3, [pc, #40]	; c101818 <ticketPrinterTask+0x80>
 c1017ec:	e2833004 	add	r3, r3, #4
 c1017f0:	e8930003 	ldm	r3, {r0, r1}
 c1017f4:	eb000de8 	bl	c104f9c <rtc_stringDate>
 c1017f8:	e1a03000 	mov	r3, r0
 c1017fc:	e1a00003 	mov	r0, r3
 c101800:	eb001798 	bl	c107668 <uart0_puts>
 c101804:	ea000000 	b	c10180c <ticketPrinterTask+0x74>
**   Cada segundo muestrea si ha recibido un mensaje de la tarea principal enviar a traves de la UART el texto del ticket del aparcamiento elegido
*/
void ticketPrinterTask( void )
{
   if(!ticketMsg.flag){
	   return;
 c101808:	e1a00000 	nop			; (mov r0, r0)
   uart0_puts("Plaza ");
   uart0_putint(ticketMsg.place.id);
   uart0_putchar('\n');
   uart0_puts("Fin de estacionamiento:\n");
   uart0_puts(rtc_stringDate(ticketMsg.place.deadline));
}
 c10180c:	e24bd00c 	sub	sp, fp, #12
 c101810:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101814:	e12fff1e 	bx	lr
 c101818:	0c10a5c0 	.word	0x0c10a5c0
 c10181c:	0c108dc8 	.word	0x0c108dc8
 c101820:	0c108dd0 	.word	0x0c108dd0

0c101824 <clockTask>:

/* 
** Cada segundo visualiza la fecha/hora en la pantalla y libera aquellas plazas cuya hora de finalizacion haya pasado
*/
void clockTask( void )  
{
 c101824:	e1a0c00d 	mov	ip, sp
 c101828:	e92dd800 	push	{fp, ip, lr, pc}
 c10182c:	e24cb004 	sub	fp, ip, #4
	plotTime();
 c101830:	ebfffad4 	bl	c100388 <plotTime>
}
 c101834:	e24bd00c 	sub	sp, fp, #12
 c101838:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10183c:	e12fff1e 	bx	lr

0c101840 <tsScanTask>:

/* 
** Cada 50 ms muestrea la touchscreen y envia un mensaje a la tarea principal con la posicion del lugar pulsado
*/
void tsScanTask( void )  
{
 c101840:	e1a0c00d 	mov	ip, sp
 c101844:	e92dd800 	push	{fp, ip, lr, pc}
 c101848:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;
    static enum { wait_keydown, scan, wait_keyup } state;
    
    if( init )
 c10184c:	e59f30c4 	ldr	r3, [pc, #196]	; c101918 <tsScanTask+0xd8>
 c101850:	e5d33000 	ldrb	r3, [r3]
 c101854:	e3530000 	cmp	r3, #0
 c101858:	0a000006 	beq	c101878 <tsScanTask+0x38>
    {
        init  = FALSE;
 c10185c:	e59f30b4 	ldr	r3, [pc, #180]	; c101918 <tsScanTask+0xd8>
 c101860:	e3a02000 	mov	r2, #0
 c101864:	e5c32000 	strb	r2, [r3]
        state = wait_keydown;
 c101868:	e59f30ac 	ldr	r3, [pc, #172]	; c10191c <tsScanTask+0xdc>
 c10186c:	e3a02000 	mov	r2, #0
 c101870:	e5c32000 	strb	r2, [r3]
 c101874:	ea000024 	b	c10190c <tsScanTask+0xcc>
    }
    else switch( state )
 c101878:	e59f309c 	ldr	r3, [pc, #156]	; c10191c <tsScanTask+0xdc>
 c10187c:	e5d33000 	ldrb	r3, [r3]
 c101880:	e3530001 	cmp	r3, #1
 c101884:	0a00000b 	beq	c1018b8 <tsScanTask+0x78>
 c101888:	e3530002 	cmp	r3, #2
 c10188c:	0a000013 	beq	c1018e0 <tsScanTask+0xa0>
 c101890:	e3530000 	cmp	r3, #0
 c101894:	1a00001c 	bne	c10190c <tsScanTask+0xcc>
    {
        case wait_keydown:                        /* Estado esperando la presion de la pantalla */
            if( ts_pressed() )                        /* Chequea la pantalla esta presionada */
 c101898:	eb001571 	bl	c106e64 <ts_pressed>
 c10189c:	e1a03000 	mov	r3, r0
 c1018a0:	e3530000 	cmp	r3, #0
 c1018a4:	0a000015 	beq	c101900 <tsScanTask+0xc0>
                state = scan;                         /* Salta al estado scan */
 c1018a8:	e59f306c 	ldr	r3, [pc, #108]	; c10191c <tsScanTask+0xdc>
 c1018ac:	e3a02001 	mov	r2, #1
 c1018b0:	e5c32000 	strb	r2, [r3]
            break;
 c1018b4:	ea000014 	b	c10190c <tsScanTask+0xcc>
        case scan:                                /* Estado en que escanea la pantalla */
            ts_getpos( &tsPressedMsg.x, &tsPressedMsg.y );    /* Lee la pantalla */
 c1018b8:	e59f0060 	ldr	r0, [pc, #96]	; c101920 <tsScanTask+0xe0>
 c1018bc:	e59f1060 	ldr	r1, [pc, #96]	; c101924 <tsScanTask+0xe4>
 c1018c0:	eb0015fb 	bl	c1070b4 <ts_getpos>
            tsPressedMsg.flag = TRUE;                 /* Envia un mensaje con el valor de la posicion presionada */
 c1018c4:	e59f305c 	ldr	r3, [pc, #92]	; c101928 <tsScanTask+0xe8>
 c1018c8:	e3a02001 	mov	r2, #1
 c1018cc:	e5c32000 	strb	r2, [r3]
            state = wait_keyup;                       /* Salta al estado wait_keyup */
 c1018d0:	e59f3044 	ldr	r3, [pc, #68]	; c10191c <tsScanTask+0xdc>
 c1018d4:	e3a02002 	mov	r2, #2
 c1018d8:	e5c32000 	strb	r2, [r3]
            break;
 c1018dc:	ea00000a 	b	c10190c <tsScanTask+0xcc>
        case wait_keyup:                          /* Estado esperando la depresion de la pantalla  */
            if( !ts_pressed() )                       /* Chequea si la pantalla ya no esta presionada */
 c1018e0:	eb00155f 	bl	c106e64 <ts_pressed>
 c1018e4:	e1a03000 	mov	r3, r0
 c1018e8:	e3530000 	cmp	r3, #0
 c1018ec:	1a000005 	bne	c101908 <tsScanTask+0xc8>
                state = wait_keydown;                 /* Salta al estado wait_keydown */
 c1018f0:	e59f3024 	ldr	r3, [pc, #36]	; c10191c <tsScanTask+0xdc>
 c1018f4:	e3a02000 	mov	r2, #0
 c1018f8:	e5c32000 	strb	r2, [r3]
            break;
 c1018fc:	ea000002 	b	c10190c <tsScanTask+0xcc>
    else switch( state )
    {
        case wait_keydown:                        /* Estado esperando la presion de la pantalla */
            if( ts_pressed() )                        /* Chequea la pantalla esta presionada */
                state = scan;                         /* Salta al estado scan */
            break;
 c101900:	e1a00000 	nop			; (mov r0, r0)
 c101904:	ea000000 	b	c10190c <tsScanTask+0xcc>
            state = wait_keyup;                       /* Salta al estado wait_keyup */
            break;
        case wait_keyup:                          /* Estado esperando la depresion de la pantalla  */
            if( !ts_pressed() )                       /* Chequea si la pantalla ya no esta presionada */
                state = wait_keydown;                 /* Salta al estado wait_keydown */
            break;
 c101908:	e1a00000 	nop			; (mov r0, r0)
    }
}
 c10190c:	e24bd00c 	sub	sp, fp, #12
 c101910:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101914:	e12fff1e 	bx	lr
 c101918:	0c10a4de 	.word	0x0c10a4de
 c10191c:	0c10a58b 	.word	0x0c10a58b
 c101920:	0c10a5b6 	.word	0x0c10a5b6
 c101924:	0c10a5b8 	.word	0x0c10a5b8
 c101928:	0c10a5b4 	.word	0x0c10a5b4

0c10192c <kpScanTask>:
/* 
** Emula el comportamiento de un reconocedor de monedas:
**   Cada 50 ms muestrea el keypad y envia un mensaje a la tarea principal con el valor de la moneda asociada a la tecla
*/
void kpScanTask( void )
{
 c10192c:	e1a0c00d 	mov	ip, sp
 c101930:	e92dd800 	push	{fp, ip, lr, pc}
 c101934:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;
    static enum { wait_keydown, coinInput, licenseInput, wait_keyup } state;
    static uint8 licPlatePoint=0, licPlateNum;

    
    if( init )
 c101938:	e59f31a4 	ldr	r3, [pc, #420]	; c101ae4 <kpScanTask+0x1b8>
 c10193c:	e5d33000 	ldrb	r3, [r3]
 c101940:	e3530000 	cmp	r3, #0
 c101944:	0a000006 	beq	c101964 <kpScanTask+0x38>
    {
        init  = FALSE;
 c101948:	e59f3194 	ldr	r3, [pc, #404]	; c101ae4 <kpScanTask+0x1b8>
 c10194c:	e3a02000 	mov	r2, #0
 c101950:	e5c32000 	strb	r2, [r3]
        state = wait_keydown;
 c101954:	e59f318c 	ldr	r3, [pc, #396]	; c101ae8 <kpScanTask+0x1bc>
 c101958:	e3a02000 	mov	r2, #0
 c10195c:	e5c32000 	strb	r2, [r3]
 c101960:	ea00005c 	b	c101ad8 <kpScanTask+0x1ac>
    }
    else switch( state )
 c101964:	e59f317c 	ldr	r3, [pc, #380]	; c101ae8 <kpScanTask+0x1bc>
 c101968:	e5d33000 	ldrb	r3, [r3]
 c10196c:	e3530003 	cmp	r3, #3
 c101970:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c101974:	ea000057 	b	c101ad8 <kpScanTask+0x1ac>
 c101978:	0c101988 	.word	0x0c101988
 c10197c:	0c1019d8 	.word	0x0c1019d8
 c101980:	0c101a7c 	.word	0x0c101a7c
 c101984:	0c101aac 	.word	0x0c101aac
    {
        case wait_keydown:                        /* Estado esperando la presion teclas */
            if( keypad_pressed() && !kpPressedMsg.licPlateInput)                    /* Chequea si hay una tecla presionada */
 c101988:	eb0002ac 	bl	c102440 <keypad_pressed>
 c10198c:	e1a03000 	mov	r3, r0
 c101990:	e3530000 	cmp	r3, #0
 c101994:	0a000007 	beq	c1019b8 <kpScanTask+0x8c>
 c101998:	e59f314c 	ldr	r3, [pc, #332]	; c101aec <kpScanTask+0x1c0>
 c10199c:	e5d33001 	ldrb	r3, [r3, #1]
 c1019a0:	e3530000 	cmp	r3, #0
 c1019a4:	1a000003 	bne	c1019b8 <kpScanTask+0x8c>
                state = coinInput;                         /* Salta al estado scan */
 c1019a8:	e59f3138 	ldr	r3, [pc, #312]	; c101ae8 <kpScanTask+0x1bc>
 c1019ac:	e3a02001 	mov	r2, #1
 c1019b0:	e5c32000 	strb	r2, [r3]
            else if(keypad_pressed())
            	state = licenseInput;
            break;
 c1019b4:	ea000047 	b	c101ad8 <kpScanTask+0x1ac>
    else switch( state )
    {
        case wait_keydown:                        /* Estado esperando la presion teclas */
            if( keypad_pressed() && !kpPressedMsg.licPlateInput)                    /* Chequea si hay una tecla presionada */
                state = coinInput;                         /* Salta al estado scan */
            else if(keypad_pressed())
 c1019b8:	eb0002a0 	bl	c102440 <keypad_pressed>
 c1019bc:	e1a03000 	mov	r3, r0
 c1019c0:	e3530000 	cmp	r3, #0
 c1019c4:	0a000040 	beq	c101acc <kpScanTask+0x1a0>
            	state = licenseInput;
 c1019c8:	e59f3118 	ldr	r3, [pc, #280]	; c101ae8 <kpScanTask+0x1bc>
 c1019cc:	e3a02002 	mov	r2, #2
 c1019d0:	e5c32000 	strb	r2, [r3]
            break;
 c1019d4:	ea00003f 	b	c101ad8 <kpScanTask+0x1ac>
        case coinInput:                                /* Estado en que escanea el teclado */
            switch( keypad_scan() )                   /* Lee el teclado */
 c1019d8:	eb00020f 	bl	c10221c <keypad_scan>
 c1019dc:	e1a03000 	mov	r3, r0
 c1019e0:	e3530003 	cmp	r3, #3
 c1019e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c1019e8:	ea00001f 	b	c101a6c <kpScanTask+0x140>
 c1019ec:	0c1019fc 	.word	0x0c1019fc
 c1019f0:	0c101a18 	.word	0x0c101a18
 c1019f4:	0c101a34 	.word	0x0c101a34
 c1019f8:	0c101a50 	.word	0x0c101a50
            {
                case KEYPAD_KEY0:                         /* La tecla 0 esta asociada a la moneda de 0,10 euros */
                    kpPressedMsg.cents = 10;           /* Envia un mensaje con el valor de la moneda */
 c1019fc:	e59f30e8 	ldr	r3, [pc, #232]	; c101aec <kpScanTask+0x1c0>
 c101a00:	e3a0200a 	mov	r2, #10
 c101a04:	e5c32002 	strb	r2, [r3, #2]
                    kpPressedMsg.flag  = TRUE;
 c101a08:	e59f30dc 	ldr	r3, [pc, #220]	; c101aec <kpScanTask+0x1c0>
 c101a0c:	e3a02001 	mov	r2, #1
 c101a10:	e5c32000 	strb	r2, [r3]
                    break;
 c101a14:	ea000014 	b	c101a6c <kpScanTask+0x140>
                case KEYPAD_KEY1:                         /* La tecla 1 esta asociada a la moneda de 0,20 euros */
				    kpPressedMsg.cents = 20;           /* Envia un mensaje con el valor de la moneda */
 c101a18:	e59f30cc 	ldr	r3, [pc, #204]	; c101aec <kpScanTask+0x1c0>
 c101a1c:	e3a02014 	mov	r2, #20
 c101a20:	e5c32002 	strb	r2, [r3, #2]
				    kpPressedMsg.flag  = TRUE;
 c101a24:	e59f30c0 	ldr	r3, [pc, #192]	; c101aec <kpScanTask+0x1c0>
 c101a28:	e3a02001 	mov	r2, #1
 c101a2c:	e5c32000 	strb	r2, [r3]
				    break;
 c101a30:	ea00000d 	b	c101a6c <kpScanTask+0x140>
                case KEYPAD_KEY2:                         /* La tecla 2 esta asociada a la moneda de 0,50 euros */
					kpPressedMsg.cents = 50;           /* Envia un mensaje con el valor de la moneda */
 c101a34:	e59f30b0 	ldr	r3, [pc, #176]	; c101aec <kpScanTask+0x1c0>
 c101a38:	e3a02032 	mov	r2, #50	; 0x32
 c101a3c:	e5c32002 	strb	r2, [r3, #2]
					kpPressedMsg.flag  = TRUE;
 c101a40:	e59f30a4 	ldr	r3, [pc, #164]	; c101aec <kpScanTask+0x1c0>
 c101a44:	e3a02001 	mov	r2, #1
 c101a48:	e5c32000 	strb	r2, [r3]
					break;
 c101a4c:	ea000006 	b	c101a6c <kpScanTask+0x140>
                case KEYPAD_KEY3:                         /* La tecla 3 esta asociada a la moneda de 1,00 euros */
					kpPressedMsg.cents = 100;           /* Envia un mensaje con el valor de la moneda */
 c101a50:	e59f3094 	ldr	r3, [pc, #148]	; c101aec <kpScanTask+0x1c0>
 c101a54:	e3a02064 	mov	r2, #100	; 0x64
 c101a58:	e5c32002 	strb	r2, [r3, #2]
					kpPressedMsg.flag  = TRUE;
 c101a5c:	e59f3088 	ldr	r3, [pc, #136]	; c101aec <kpScanTask+0x1c0>
 c101a60:	e3a02001 	mov	r2, #1
 c101a64:	e5c32000 	strb	r2, [r3]
					break;
 c101a68:	e1a00000 	nop			; (mov r0, r0)
            }
            state = wait_keyup;                       /* Salta al estado wait_keyup */
 c101a6c:	e59f3074 	ldr	r3, [pc, #116]	; c101ae8 <kpScanTask+0x1bc>
 c101a70:	e3a02003 	mov	r2, #3
 c101a74:	e5c32000 	strb	r2, [r3]
            break;
 c101a78:	ea000016 	b	c101ad8 <kpScanTask+0x1ac>
		case licenseInput:
			kpPressedMsg.keyPress = keypad_scan();
 c101a7c:	eb0001e6 	bl	c10221c <keypad_scan>
 c101a80:	e1a03000 	mov	r3, r0
 c101a84:	e1a02003 	mov	r2, r3
 c101a88:	e59f305c 	ldr	r3, [pc, #92]	; c101aec <kpScanTask+0x1c0>
 c101a8c:	e5c32003 	strb	r2, [r3, #3]
		    state = wait_keyup;
 c101a90:	e59f3050 	ldr	r3, [pc, #80]	; c101ae8 <kpScanTask+0x1bc>
 c101a94:	e3a02003 	mov	r2, #3
 c101a98:	e5c32000 	strb	r2, [r3]
		    kpPressedMsg.flag  = TRUE;
 c101a9c:	e59f3048 	ldr	r3, [pc, #72]	; c101aec <kpScanTask+0x1c0>
 c101aa0:	e3a02001 	mov	r2, #1
 c101aa4:	e5c32000 	strb	r2, [r3]
			break;
 c101aa8:	ea00000a 	b	c101ad8 <kpScanTask+0x1ac>
        case wait_keyup:                          /* Estado esperando la depresion de teclas  */
            if( !keypad_pressed() )                   /* Chequea si la tecla ya no esta presionada */
 c101aac:	eb000263 	bl	c102440 <keypad_pressed>
 c101ab0:	e1a03000 	mov	r3, r0
 c101ab4:	e3530000 	cmp	r3, #0
 c101ab8:	1a000005 	bne	c101ad4 <kpScanTask+0x1a8>
                state = wait_keydown;                     /* Salta al estado wait_keydown */
 c101abc:	e59f3024 	ldr	r3, [pc, #36]	; c101ae8 <kpScanTask+0x1bc>
 c101ac0:	e3a02000 	mov	r2, #0
 c101ac4:	e5c32000 	strb	r2, [r3]
            break;
 c101ac8:	ea000002 	b	c101ad8 <kpScanTask+0x1ac>
        case wait_keydown:                        /* Estado esperando la presion teclas */
            if( keypad_pressed() && !kpPressedMsg.licPlateInput)                    /* Chequea si hay una tecla presionada */
                state = coinInput;                         /* Salta al estado scan */
            else if(keypad_pressed())
            	state = licenseInput;
            break;
 c101acc:	e1a00000 	nop			; (mov r0, r0)
 c101ad0:	ea000000 	b	c101ad8 <kpScanTask+0x1ac>
		    kpPressedMsg.flag  = TRUE;
			break;
        case wait_keyup:                          /* Estado esperando la depresion de teclas  */
            if( !keypad_pressed() )                   /* Chequea si la tecla ya no esta presionada */
                state = wait_keydown;                     /* Salta al estado wait_keydown */
            break;
 c101ad4:	e1a00000 	nop			; (mov r0, r0)
    }    
}
 c101ad8:	e24bd00c 	sub	sp, fp, #12
 c101adc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ae0:	e12fff1e 	bx	lr
 c101ae4:	0c10a4dd 	.word	0x0c10a4dd
 c101ae8:	0c10a588 	.word	0x0c10a588
 c101aec:	0c10a5bc 	.word	0x0c10a5bc

0c101af0 <coinsMoverTask>:
**   Cada 100 ms muestrea si ha recibido un mensaje de la tarea principal para mover monedas
**   Si van a la alcancia activa durante 1 s los leds y muestra una A en los segs
**   Si van al cajetin de devolucion activa durante 1 segundo los leds y muestra una D en los segs
*/
void coinsMoverTask( void )
{
 c101af0:	e1a0c00d 	mov	ip, sp
 c101af4:	e92dd800 	push	{fp, ip, lr, pc}
 c101af8:	e24cb004 	sub	fp, ip, #4
    static boolean init = TRUE;
    static enum { off, on } state;    
    static uint32 ticks;
    
    if( init )
 c101afc:	e59f310c 	ldr	r3, [pc, #268]	; c101c10 <coinsMoverTask+0x120>
 c101b00:	e5d33000 	ldrb	r3, [r3]
 c101b04:	e3530000 	cmp	r3, #0
 c101b08:	0a000006 	beq	c101b28 <coinsMoverTask+0x38>
    {
        init  = FALSE;
 c101b0c:	e59f30fc 	ldr	r3, [pc, #252]	; c101c10 <coinsMoverTask+0x120>
 c101b10:	e3a02000 	mov	r2, #0
 c101b14:	e5c32000 	strb	r2, [r3]
        state = off;
 c101b18:	e59f30f4 	ldr	r3, [pc, #244]	; c101c14 <coinsMoverTask+0x124>
 c101b1c:	e3a02000 	mov	r2, #0
 c101b20:	e5c32000 	strb	r2, [r3]
 c101b24:	ea000036 	b	c101c04 <coinsMoverTask+0x114>
    }
    else switch( state )
 c101b28:	e59f30e4 	ldr	r3, [pc, #228]	; c101c14 <coinsMoverTask+0x124>
 c101b2c:	e5d33000 	ldrb	r3, [r3]
 c101b30:	e3530000 	cmp	r3, #0
 c101b34:	0a000002 	beq	c101b44 <coinsMoverTask+0x54>
 c101b38:	e3530001 	cmp	r3, #1
 c101b3c:	0a00001b 	beq	c101bb0 <coinsMoverTask+0xc0>
 c101b40:	ea00002f 	b	c101c04 <coinsMoverTask+0x114>
    {
        case off:                                /* Estado con leds y 7-segs apagados */
            if( coinsMoverMsg.flag )                /* Chequea si ha recibido mensaje */
 c101b44:	e59f30cc 	ldr	r3, [pc, #204]	; c101c18 <coinsMoverTask+0x128>
 c101b48:	e5d33000 	ldrb	r3, [r3]
 c101b4c:	e3530000 	cmp	r3, #0
 c101b50:	0a000028 	beq	c101bf8 <coinsMoverTask+0x108>
            {
                coinsMoverMsg.flag = FALSE;            /* Marca el mensaje como leido */
 c101b54:	e59f30bc 	ldr	r3, [pc, #188]	; c101c18 <coinsMoverTask+0x128>
 c101b58:	e3a02000 	mov	r2, #0
 c101b5c:	e5c32000 	strb	r2, [r3]
                if( coinsMoverMsg.accept )             /* Muestra el mensaje que corresponda en segs */
 c101b60:	e59f30b0 	ldr	r3, [pc, #176]	; c101c18 <coinsMoverTask+0x128>
 c101b64:	e5d33001 	ldrb	r3, [r3, #1]
 c101b68:	e3530000 	cmp	r3, #0
 c101b6c:	0a000002 	beq	c101b7c <coinsMoverTask+0x8c>
                    segs_putchar( 10 );
 c101b70:	e3a0000a 	mov	r0, #10
 c101b74:	eb000e5c 	bl	c1054ec <segs_putchar>
 c101b78:	ea000001 	b	c101b84 <coinsMoverTask+0x94>
                else
                    segs_putchar( 13 );
 c101b7c:	e3a0000d 	mov	r0, #13
 c101b80:	eb000e59 	bl	c1054ec <segs_putchar>
                led_on( LEFT_LED );                    /* Enciende leds */
 c101b84:	e3a00001 	mov	r0, #1
 c101b88:	eb000a5a 	bl	c1044f8 <led_on>
                led_on( RIGHT_LED );
 c101b8c:	e3a00002 	mov	r0, #2
 c101b90:	eb000a58 	bl	c1044f8 <led_on>
                state = on;                            /* Salta al estado on ... */
 c101b94:	e59f3078 	ldr	r3, [pc, #120]	; c101c14 <coinsMoverTask+0x124>
 c101b98:	e3a02001 	mov	r2, #1
 c101b9c:	e5c32000 	strb	r2, [r3]
                ticks = 10;                            /* ... en el que debera permanecer 10 ticks */
 c101ba0:	e59f3074 	ldr	r3, [pc, #116]	; c101c1c <coinsMoverTask+0x12c>
 c101ba4:	e3a0200a 	mov	r2, #10
 c101ba8:	e5832000 	str	r2, [r3]
            }
            break;
 c101bac:	ea000014 	b	c101c04 <coinsMoverTask+0x114>
        case on:                                /* Estado con leds y 7-segs encendidos */
            if( !(--ticks) )                        /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo requerido */
 c101bb0:	e59f3064 	ldr	r3, [pc, #100]	; c101c1c <coinsMoverTask+0x12c>
 c101bb4:	e5933000 	ldr	r3, [r3]
 c101bb8:	e2432001 	sub	r2, r3, #1
 c101bbc:	e59f3058 	ldr	r3, [pc, #88]	; c101c1c <coinsMoverTask+0x12c>
 c101bc0:	e5832000 	str	r2, [r3]
 c101bc4:	e59f3050 	ldr	r3, [pc, #80]	; c101c1c <coinsMoverTask+0x12c>
 c101bc8:	e5933000 	ldr	r3, [r3]
 c101bcc:	e3530000 	cmp	r3, #0
 c101bd0:	1a00000a 	bne	c101c00 <coinsMoverTask+0x110>
            {  
                segs_off();                            /* Apaga segs */
 c101bd4:	eb000e36 	bl	c1054b4 <segs_off>
                led_off( LEFT_LED );                   /* Apaga leds */
 c101bd8:	e3a00001 	mov	r0, #1
 c101bdc:	eb000a57 	bl	c104540 <led_off>
                led_off( RIGHT_LED );                                
 c101be0:	e3a00002 	mov	r0, #2
 c101be4:	eb000a55 	bl	c104540 <led_off>
                state = off;                           /* Salta al estado off */
 c101be8:	e59f3024 	ldr	r3, [pc, #36]	; c101c14 <coinsMoverTask+0x124>
 c101bec:	e3a02000 	mov	r2, #0
 c101bf0:	e5c32000 	strb	r2, [r3]
            }
            break;
 c101bf4:	ea000002 	b	c101c04 <coinsMoverTask+0x114>
                led_on( LEFT_LED );                    /* Enciende leds */
                led_on( RIGHT_LED );
                state = on;                            /* Salta al estado on ... */
                ticks = 10;                            /* ... en el que debera permanecer 10 ticks */
            }
            break;
 c101bf8:	e1a00000 	nop			; (mov r0, r0)
 c101bfc:	ea000000 	b	c101c04 <coinsMoverTask+0x114>
                segs_off();                            /* Apaga segs */
                led_off( LEFT_LED );                   /* Apaga leds */
                led_off( RIGHT_LED );                                
                state = off;                           /* Salta al estado off */
            }
            break;
 c101c00:	e1a00000 	nop			; (mov r0, r0)
    }
}    
 c101c04:	e24bd00c 	sub	sp, fp, #12
 c101c08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101c0c:	e12fff1e 	bx	lr
 c101c10:	0c10a4dc 	.word	0x0c10a4dc
 c101c14:	0c10a581 	.word	0x0c10a581
 c101c18:	0c10a5d0 	.word	0x0c10a5d0
 c101c1c:	0c10a584 	.word	0x0c10a584

0c101c20 <selectorTask>:


int8 selectorTask(void)
{
 c101c20:	e1a0c00d 	mov	ip, sp
 c101c24:	e92dd800 	push	{fp, ip, lr, pc}
 c101c28:	e24cb004 	sub	fp, ip, #4

	//PUESTO 1
	if(tsPressedMsg.x < LCD_WIDTH/4 && 64 < tsPressedMsg.y && tsPressedMsg.y < 128)
 c101c2c:	e59f3214 	ldr	r3, [pc, #532]	; c101e48 <selectorTask+0x228>
 c101c30:	e1d330b2 	ldrh	r3, [r3, #2]
 c101c34:	e353004f 	cmp	r3, #79	; 0x4f
 c101c38:	8a000009 	bhi	c101c64 <selectorTask+0x44>
 c101c3c:	e59f3204 	ldr	r3, [pc, #516]	; c101e48 <selectorTask+0x228>
 c101c40:	e1d330b4 	ldrh	r3, [r3, #4]
 c101c44:	e3530040 	cmp	r3, #64	; 0x40
 c101c48:	9a000005 	bls	c101c64 <selectorTask+0x44>
 c101c4c:	e59f31f4 	ldr	r3, [pc, #500]	; c101e48 <selectorTask+0x228>
 c101c50:	e1d330b4 	ldrh	r3, [r3, #4]
 c101c54:	e353007f 	cmp	r3, #127	; 0x7f
 c101c58:	8a000001 	bhi	c101c64 <selectorTask+0x44>
	{
		return 0;
 c101c5c:	e3a03000 	mov	r3, #0
 c101c60:	ea000072 	b	c101e30 <selectorTask+0x210>
	}
	//PUESTO 2
	else if(tsPressedMsg.x > LCD_WIDTH/4 && tsPressedMsg.x < LCD_WIDTH*2/4 &&  64 < tsPressedMsg.y && tsPressedMsg.y < 128)
 c101c64:	e59f31dc 	ldr	r3, [pc, #476]	; c101e48 <selectorTask+0x228>
 c101c68:	e1d330b2 	ldrh	r3, [r3, #2]
 c101c6c:	e3530050 	cmp	r3, #80	; 0x50
 c101c70:	9a00000d 	bls	c101cac <selectorTask+0x8c>
 c101c74:	e59f31cc 	ldr	r3, [pc, #460]	; c101e48 <selectorTask+0x228>
 c101c78:	e1d330b2 	ldrh	r3, [r3, #2]
 c101c7c:	e353009f 	cmp	r3, #159	; 0x9f
 c101c80:	8a000009 	bhi	c101cac <selectorTask+0x8c>
 c101c84:	e59f31bc 	ldr	r3, [pc, #444]	; c101e48 <selectorTask+0x228>
 c101c88:	e1d330b4 	ldrh	r3, [r3, #4]
 c101c8c:	e3530040 	cmp	r3, #64	; 0x40
 c101c90:	9a000005 	bls	c101cac <selectorTask+0x8c>
 c101c94:	e59f31ac 	ldr	r3, [pc, #428]	; c101e48 <selectorTask+0x228>
 c101c98:	e1d330b4 	ldrh	r3, [r3, #4]
 c101c9c:	e353007f 	cmp	r3, #127	; 0x7f
 c101ca0:	8a000001 	bhi	c101cac <selectorTask+0x8c>
	{
		return 1;
 c101ca4:	e3a03001 	mov	r3, #1
 c101ca8:	ea000060 	b	c101e30 <selectorTask+0x210>

	}
	//PUESTO 3
	else if(tsPressedMsg.x > LCD_WIDTH*2/4 && tsPressedMsg.x < LCD_WIDTH*3/4 && 64 < tsPressedMsg.y && tsPressedMsg.y < 128)
 c101cac:	e59f3194 	ldr	r3, [pc, #404]	; c101e48 <selectorTask+0x228>
 c101cb0:	e1d330b2 	ldrh	r3, [r3, #2]
 c101cb4:	e35300a0 	cmp	r3, #160	; 0xa0
 c101cb8:	9a00000d 	bls	c101cf4 <selectorTask+0xd4>
 c101cbc:	e59f3184 	ldr	r3, [pc, #388]	; c101e48 <selectorTask+0x228>
 c101cc0:	e1d330b2 	ldrh	r3, [r3, #2]
 c101cc4:	e35300ef 	cmp	r3, #239	; 0xef
 c101cc8:	8a000009 	bhi	c101cf4 <selectorTask+0xd4>
 c101ccc:	e59f3174 	ldr	r3, [pc, #372]	; c101e48 <selectorTask+0x228>
 c101cd0:	e1d330b4 	ldrh	r3, [r3, #4]
 c101cd4:	e3530040 	cmp	r3, #64	; 0x40
 c101cd8:	9a000005 	bls	c101cf4 <selectorTask+0xd4>
 c101cdc:	e59f3164 	ldr	r3, [pc, #356]	; c101e48 <selectorTask+0x228>
 c101ce0:	e1d330b4 	ldrh	r3, [r3, #4]
 c101ce4:	e353007f 	cmp	r3, #127	; 0x7f
 c101ce8:	8a000001 	bhi	c101cf4 <selectorTask+0xd4>
	{
		return 2;
 c101cec:	e3a03002 	mov	r3, #2
 c101cf0:	ea00004e 	b	c101e30 <selectorTask+0x210>

	}
	//PUESTO 4
	else if(tsPressedMsg.x > LCD_WIDTH*3/4 && 64 < tsPressedMsg.y && tsPressedMsg.y < 128)
 c101cf4:	e59f314c 	ldr	r3, [pc, #332]	; c101e48 <selectorTask+0x228>
 c101cf8:	e1d330b2 	ldrh	r3, [r3, #2]
 c101cfc:	e35300f0 	cmp	r3, #240	; 0xf0
 c101d00:	9a000009 	bls	c101d2c <selectorTask+0x10c>
 c101d04:	e59f313c 	ldr	r3, [pc, #316]	; c101e48 <selectorTask+0x228>
 c101d08:	e1d330b4 	ldrh	r3, [r3, #4]
 c101d0c:	e3530040 	cmp	r3, #64	; 0x40
 c101d10:	9a000005 	bls	c101d2c <selectorTask+0x10c>
 c101d14:	e59f312c 	ldr	r3, [pc, #300]	; c101e48 <selectorTask+0x228>
 c101d18:	e1d330b4 	ldrh	r3, [r3, #4]
 c101d1c:	e353007f 	cmp	r3, #127	; 0x7f
 c101d20:	8a000001 	bhi	c101d2c <selectorTask+0x10c>
	{
		return 3;
 c101d24:	e3a03003 	mov	r3, #3
 c101d28:	ea000040 	b	c101e30 <selectorTask+0x210>

	}
	//PUESTO 5
	else if(tsPressedMsg.x > LCD_WIDTH/4 && tsPressedMsg.x < LCD_WIDTH*2/4 && 128 < tsPressedMsg.y && tsPressedMsg.y < 192)
 c101d2c:	e59f3114 	ldr	r3, [pc, #276]	; c101e48 <selectorTask+0x228>
 c101d30:	e1d330b2 	ldrh	r3, [r3, #2]
 c101d34:	e3530050 	cmp	r3, #80	; 0x50
 c101d38:	9a00000d 	bls	c101d74 <selectorTask+0x154>
 c101d3c:	e59f3104 	ldr	r3, [pc, #260]	; c101e48 <selectorTask+0x228>
 c101d40:	e1d330b2 	ldrh	r3, [r3, #2]
 c101d44:	e353009f 	cmp	r3, #159	; 0x9f
 c101d48:	8a000009 	bhi	c101d74 <selectorTask+0x154>
 c101d4c:	e59f30f4 	ldr	r3, [pc, #244]	; c101e48 <selectorTask+0x228>
 c101d50:	e1d330b4 	ldrh	r3, [r3, #4]
 c101d54:	e3530080 	cmp	r3, #128	; 0x80
 c101d58:	9a000005 	bls	c101d74 <selectorTask+0x154>
 c101d5c:	e59f30e4 	ldr	r3, [pc, #228]	; c101e48 <selectorTask+0x228>
 c101d60:	e1d330b4 	ldrh	r3, [r3, #4]
 c101d64:	e35300bf 	cmp	r3, #191	; 0xbf
 c101d68:	8a000001 	bhi	c101d74 <selectorTask+0x154>
	{
		return 4;
 c101d6c:	e3a03004 	mov	r3, #4
 c101d70:	ea00002e 	b	c101e30 <selectorTask+0x210>

	}
	//PUESTO 6
	else if(tsPressedMsg.x > LCD_WIDTH*2/4 && tsPressedMsg.x < LCD_WIDTH*3/4 && 128 < tsPressedMsg.y && tsPressedMsg.y < 192)
 c101d74:	e59f30cc 	ldr	r3, [pc, #204]	; c101e48 <selectorTask+0x228>
 c101d78:	e1d330b2 	ldrh	r3, [r3, #2]
 c101d7c:	e35300a0 	cmp	r3, #160	; 0xa0
 c101d80:	9a00000d 	bls	c101dbc <selectorTask+0x19c>
 c101d84:	e59f30bc 	ldr	r3, [pc, #188]	; c101e48 <selectorTask+0x228>
 c101d88:	e1d330b2 	ldrh	r3, [r3, #2]
 c101d8c:	e35300ef 	cmp	r3, #239	; 0xef
 c101d90:	8a000009 	bhi	c101dbc <selectorTask+0x19c>
 c101d94:	e59f30ac 	ldr	r3, [pc, #172]	; c101e48 <selectorTask+0x228>
 c101d98:	e1d330b4 	ldrh	r3, [r3, #4]
 c101d9c:	e3530080 	cmp	r3, #128	; 0x80
 c101da0:	9a000005 	bls	c101dbc <selectorTask+0x19c>
 c101da4:	e59f309c 	ldr	r3, [pc, #156]	; c101e48 <selectorTask+0x228>
 c101da8:	e1d330b4 	ldrh	r3, [r3, #4]
 c101dac:	e35300bf 	cmp	r3, #191	; 0xbf
 c101db0:	8a000001 	bhi	c101dbc <selectorTask+0x19c>
	{
		return 5;
 c101db4:	e3a03005 	mov	r3, #5
 c101db8:	ea00001c 	b	c101e30 <selectorTask+0x210>

	}
	//PUESTO 7
	else if(tsPressedMsg.x < LCD_WIDTH*3/4 && 128 < tsPressedMsg.y && tsPressedMsg.y < 192)
 c101dbc:	e59f3084 	ldr	r3, [pc, #132]	; c101e48 <selectorTask+0x228>
 c101dc0:	e1d330b2 	ldrh	r3, [r3, #2]
 c101dc4:	e35300ef 	cmp	r3, #239	; 0xef
 c101dc8:	8a000009 	bhi	c101df4 <selectorTask+0x1d4>
 c101dcc:	e59f3074 	ldr	r3, [pc, #116]	; c101e48 <selectorTask+0x228>
 c101dd0:	e1d330b4 	ldrh	r3, [r3, #4]
 c101dd4:	e3530080 	cmp	r3, #128	; 0x80
 c101dd8:	9a000005 	bls	c101df4 <selectorTask+0x1d4>
 c101ddc:	e59f3064 	ldr	r3, [pc, #100]	; c101e48 <selectorTask+0x228>
 c101de0:	e1d330b4 	ldrh	r3, [r3, #4]
 c101de4:	e35300bf 	cmp	r3, #191	; 0xbf
 c101de8:	8a000001 	bhi	c101df4 <selectorTask+0x1d4>
	{
		return 6;
 c101dec:	e3a03006 	mov	r3, #6
 c101df0:	ea00000e 	b	c101e30 <selectorTask+0x210>

	}
	//PUESTO 8
	else if( tsPressedMsg.x > LCD_WIDTH*3/4 && 128 < tsPressedMsg.y && tsPressedMsg.y < 192 )
 c101df4:	e59f304c 	ldr	r3, [pc, #76]	; c101e48 <selectorTask+0x228>
 c101df8:	e1d330b2 	ldrh	r3, [r3, #2]
 c101dfc:	e35300f0 	cmp	r3, #240	; 0xf0
 c101e00:	9a000009 	bls	c101e2c <selectorTask+0x20c>
 c101e04:	e59f303c 	ldr	r3, [pc, #60]	; c101e48 <selectorTask+0x228>
 c101e08:	e1d330b4 	ldrh	r3, [r3, #4]
 c101e0c:	e3530080 	cmp	r3, #128	; 0x80
 c101e10:	9a000005 	bls	c101e2c <selectorTask+0x20c>
 c101e14:	e59f302c 	ldr	r3, [pc, #44]	; c101e48 <selectorTask+0x228>
 c101e18:	e1d330b4 	ldrh	r3, [r3, #4]
 c101e1c:	e35300bf 	cmp	r3, #191	; 0xbf
 c101e20:	8a000001 	bhi	c101e2c <selectorTask+0x20c>
	{
		return 7;
 c101e24:	e3a03007 	mov	r3, #7
 c101e28:	ea000000 	b	c101e30 <selectorTask+0x210>
	}
	return -1;
 c101e2c:	e3a030ff 	mov	r3, #255	; 0xff
 c101e30:	e1a03c03 	lsl	r3, r3, #24
 c101e34:	e1a03c43 	asr	r3, r3, #24

}
 c101e38:	e1a00003 	mov	r0, r3
 c101e3c:	e24bd00c 	sub	sp, fp, #12
 c101e40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101e44:	e12fff1e 	bx	lr
 c101e48:	0c10a5b4 	.word	0x0c10a5b4

0c101e4c <setup>:

/*
** Inicializa flags, mailboxes y variables globales
*/
void setup( void )
{
 c101e4c:	e1a0c00d 	mov	ip, sp
 c101e50:	e92dd800 	push	{fp, ip, lr, pc}
 c101e54:	e24cb004 	sub	fp, ip, #4
    kpPressedMsg.flag  = FALSE;
 c101e58:	e59f3070 	ldr	r3, [pc, #112]	; c101ed0 <setup+0x84>
 c101e5c:	e3a02000 	mov	r2, #0
 c101e60:	e5c32000 	strb	r2, [r3]
    kpPressedMsg.licPlateInput = FALSE;
 c101e64:	e59f3064 	ldr	r3, [pc, #100]	; c101ed0 <setup+0x84>
 c101e68:	e3a02000 	mov	r2, #0
 c101e6c:	e5c32001 	strb	r2, [r3, #1]
    kpPressedMsg.cents = 0;
 c101e70:	e59f3058 	ldr	r3, [pc, #88]	; c101ed0 <setup+0x84>
 c101e74:	e3a02000 	mov	r2, #0
 c101e78:	e5c32002 	strb	r2, [r3, #2]

    tsPressedMsg.flag     = FALSE;
 c101e7c:	e59f3050 	ldr	r3, [pc, #80]	; c101ed4 <setup+0x88>
 c101e80:	e3a02000 	mov	r2, #0
 c101e84:	e5c32000 	strb	r2, [r3]
    tsPressedMsg.x        = 0;
 c101e88:	e59f3044 	ldr	r3, [pc, #68]	; c101ed4 <setup+0x88>
 c101e8c:	e3a02000 	mov	r2, #0
 c101e90:	e1c320b2 	strh	r2, [r3, #2]
    tsPressedMsg.y        = 0;
 c101e94:	e59f3038 	ldr	r3, [pc, #56]	; c101ed4 <setup+0x88>
 c101e98:	e3a02000 	mov	r2, #0
 c101e9c:	e1c320b4 	strh	r2, [r3, #4]

    coinsMoverMsg.flag    = FALSE;
 c101ea0:	e59f3030 	ldr	r3, [pc, #48]	; c101ed8 <setup+0x8c>
 c101ea4:	e3a02000 	mov	r2, #0
 c101ea8:	e5c32000 	strb	r2, [r3]
    coinsMoverMsg.accept  = FALSE;
 c101eac:	e59f3024 	ldr	r3, [pc, #36]	; c101ed8 <setup+0x8c>
 c101eb0:	e3a02000 	mov	r2, #0
 c101eb4:	e5c32001 	strb	r2, [r3, #1]

    ticketMsg.flag       = FALSE;
 c101eb8:	e59f301c 	ldr	r3, [pc, #28]	; c101edc <setup+0x90>
 c101ebc:	e3a02000 	mov	r2, #0
 c101ec0:	e5c32000 	strb	r2, [r3]
}
 c101ec4:	e24bd00c 	sub	sp, fp, #12
 c101ec8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ecc:	e12fff1e 	bx	lr
 c101ed0:	0c10a5bc 	.word	0x0c10a5bc
 c101ed4:	0c10a5b4 	.word	0x0c10a5b4
 c101ed8:	0c10a5d0 	.word	0x0c10a5d0
 c101edc:	0c10a5c0 	.word	0x0c10a5c0

0c101ee0 <getMonthdays>:

uint8 getMonthdays(uint8 month){
 c101ee0:	e1a0c00d 	mov	ip, sp
 c101ee4:	e92dd800 	push	{fp, ip, lr, pc}
 c101ee8:	e24cb004 	sub	fp, ip, #4
 c101eec:	e24dd010 	sub	sp, sp, #16
 c101ef0:	e1a03000 	mov	r3, r0
 c101ef4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint8 totdays;
	if(month == 2)
 c101ef8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101efc:	e3530002 	cmp	r3, #2
 c101f00:	1a000002 	bne	c101f10 <getMonthdays+0x30>
		totdays = 28;
 c101f04:	e3a0301c 	mov	r3, #28
 c101f08:	e54b300d 	strb	r3, [fp, #-13]
 c101f0c:	ea000012 	b	c101f5c <getMonthdays+0x7c>
	else if((month < 8 && month%2) || (month <= 8 && !month%2))
 c101f10:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101f14:	e3530007 	cmp	r3, #7
 c101f18:	8a000004 	bhi	c101f30 <getMonthdays+0x50>
 c101f1c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101f20:	e2033001 	and	r3, r3, #1
 c101f24:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f28:	e3530000 	cmp	r3, #0
 c101f2c:	1a000005 	bne	c101f48 <getMonthdays+0x68>
 c101f30:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101f34:	e3530008 	cmp	r3, #8
 c101f38:	8a000005 	bhi	c101f54 <getMonthdays+0x74>
 c101f3c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101f40:	e3530000 	cmp	r3, #0
 c101f44:	1a000002 	bne	c101f54 <getMonthdays+0x74>
		totdays = 31;
 c101f48:	e3a0301f 	mov	r3, #31
 c101f4c:	e54b300d 	strb	r3, [fp, #-13]
 c101f50:	ea000001 	b	c101f5c <getMonthdays+0x7c>
	else
		totdays = 30;
 c101f54:	e3a0301e 	mov	r3, #30
 c101f58:	e54b300d 	strb	r3, [fp, #-13]

	return totdays;
 c101f5c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c101f60:	e1a00003 	mov	r0, r3
 c101f64:	e24bd00c 	sub	sp, fp, #12
 c101f68:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101f6c:	e12fff1e 	bx	lr

0c101f70 <updateDeadline>:


void updateDeadline(uint8 credit, rtc_time_t * deadline)
{
 c101f70:	e1a0c00d 	mov	ip, sp
 c101f74:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c101f78:	e24cb004 	sub	fp, ip, #4
 c101f7c:	e24dd014 	sub	sp, sp, #20
 c101f80:	e1a03000 	mov	r3, r0
 c101f84:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c101f88:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
	uint8 hours = credit/60;
 c101f8c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c101f90:	e59f31b4 	ldr	r3, [pc, #436]	; c10214c <updateDeadline+0x1dc>
 c101f94:	e0831392 	umull	r1, r3, r2, r3
 c101f98:	e1a032a3 	lsr	r3, r3, #5
 c101f9c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint8 mins = credit%60;
 c101fa0:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c101fa4:	e59f31a0 	ldr	r3, [pc, #416]	; c10214c <updateDeadline+0x1dc>
 c101fa8:	e0831392 	umull	r1, r3, r2, r3
 c101fac:	e1a012a3 	lsr	r1, r3, #5
 c101fb0:	e1a03001 	mov	r3, r1
 c101fb4:	e1a03203 	lsl	r3, r3, #4
 c101fb8:	e0613003 	rsb	r3, r1, r3
 c101fbc:	e1a03103 	lsl	r3, r3, #2
 c101fc0:	e0633002 	rsb	r3, r3, r2
 c101fc4:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea

	if((deadline->min += mins) >= 60){
 c101fc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101fcc:	e5d32001 	ldrb	r2, [r3, #1]
 c101fd0:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c101fd4:	e0823003 	add	r3, r2, r3
 c101fd8:	e20320ff 	and	r2, r3, #255	; 0xff
 c101fdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101fe0:	e5c32001 	strb	r2, [r3, #1]
 c101fe4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101fe8:	e5d33001 	ldrb	r3, [r3, #1]
 c101fec:	e353003b 	cmp	r3, #59	; 0x3b
 c101ff0:	9a000012 	bls	c102040 <updateDeadline+0xd0>
		deadline->hour++;
 c101ff4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101ff8:	e5d33002 	ldrb	r3, [r3, #2]
 c101ffc:	e2833001 	add	r3, r3, #1
 c102000:	e20320ff 	and	r2, r3, #255	; 0xff
 c102004:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102008:	e5c32002 	strb	r2, [r3, #2]
		deadline->min %= 60;
 c10200c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102010:	e5d32001 	ldrb	r2, [r3, #1]
 c102014:	e59f3130 	ldr	r3, [pc, #304]	; c10214c <updateDeadline+0x1dc>
 c102018:	e0831392 	umull	r1, r3, r2, r3
 c10201c:	e1a012a3 	lsr	r1, r3, #5
 c102020:	e1a03001 	mov	r3, r1
 c102024:	e1a03203 	lsl	r3, r3, #4
 c102028:	e0613003 	rsb	r3, r1, r3
 c10202c:	e1a03103 	lsl	r3, r3, #2
 c102030:	e0633002 	rsb	r3, r3, r2
 c102034:	e20320ff 	and	r2, r3, #255	; 0xff
 c102038:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10203c:	e5c32001 	strb	r2, [r3, #1]
	}
	if((deadline->hour += hours) >= 24){
 c102040:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102044:	e5d32002 	ldrb	r2, [r3, #2]
 c102048:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10204c:	e0823003 	add	r3, r2, r3
 c102050:	e20320ff 	and	r2, r3, #255	; 0xff
 c102054:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102058:	e5c32002 	strb	r2, [r3, #2]
 c10205c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102060:	e5d33002 	ldrb	r3, [r3, #2]
 c102064:	e3530017 	cmp	r3, #23
 c102068:	9a000018 	bls	c1020d0 <updateDeadline+0x160>
		deadline->hour %= 24;
 c10206c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102070:	e5d32002 	ldrb	r2, [r3, #2]
 c102074:	e59f30d4 	ldr	r3, [pc, #212]	; c102150 <updateDeadline+0x1e0>
 c102078:	e0831392 	umull	r1, r3, r2, r3
 c10207c:	e1a01223 	lsr	r1, r3, #4
 c102080:	e1a03001 	mov	r3, r1
 c102084:	e1a03083 	lsl	r3, r3, #1
 c102088:	e0833001 	add	r3, r3, r1
 c10208c:	e1a03183 	lsl	r3, r3, #3
 c102090:	e0633002 	rsb	r3, r3, r2
 c102094:	e20320ff 	and	r2, r3, #255	; 0xff
 c102098:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10209c:	e5c32002 	strb	r2, [r3, #2]
		deadline->mday++;
 c1020a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020a4:	e5d33003 	ldrb	r3, [r3, #3]
 c1020a8:	e2833001 	add	r3, r3, #1
 c1020ac:	e20320ff 	and	r2, r3, #255	; 0xff
 c1020b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020b4:	e5c32003 	strb	r2, [r3, #3]
		deadline->wday++;
 c1020b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020bc:	e5d33004 	ldrb	r3, [r3, #4]
 c1020c0:	e2833001 	add	r3, r3, #1
 c1020c4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1020c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020cc:	e5c32004 	strb	r2, [r3, #4]
	}
	if(deadline->mday > getMonthdays(deadline->mon)){
 c1020d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020d4:	e5d34003 	ldrb	r4, [r3, #3]
 c1020d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020dc:	e5d33005 	ldrb	r3, [r3, #5]
 c1020e0:	e1a00003 	mov	r0, r3
 c1020e4:	ebffff7d 	bl	c101ee0 <getMonthdays>
 c1020e8:	e1a03000 	mov	r3, r0
 c1020ec:	e1540003 	cmp	r4, r3
 c1020f0:	9a000008 	bls	c102118 <updateDeadline+0x1a8>
		deadline->mon++;
 c1020f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1020f8:	e5d33005 	ldrb	r3, [r3, #5]
 c1020fc:	e2833001 	add	r3, r3, #1
 c102100:	e20320ff 	and	r2, r3, #255	; 0xff
 c102104:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102108:	e5c32005 	strb	r2, [r3, #5]
		deadline->mday = 1;
 c10210c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102110:	e3a02001 	mov	r2, #1
 c102114:	e5c32003 	strb	r2, [r3, #3]
	}
	if(deadline->mon > 12)
 c102118:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10211c:	e5d33005 	ldrb	r3, [r3, #5]
 c102120:	e353000c 	cmp	r3, #12
 c102124:	9a000005 	bls	c102140 <updateDeadline+0x1d0>
		deadline->year++;
 c102128:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10212c:	e5d33006 	ldrb	r3, [r3, #6]
 c102130:	e2833001 	add	r3, r3, #1
 c102134:	e20320ff 	and	r2, r3, #255	; 0xff
 c102138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10213c:	e5c32006 	strb	r2, [r3, #6]


}
 c102140:	e24bd010 	sub	sp, fp, #16
 c102144:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102148:	e12fff1e 	bx	lr
 c10214c:	88888889 	.word	0x88888889
 c102150:	aaaaaaab 	.word	0xaaaaaaab

0c102154 <getLicPlate>:

uint8 getLicPlate(uint16 * licPlate)
{
 c102154:	e1a0c00d 	mov	ip, sp
 c102158:	e92dd800 	push	{fp, ip, lr, pc}
 c10215c:	e24cb004 	sub	fp, ip, #4
 c102160:	e24dd008 	sub	sp, sp, #8
 c102164:	e50b0010 	str	r0, [fp, #-16]
	static uint8 licPlatePoint =0;

	if(kpPressedMsg.keyPress == KEYPAD_FAILURE)
 c102168:	e59f30a4 	ldr	r3, [pc, #164]	; c102214 <getLicPlate+0xc0>
 c10216c:	e5d33003 	ldrb	r3, [r3, #3]
 c102170:	e35300ff 	cmp	r3, #255	; 0xff
 c102174:	1a000001 	bne	c102180 <getLicPlate+0x2c>
		return 0;
 c102178:	e3a03000 	mov	r3, #0
 c10217c:	ea000020 	b	c102204 <getLicPlate+0xb0>
	if(licPlatePoint == 5)
 c102180:	e59f3090 	ldr	r3, [pc, #144]	; c102218 <getLicPlate+0xc4>
 c102184:	e5d33000 	ldrb	r3, [r3]
 c102188:	e3530005 	cmp	r3, #5
 c10218c:	1a000001 	bne	c102198 <getLicPlate+0x44>
			return 0;
 c102190:	e3a03000 	mov	r3, #0
 c102194:	ea00001a 	b	c102204 <getLicPlate+0xb0>

	*licPlate |= ( kpPressedMsg.keyPress << (licPlatePoint*4)); //hacemos un OR entre licPlate y la tecla pulsada desplazada 0,4,8,12
 c102198:	e51b3010 	ldr	r3, [fp, #-16]
 c10219c:	e1d330b0 	ldrh	r3, [r3]
 c1021a0:	e1a03803 	lsl	r3, r3, #16
 c1021a4:	e1a02823 	lsr	r2, r3, #16
 c1021a8:	e59f3064 	ldr	r3, [pc, #100]	; c102214 <getLicPlate+0xc0>
 c1021ac:	e5d33003 	ldrb	r3, [r3, #3]
 c1021b0:	e1a01003 	mov	r1, r3
 c1021b4:	e59f305c 	ldr	r3, [pc, #92]	; c102218 <getLicPlate+0xc4>
 c1021b8:	e5d33000 	ldrb	r3, [r3]
 c1021bc:	e1a03103 	lsl	r3, r3, #2
 c1021c0:	e1a03311 	lsl	r3, r1, r3
 c1021c4:	e1a03803 	lsl	r3, r3, #16
 c1021c8:	e1a03823 	lsr	r3, r3, #16
 c1021cc:	e1823003 	orr	r3, r2, r3
 c1021d0:	e1a03803 	lsl	r3, r3, #16
 c1021d4:	e1a03823 	lsr	r3, r3, #16
 c1021d8:	e1a03803 	lsl	r3, r3, #16
 c1021dc:	e1a02823 	lsr	r2, r3, #16
 c1021e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1021e4:	e1c320b0 	strh	r2, [r3]
	licPlatePoint++;
 c1021e8:	e59f3028 	ldr	r3, [pc, #40]	; c102218 <getLicPlate+0xc4>
 c1021ec:	e5d33000 	ldrb	r3, [r3]
 c1021f0:	e2833001 	add	r3, r3, #1
 c1021f4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1021f8:	e59f3018 	ldr	r3, [pc, #24]	; c102218 <getLicPlate+0xc4>
 c1021fc:	e5c32000 	strb	r2, [r3]
	return 1;
 c102200:	e3a03001 	mov	r3, #1
}
 c102204:	e1a00003 	mov	r0, r3
 c102208:	e24bd00c 	sub	sp, fp, #12
 c10220c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102210:	e12fff1e 	bx	lr
 c102214:	0c10a5bc 	.word	0x0c10a5bc
 c102218:	0c10a580 	.word	0x0c10a580

0c10221c <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c10221c:	e1a0c00d 	mov	ip, sp
 c102220:	e92dd800 	push	{fp, ip, lr, pc}
 c102224:	e24cb004 	sub	fp, ip, #4
 c102228:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );
 c10222c:	e59f31fc 	ldr	r3, [pc, #508]	; c102430 <keypad_scan+0x214>
 c102230:	e5d33000 	ldrb	r3, [r3]
 c102234:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c102238:	e55b300d 	ldrb	r3, [fp, #-13]
 c10223c:	e203300f 	and	r3, r3, #15
 c102240:	e353000f 	cmp	r3, #15
 c102244:	0a000017 	beq	c1022a8 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c102248:	e55b300d 	ldrb	r3, [fp, #-13]
 c10224c:	e2033008 	and	r3, r3, #8
 c102250:	e3530000 	cmp	r3, #0
 c102254:	1a000001 	bne	c102260 <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c102258:	e3a03000 	mov	r3, #0
 c10225c:	ea00006f 	b	c102420 <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c102260:	e55b300d 	ldrb	r3, [fp, #-13]
 c102264:	e2033004 	and	r3, r3, #4
 c102268:	e3530000 	cmp	r3, #0
 c10226c:	1a000001 	bne	c102278 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c102270:	e3a03001 	mov	r3, #1
 c102274:	ea000069 	b	c102420 <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c102278:	e55b300d 	ldrb	r3, [fp, #-13]
 c10227c:	e2033002 	and	r3, r3, #2
 c102280:	e3530000 	cmp	r3, #0
 c102284:	1a000001 	bne	c102290 <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c102288:	e3a03002 	mov	r3, #2
 c10228c:	ea000063 	b	c102420 <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c102290:	e55b300d 	ldrb	r3, [fp, #-13]
 c102294:	e2033001 	and	r3, r3, #1
 c102298:	e3530000 	cmp	r3, #0
 c10229c:	1a000001 	bne	c1022a8 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c1022a0:	e3a03003 	mov	r3, #3
 c1022a4:	ea00005d 	b	c102420 <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0x1a );
 c1022a8:	e59f3184 	ldr	r3, [pc, #388]	; c102434 <keypad_scan+0x218>
 c1022ac:	e5d33000 	ldrb	r3, [r3]
 c1022b0:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c1022b4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1022b8:	e203300f 	and	r3, r3, #15
 c1022bc:	e353000f 	cmp	r3, #15
 c1022c0:	0a000017 	beq	c102324 <keypad_scan+0x108>
	{
		if( (aux & 0x8) == 0 )
 c1022c4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1022c8:	e2033008 	and	r3, r3, #8
 c1022cc:	e3530000 	cmp	r3, #0
 c1022d0:	1a000001 	bne	c1022dc <keypad_scan+0xc0>
			return KEYPAD_KEY4;
 c1022d4:	e3a03004 	mov	r3, #4
 c1022d8:	ea000050 	b	c102420 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c1022dc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1022e0:	e2033004 	and	r3, r3, #4
 c1022e4:	e3530000 	cmp	r3, #0
 c1022e8:	1a000001 	bne	c1022f4 <keypad_scan+0xd8>
			return KEYPAD_KEY5;
 c1022ec:	e3a03005 	mov	r3, #5
 c1022f0:	ea00004a 	b	c102420 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c1022f4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1022f8:	e2033002 	and	r3, r3, #2
 c1022fc:	e3530000 	cmp	r3, #0
 c102300:	1a000001 	bne	c10230c <keypad_scan+0xf0>
			return KEYPAD_KEY6;
 c102304:	e3a03006 	mov	r3, #6
 c102308:	ea000044 	b	c102420 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c10230c:	e55b300d 	ldrb	r3, [fp, #-13]
 c102310:	e2033001 	and	r3, r3, #1
 c102314:	e3530000 	cmp	r3, #0
 c102318:	1a000001 	bne	c102324 <keypad_scan+0x108>
			return KEYPAD_KEY7;
 c10231c:	e3a03007 	mov	r3, #7
 c102320:	ea00003e 	b	c102420 <keypad_scan+0x204>
	}
	aux = *( KEYPAD_ADDR + 0x16 );
 c102324:	e59f310c 	ldr	r3, [pc, #268]	; c102438 <keypad_scan+0x21c>
 c102328:	e5d33000 	ldrb	r3, [r3]
 c10232c:	e54b300d 	strb	r3, [fp, #-13]
		if( (aux & 0x0f) != 0x0f )
 c102330:	e55b300d 	ldrb	r3, [fp, #-13]
 c102334:	e203300f 	and	r3, r3, #15
 c102338:	e353000f 	cmp	r3, #15
 c10233c:	0a000017 	beq	c1023a0 <keypad_scan+0x184>
		{
			if( (aux & 0x8) == 0 )
 c102340:	e55b300d 	ldrb	r3, [fp, #-13]
 c102344:	e2033008 	and	r3, r3, #8
 c102348:	e3530000 	cmp	r3, #0
 c10234c:	1a000001 	bne	c102358 <keypad_scan+0x13c>
				return KEYPAD_KEY8;
 c102350:	e3a03008 	mov	r3, #8
 c102354:	ea000031 	b	c102420 <keypad_scan+0x204>
			else if( (aux & 0x4) == 0 )
 c102358:	e55b300d 	ldrb	r3, [fp, #-13]
 c10235c:	e2033004 	and	r3, r3, #4
 c102360:	e3530000 	cmp	r3, #0
 c102364:	1a000001 	bne	c102370 <keypad_scan+0x154>
				return KEYPAD_KEY9;
 c102368:	e3a03009 	mov	r3, #9
 c10236c:	ea00002b 	b	c102420 <keypad_scan+0x204>
			else if( (aux & 0x2) == 0 )
 c102370:	e55b300d 	ldrb	r3, [fp, #-13]
 c102374:	e2033002 	and	r3, r3, #2
 c102378:	e3530000 	cmp	r3, #0
 c10237c:	1a000001 	bne	c102388 <keypad_scan+0x16c>
				return KEYPAD_KEYA;
 c102380:	e3a0300a 	mov	r3, #10
 c102384:	ea000025 	b	c102420 <keypad_scan+0x204>
			else if( (aux & 0x1) == 0 )
 c102388:	e55b300d 	ldrb	r3, [fp, #-13]
 c10238c:	e2033001 	and	r3, r3, #1
 c102390:	e3530000 	cmp	r3, #0
 c102394:	1a000001 	bne	c1023a0 <keypad_scan+0x184>
				return KEYPAD_KEYB;
 c102398:	e3a0300b 	mov	r3, #11
 c10239c:	ea00001f 	b	c102420 <keypad_scan+0x204>
		}
	aux = *( KEYPAD_ADDR + 0x0e );
 c1023a0:	e59f3094 	ldr	r3, [pc, #148]	; c10243c <keypad_scan+0x220>
 c1023a4:	e5d33000 	ldrb	r3, [r3]
 c1023a8:	e54b300d 	strb	r3, [fp, #-13]
			if( (aux & 0x0f) != 0x0f )
 c1023ac:	e55b300d 	ldrb	r3, [fp, #-13]
 c1023b0:	e203300f 	and	r3, r3, #15
 c1023b4:	e353000f 	cmp	r3, #15
 c1023b8:	0a000017 	beq	c10241c <keypad_scan+0x200>
			{
				if( (aux & 0x8) == 0 )
 c1023bc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1023c0:	e2033008 	and	r3, r3, #8
 c1023c4:	e3530000 	cmp	r3, #0
 c1023c8:	1a000001 	bne	c1023d4 <keypad_scan+0x1b8>
					return KEYPAD_KEYC;
 c1023cc:	e3a0300c 	mov	r3, #12
 c1023d0:	ea000012 	b	c102420 <keypad_scan+0x204>
				else if( (aux & 0x4) == 0 )
 c1023d4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1023d8:	e2033004 	and	r3, r3, #4
 c1023dc:	e3530000 	cmp	r3, #0
 c1023e0:	1a000001 	bne	c1023ec <keypad_scan+0x1d0>
					return KEYPAD_KEYD;
 c1023e4:	e3a0300d 	mov	r3, #13
 c1023e8:	ea00000c 	b	c102420 <keypad_scan+0x204>
				else if( (aux & 0x2) == 0 )
 c1023ec:	e55b300d 	ldrb	r3, [fp, #-13]
 c1023f0:	e2033002 	and	r3, r3, #2
 c1023f4:	e3530000 	cmp	r3, #0
 c1023f8:	1a000001 	bne	c102404 <keypad_scan+0x1e8>
					return KEYPAD_KEYE;
 c1023fc:	e3a0300e 	mov	r3, #14
 c102400:	ea000006 	b	c102420 <keypad_scan+0x204>
				else if( (aux & 0x1) == 0 )
 c102404:	e55b300d 	ldrb	r3, [fp, #-13]
 c102408:	e2033001 	and	r3, r3, #1
 c10240c:	e3530000 	cmp	r3, #0
 c102410:	1a000001 	bne	c10241c <keypad_scan+0x200>
					return KEYPAD_KEYF;
 c102414:	e3a0300f 	mov	r3, #15
 c102418:	ea000000 	b	c102420 <keypad_scan+0x204>
			}
    return KEYPAD_FAILURE;
 c10241c:	e3a030ff 	mov	r3, #255	; 0xff
}
 c102420:	e1a00003 	mov	r0, r3
 c102424:	e24bd00c 	sub	sp, fp, #12
 c102428:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10242c:	e12fff1e 	bx	lr
 c102430:	0600001c 	.word	0x0600001c
 c102434:	0600001a 	.word	0x0600001a
 c102438:	06000016 	.word	0x06000016
 c10243c:	0600000e 	.word	0x0600000e

0c102440 <keypad_pressed>:

uint8 keypad_pressed( void )
{
 c102440:	e1a0c00d 	mov	ip, sp
 c102444:	e92dd800 	push	{fp, ip, lr, pc}
 c102448:	e24cb004 	sub	fp, ip, #4
    return keypad_scan() != KEYPAD_FAILURE;
 c10244c:	ebffff72 	bl	c10221c <keypad_scan>
 c102450:	e1a03000 	mov	r3, r0
 c102454:	e35300ff 	cmp	r3, #255	; 0xff
 c102458:	03a03000 	moveq	r3, #0
 c10245c:	13a03001 	movne	r3, #1
 c102460:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c102464:	e1a00003 	mov	r0, r3
 c102468:	e24bd00c 	sub	sp, fp, #12
 c10246c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102470:	e12fff1e 	bx	lr

0c102474 <keypad_open>:

void keypad_open( void (*isr)(void) )
{
 c102474:	e1a0c00d 	mov	ip, sp
 c102478:	e92dd800 	push	{fp, ip, lr, pc}
 c10247c:	e24cb004 	sub	fp, ip, #4
 c102480:	e24dd008 	sub	sp, sp, #8
 c102484:	e50b0010 	str	r0, [fp, #-16]
	pISR_KEYPAD = (uint32) isr;
 c102488:	e59f3044 	ldr	r3, [pc, #68]	; c1024d4 <keypad_open+0x60>
 c10248c:	e51b2010 	ldr	r2, [fp, #-16]
 c102490:	e5832000 	str	r2, [r3]
	EXTINTPND = 0x0;
 c102494:	e59f303c 	ldr	r3, [pc, #60]	; c1024d8 <keypad_open+0x64>
 c102498:	e3a02000 	mov	r2, #0
 c10249c:	e5832000 	str	r2, [r3]
	I_ISPC |= BIT_EINT1;
 c1024a0:	e59f3034 	ldr	r3, [pc, #52]	; c1024dc <keypad_open+0x68>
 c1024a4:	e59f2030 	ldr	r2, [pc, #48]	; c1024dc <keypad_open+0x68>
 c1024a8:	e5922000 	ldr	r2, [r2]
 c1024ac:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c1024b0:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_EINT1);
 c1024b4:	e59f3024 	ldr	r3, [pc, #36]	; c1024e0 <keypad_open+0x6c>
 c1024b8:	e59f2020 	ldr	r2, [pc, #32]	; c1024e0 <keypad_open+0x6c>
 c1024bc:	e5922000 	ldr	r2, [r2]
 c1024c0:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c1024c4:	e5832000 	str	r2, [r3]
}
 c1024c8:	e24bd00c 	sub	sp, fp, #12
 c1024cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1024d0:	e12fff1e 	bx	lr
 c1024d4:	0c7fff80 	.word	0x0c7fff80
 c1024d8:	01d20054 	.word	0x01d20054
 c1024dc:	01e00024 	.word	0x01e00024
 c1024e0:	01e0000c 	.word	0x01e0000c

0c1024e4 <keypad_close>:

void keypad_close( void )
{
 c1024e4:	e1a0c00d 	mov	ip, sp
 c1024e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1024ec:	e24cb004 	sub	fp, ip, #4
	INTMSK |= (BIT_EINT1);
 c1024f0:	e59f3024 	ldr	r3, [pc, #36]	; c10251c <keypad_close+0x38>
 c1024f4:	e59f2020 	ldr	r2, [pc, #32]	; c10251c <keypad_close+0x38>
 c1024f8:	e5922000 	ldr	r2, [r2]
 c1024fc:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c102500:	e5832000 	str	r2, [r3]
	pISR_KEYPAD  = (uint32) isr_KEYPAD_dummy;
 c102504:	e59f3014 	ldr	r3, [pc, #20]	; c102520 <keypad_close+0x3c>
 c102508:	e59f2014 	ldr	r2, [pc, #20]	; c102524 <keypad_close+0x40>
 c10250c:	e5832000 	str	r2, [r3]
}
 c102510:	e24bd00c 	sub	sp, fp, #12
 c102514:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102518:	e12fff1e 	bx	lr
 c10251c:	01e0000c 	.word	0x01e0000c
 c102520:	0c7fff80 	.word	0x0c7fff80
 c102524:	0c105dcc 	.word	0x0c105dcc

0c102528 <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c102528:	e1a0c00d 	mov	ip, sp
 c10252c:	e92dd800 	push	{fp, ip, lr, pc}
 c102530:	e24cb004 	sub	fp, ip, #4
    timers_init();  
 c102534:	eb000f7d 	bl	c106330 <timers_init>
};
 c102538:	e24bd00c 	sub	sp, fp, #12
 c10253c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102540:	e12fff1e 	bx	lr

0c102544 <keypad_getchar>:

uint8 keypad_getchar( void )
{
 c102544:	e1a0c00d 	mov	ip, sp
 c102548:	e92dd800 	push	{fp, ip, lr, pc}
 c10254c:	e24cb004 	sub	fp, ip, #4
 c102550:	e24dd008 	sub	sp, sp, #8
	uint8 scan_code,aux= keypad_scan();
 c102554:	ebffff30 	bl	c10221c <keypad_scan>
 c102558:	e1a03000 	mov	r3, r0
 c10255c:	e54b300d 	strb	r3, [fp, #-13]
	while((aux) == KEYPAD_FAILURE){
 c102560:	ea000002 	b	c102570 <keypad_getchar+0x2c>
		aux = keypad_scan();
 c102564:	ebffff2c 	bl	c10221c <keypad_scan>
 c102568:	e1a03000 	mov	r3, r0
 c10256c:	e54b300d 	strb	r3, [fp, #-13]
};

uint8 keypad_getchar( void )
{
	uint8 scan_code,aux= keypad_scan();
	while((aux) == KEYPAD_FAILURE){
 c102570:	e55b300d 	ldrb	r3, [fp, #-13]
 c102574:	e35300ff 	cmp	r3, #255	; 0xff
 c102578:	0afffff9 	beq	c102564 <keypad_getchar+0x20>
		aux = keypad_scan();
	}
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c10257c:	e3a0001e 	mov	r0, #30
 c102580:	eb00104c 	bl	c1066b8 <sw_delay_ms>
	scan_code = aux;
 c102584:	e55b300d 	ldrb	r3, [fp, #-13]
 c102588:	e54b300e 	strb	r3, [fp, #-14]
	while(keypad_scan() != KEYPAD_FAILURE);
 c10258c:	e1a00000 	nop			; (mov r0, r0)
 c102590:	ebffff21 	bl	c10221c <keypad_scan>
 c102594:	e1a03000 	mov	r3, r0
 c102598:	e35300ff 	cmp	r3, #255	; 0xff
 c10259c:	1afffffb 	bne	c102590 <keypad_getchar+0x4c>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c1025a0:	e3a00064 	mov	r0, #100	; 0x64
 c1025a4:	eb001043 	bl	c1066b8 <sw_delay_ms>
	return scan_code;
 c1025a8:	e55b300e 	ldrb	r3, [fp, #-14]
}
 c1025ac:	e1a00003 	mov	r0, r3
 c1025b0:	e24bd00c 	sub	sp, fp, #12
 c1025b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1025b8:	e12fff1e 	bx	lr

0c1025bc <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms )
{
 c1025bc:	e1a0c00d 	mov	ip, sp
 c1025c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1025c4:	e24cb004 	sub	fp, ip, #4
 c1025c8:	e24dd010 	sub	sp, sp, #16
 c1025cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	uint8 scancode;

	while( (keypad_scan() == KEYPAD_FAILURE ));
 c1025d0:	e1a00000 	nop			; (mov r0, r0)
 c1025d4:	ebffff10 	bl	c10221c <keypad_scan>
 c1025d8:	e1a03000 	mov	r3, r0
 c1025dc:	e35300ff 	cmp	r3, #255	; 0xff
 c1025e0:	0afffffb 	beq	c1025d4 <keypad_getchartime+0x18>
	timer3_start();
 c1025e4:	eb001070 	bl	c1067ac <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1025e8:	e3a0001e 	mov	r0, #30
 c1025ec:	eb001031 	bl	c1066b8 <sw_delay_ms>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1025f0:	e3a0001e 	mov	r0, #30
 c1025f4:	eb00102f 	bl	c1066b8 <sw_delay_ms>

	scancode = keypad_scan();
 c1025f8:	ebffff07 	bl	c10221c <keypad_scan>
 c1025fc:	e1a03000 	mov	r3, r0
 c102600:	e54b300d 	strb	r3, [fp, #-13]

	while(keypad_scan() != KEYPAD_FAILURE );
 c102604:	e1a00000 	nop			; (mov r0, r0)
 c102608:	ebffff03 	bl	c10221c <keypad_scan>
 c10260c:	e1a03000 	mov	r3, r0
 c102610:	e35300ff 	cmp	r3, #255	; 0xff
 c102614:	1afffffb 	bne	c102608 <keypad_getchartime+0x4c>
	*ms = timer3_stop() / 10;
 c102618:	eb00108f 	bl	c10685c <timer3_stop>
 c10261c:	e1a03000 	mov	r3, r0
 c102620:	e1a02003 	mov	r2, r3
 c102624:	e59f3030 	ldr	r3, [pc, #48]	; c10265c <keypad_getchartime+0xa0>
 c102628:	e0831392 	umull	r1, r3, r2, r3
 c10262c:	e1a031a3 	lsr	r3, r3, #3
 c102630:	e1a03803 	lsl	r3, r3, #16
 c102634:	e1a02823 	lsr	r2, r3, #16
 c102638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10263c:	e1c320b0 	strh	r2, [r3]
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c102640:	e3a00064 	mov	r0, #100	; 0x64
 c102644:	eb00101b 	bl	c1066b8 <sw_delay_ms>

	return scancode;
 c102648:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10264c:	e1a00003 	mov	r0, r3
 c102650:	e24bd00c 	sub	sp, fp, #12
 c102654:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102658:	e12fff1e 	bx	lr
 c10265c:	cccccccd 	.word	0xcccccccd

0c102660 <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms )
{
 c102660:	e1a0c00d 	mov	ip, sp
 c102664:	e92dd800 	push	{fp, ip, lr, pc}
 c102668:	e24cb004 	sub	fp, ip, #4
 c10266c:	e24dd010 	sub	sp, sp, #16
 c102670:	e1a03000 	mov	r3, r0
 c102674:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 scancode = KEYPAD_TIMEOUT;
 c102678:	e3e03001 	mvn	r3, #1
 c10267c:	e54b300d 	strb	r3, [fp, #-13]
	ms *= 10;
 c102680:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c102684:	e1a02003 	mov	r2, r3
 c102688:	e1a02102 	lsl	r2, r2, #2
 c10268c:	e0823003 	add	r3, r2, r3
 c102690:	e1a03083 	lsl	r3, r3, #1
 c102694:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	timer3_start_timeout(ms);
 c102698:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10269c:	e1a00003 	mov	r0, r3
 c1026a0:	eb001082 	bl	c1068b0 <timer3_start_timeout>
    while((keypad_scan() == KEYPAD_FAILURE ) && !timer3_timeout());
 c1026a4:	e1a00000 	nop			; (mov r0, r0)
 c1026a8:	ebfffedb 	bl	c10221c <keypad_scan>
 c1026ac:	e1a03000 	mov	r3, r0
 c1026b0:	e35300ff 	cmp	r3, #255	; 0xff
 c1026b4:	1a000003 	bne	c1026c8 <keypad_timeout_getchar+0x68>
 c1026b8:	eb0010aa 	bl	c106968 <timer3_timeout>
 c1026bc:	e1a03000 	mov	r3, r0
 c1026c0:	e3530000 	cmp	r3, #0
 c1026c4:	0afffff7 	beq	c1026a8 <keypad_timeout_getchar+0x48>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1026c8:	e3a0001e 	mov	r0, #30
 c1026cc:	eb000ff9 	bl	c1066b8 <sw_delay_ms>

	scancode = keypad_scan();
 c1026d0:	ebfffed1 	bl	c10221c <keypad_scan>
 c1026d4:	e1a03000 	mov	r3, r0
 c1026d8:	e54b300d 	strb	r3, [fp, #-13]

	while((keypad_scan() != KEYPAD_FAILURE ) && !timer3_timeout());
 c1026dc:	e1a00000 	nop			; (mov r0, r0)
 c1026e0:	ebfffecd 	bl	c10221c <keypad_scan>
 c1026e4:	e1a03000 	mov	r3, r0
 c1026e8:	e35300ff 	cmp	r3, #255	; 0xff
 c1026ec:	0a000003 	beq	c102700 <keypad_timeout_getchar+0xa0>
 c1026f0:	eb00109c 	bl	c106968 <timer3_timeout>
 c1026f4:	e1a03000 	mov	r3, r0
 c1026f8:	e3530000 	cmp	r3, #0
 c1026fc:	0afffff7 	beq	c1026e0 <keypad_timeout_getchar+0x80>
	if(timer3_timeout()) return KEYPAD_TIMEOUT;
 c102700:	eb001098 	bl	c106968 <timer3_timeout>
 c102704:	e1a03000 	mov	r3, r0
 c102708:	e3530000 	cmp	r3, #0
 c10270c:	0a000001 	beq	c102718 <keypad_timeout_getchar+0xb8>
 c102710:	e3a030fe 	mov	r3, #254	; 0xfe
 c102714:	ea000002 	b	c102724 <keypad_timeout_getchar+0xc4>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c102718:	e3a00064 	mov	r0, #100	; 0x64
 c10271c:	eb000fe5 	bl	c1066b8 <sw_delay_ms>

	return scancode;
 c102720:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c102724:	e1a00003 	mov	r0, r3
 c102728:	e24bd00c 	sub	sp, fp, #12
 c10272c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102730:	e12fff1e 	bx	lr

0c102734 <keypad_fullscan>:

uint16 keypad_fullscan( void )
{
 c102734:	e1a0c00d 	mov	ip, sp
 c102738:	e92dd800 	push	{fp, ip, lr, pc}
 c10273c:	e24cb004 	sub	fp, ip, #4
 c102740:	e24dd008 	sub	sp, sp, #8
	uint8 aux;
	uint16 scancode = 0;
 c102744:	e3a03000 	mov	r3, #0
 c102748:	e14b30be 	strh	r3, [fp, #-14]
	    aux = *( KEYPAD_ADDR + 0x1c );
 c10274c:	e59f3284 	ldr	r3, [pc, #644]	; c1029d8 <keypad_fullscan+0x2a4>
 c102750:	e5d33000 	ldrb	r3, [r3]
 c102754:	e54b300f 	strb	r3, [fp, #-15]
	    if( (aux & 0x0f) != 0x0f )
 c102758:	e55b300f 	ldrb	r3, [fp, #-15]
 c10275c:	e203300f 	and	r3, r3, #15
 c102760:	e353000f 	cmp	r3, #15
 c102764:	0a00001e 	beq	c1027e4 <keypad_fullscan+0xb0>
	    {
	        if( (aux & 0x8) == 0 )
 c102768:	e55b300f 	ldrb	r3, [fp, #-15]
 c10276c:	e2033008 	and	r3, r3, #8
 c102770:	e3530000 	cmp	r3, #0
 c102774:	1a000003 	bne	c102788 <keypad_fullscan+0x54>
	           scancode |= (1 << 0);
 c102778:	e15b30be 	ldrh	r3, [fp, #-14]
 c10277c:	e3833001 	orr	r3, r3, #1
 c102780:	e14b30be 	strh	r3, [fp, #-14]
 c102784:	ea000016 	b	c1027e4 <keypad_fullscan+0xb0>
	        else if( (aux & 0x4) == 0 )
 c102788:	e55b300f 	ldrb	r3, [fp, #-15]
 c10278c:	e2033004 	and	r3, r3, #4
 c102790:	e3530000 	cmp	r3, #0
 c102794:	1a000003 	bne	c1027a8 <keypad_fullscan+0x74>
	           scancode |= (1 << 1);
 c102798:	e15b30be 	ldrh	r3, [fp, #-14]
 c10279c:	e3833002 	orr	r3, r3, #2
 c1027a0:	e14b30be 	strh	r3, [fp, #-14]
 c1027a4:	ea00000e 	b	c1027e4 <keypad_fullscan+0xb0>
	        else if( (aux & 0x2) == 0 )
 c1027a8:	e55b300f 	ldrb	r3, [fp, #-15]
 c1027ac:	e2033002 	and	r3, r3, #2
 c1027b0:	e3530000 	cmp	r3, #0
 c1027b4:	1a000003 	bne	c1027c8 <keypad_fullscan+0x94>
	        	scancode |= (1 << 2);
 c1027b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1027bc:	e3833004 	orr	r3, r3, #4
 c1027c0:	e14b30be 	strh	r3, [fp, #-14]
 c1027c4:	ea000006 	b	c1027e4 <keypad_fullscan+0xb0>
	        else if( (aux & 0x1) == 0 )
 c1027c8:	e55b300f 	ldrb	r3, [fp, #-15]
 c1027cc:	e2033001 	and	r3, r3, #1
 c1027d0:	e3530000 	cmp	r3, #0
 c1027d4:	1a000002 	bne	c1027e4 <keypad_fullscan+0xb0>
	        	scancode |= (1 << 3);
 c1027d8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1027dc:	e3833008 	orr	r3, r3, #8
 c1027e0:	e14b30be 	strh	r3, [fp, #-14]
	    }
		aux = *( KEYPAD_ADDR + 0x1a );
 c1027e4:	e59f31f0 	ldr	r3, [pc, #496]	; c1029dc <keypad_fullscan+0x2a8>
 c1027e8:	e5d33000 	ldrb	r3, [r3]
 c1027ec:	e54b300f 	strb	r3, [fp, #-15]
		if( (aux & 0x0f) != 0x0f )
 c1027f0:	e55b300f 	ldrb	r3, [fp, #-15]
 c1027f4:	e203300f 	and	r3, r3, #15
 c1027f8:	e353000f 	cmp	r3, #15
 c1027fc:	0a00001e 	beq	c10287c <keypad_fullscan+0x148>
		{
			if( (aux & 0x8) == 0 )
 c102800:	e55b300f 	ldrb	r3, [fp, #-15]
 c102804:	e2033008 	and	r3, r3, #8
 c102808:	e3530000 	cmp	r3, #0
 c10280c:	1a000003 	bne	c102820 <keypad_fullscan+0xec>
				scancode |= (1 << 4);
 c102810:	e15b30be 	ldrh	r3, [fp, #-14]
 c102814:	e3833010 	orr	r3, r3, #16
 c102818:	e14b30be 	strh	r3, [fp, #-14]
 c10281c:	ea000016 	b	c10287c <keypad_fullscan+0x148>
			else if( (aux & 0x4) == 0 )
 c102820:	e55b300f 	ldrb	r3, [fp, #-15]
 c102824:	e2033004 	and	r3, r3, #4
 c102828:	e3530000 	cmp	r3, #0
 c10282c:	1a000003 	bne	c102840 <keypad_fullscan+0x10c>
				scancode |= (1 << 5);
 c102830:	e15b30be 	ldrh	r3, [fp, #-14]
 c102834:	e3833020 	orr	r3, r3, #32
 c102838:	e14b30be 	strh	r3, [fp, #-14]
 c10283c:	ea00000e 	b	c10287c <keypad_fullscan+0x148>
			else if( (aux & 0x2) == 0 )
 c102840:	e55b300f 	ldrb	r3, [fp, #-15]
 c102844:	e2033002 	and	r3, r3, #2
 c102848:	e3530000 	cmp	r3, #0
 c10284c:	1a000003 	bne	c102860 <keypad_fullscan+0x12c>
				scancode |= (1 << 6);
 c102850:	e15b30be 	ldrh	r3, [fp, #-14]
 c102854:	e3833040 	orr	r3, r3, #64	; 0x40
 c102858:	e14b30be 	strh	r3, [fp, #-14]
 c10285c:	ea000006 	b	c10287c <keypad_fullscan+0x148>
			else if( (aux & 0x1) == 0 )
 c102860:	e55b300f 	ldrb	r3, [fp, #-15]
 c102864:	e2033001 	and	r3, r3, #1
 c102868:	e3530000 	cmp	r3, #0
 c10286c:	1a000002 	bne	c10287c <keypad_fullscan+0x148>
				scancode |= (1 << 7);
 c102870:	e15b30be 	ldrh	r3, [fp, #-14]
 c102874:	e3833080 	orr	r3, r3, #128	; 0x80
 c102878:	e14b30be 	strh	r3, [fp, #-14]
		}
		aux = *( KEYPAD_ADDR + 0x16 );
 c10287c:	e59f315c 	ldr	r3, [pc, #348]	; c1029e0 <keypad_fullscan+0x2ac>
 c102880:	e5d33000 	ldrb	r3, [r3]
 c102884:	e54b300f 	strb	r3, [fp, #-15]
			if( (aux & 0x0f) != 0x0f )
 c102888:	e55b300f 	ldrb	r3, [fp, #-15]
 c10288c:	e203300f 	and	r3, r3, #15
 c102890:	e353000f 	cmp	r3, #15
 c102894:	0a00001e 	beq	c102914 <keypad_fullscan+0x1e0>
			{
				if( (aux & 0x8) == 0 )
 c102898:	e55b300f 	ldrb	r3, [fp, #-15]
 c10289c:	e2033008 	and	r3, r3, #8
 c1028a0:	e3530000 	cmp	r3, #0
 c1028a4:	1a000003 	bne	c1028b8 <keypad_fullscan+0x184>
					scancode |= (1 << 8);
 c1028a8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1028ac:	e3833c01 	orr	r3, r3, #256	; 0x100
 c1028b0:	e14b30be 	strh	r3, [fp, #-14]
 c1028b4:	ea000016 	b	c102914 <keypad_fullscan+0x1e0>
				else if( (aux & 0x4) == 0 )
 c1028b8:	e55b300f 	ldrb	r3, [fp, #-15]
 c1028bc:	e2033004 	and	r3, r3, #4
 c1028c0:	e3530000 	cmp	r3, #0
 c1028c4:	1a000003 	bne	c1028d8 <keypad_fullscan+0x1a4>
					scancode |= (1 << 9);
 c1028c8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1028cc:	e3833c02 	orr	r3, r3, #512	; 0x200
 c1028d0:	e14b30be 	strh	r3, [fp, #-14]
 c1028d4:	ea00000e 	b	c102914 <keypad_fullscan+0x1e0>
				else if( (aux & 0x2) == 0 )
 c1028d8:	e55b300f 	ldrb	r3, [fp, #-15]
 c1028dc:	e2033002 	and	r3, r3, #2
 c1028e0:	e3530000 	cmp	r3, #0
 c1028e4:	1a000003 	bne	c1028f8 <keypad_fullscan+0x1c4>
					scancode |= (1 << 10);
 c1028e8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1028ec:	e3833b01 	orr	r3, r3, #1024	; 0x400
 c1028f0:	e14b30be 	strh	r3, [fp, #-14]
 c1028f4:	ea000006 	b	c102914 <keypad_fullscan+0x1e0>
				else if( (aux & 0x1) == 0 )
 c1028f8:	e55b300f 	ldrb	r3, [fp, #-15]
 c1028fc:	e2033001 	and	r3, r3, #1
 c102900:	e3530000 	cmp	r3, #0
 c102904:	1a000002 	bne	c102914 <keypad_fullscan+0x1e0>
					scancode |= (1 << 11);
 c102908:	e15b30be 	ldrh	r3, [fp, #-14]
 c10290c:	e3833b02 	orr	r3, r3, #2048	; 0x800
 c102910:	e14b30be 	strh	r3, [fp, #-14]
			}
		aux = *( KEYPAD_ADDR + 0x0e );
 c102914:	e59f30c8 	ldr	r3, [pc, #200]	; c1029e4 <keypad_fullscan+0x2b0>
 c102918:	e5d33000 	ldrb	r3, [r3]
 c10291c:	e54b300f 	strb	r3, [fp, #-15]
				if( (aux & 0x0f) != 0x0f )
 c102920:	e55b300f 	ldrb	r3, [fp, #-15]
 c102924:	e203300f 	and	r3, r3, #15
 c102928:	e353000f 	cmp	r3, #15
 c10292c:	0a00001f 	beq	c1029b0 <keypad_fullscan+0x27c>
				{
					if( (aux & 0x8) == 0 )
 c102930:	e55b300f 	ldrb	r3, [fp, #-15]
 c102934:	e2033008 	and	r3, r3, #8
 c102938:	e3530000 	cmp	r3, #0
 c10293c:	1a000003 	bne	c102950 <keypad_fullscan+0x21c>
						scancode |= (1 << 12);
 c102940:	e15b30be 	ldrh	r3, [fp, #-14]
 c102944:	e3833a01 	orr	r3, r3, #4096	; 0x1000
 c102948:	e14b30be 	strh	r3, [fp, #-14]
 c10294c:	ea000017 	b	c1029b0 <keypad_fullscan+0x27c>
					else if( (aux & 0x4) == 0 )
 c102950:	e55b300f 	ldrb	r3, [fp, #-15]
 c102954:	e2033004 	and	r3, r3, #4
 c102958:	e3530000 	cmp	r3, #0
 c10295c:	1a000003 	bne	c102970 <keypad_fullscan+0x23c>
						scancode |= (1 << 13);
 c102960:	e15b30be 	ldrh	r3, [fp, #-14]
 c102964:	e3833a02 	orr	r3, r3, #8192	; 0x2000
 c102968:	e14b30be 	strh	r3, [fp, #-14]
 c10296c:	ea00000f 	b	c1029b0 <keypad_fullscan+0x27c>
					else if( (aux & 0x2) == 0 )
 c102970:	e55b300f 	ldrb	r3, [fp, #-15]
 c102974:	e2033002 	and	r3, r3, #2
 c102978:	e3530000 	cmp	r3, #0
 c10297c:	1a000003 	bne	c102990 <keypad_fullscan+0x25c>
						scancode |= (1 << 14);
 c102980:	e15b30be 	ldrh	r3, [fp, #-14]
 c102984:	e3833901 	orr	r3, r3, #16384	; 0x4000
 c102988:	e14b30be 	strh	r3, [fp, #-14]
 c10298c:	ea000007 	b	c1029b0 <keypad_fullscan+0x27c>
					else if( (aux & 0x1) == 0 )
 c102990:	e55b300f 	ldrb	r3, [fp, #-15]
 c102994:	e2033001 	and	r3, r3, #1
 c102998:	e3530000 	cmp	r3, #0
 c10299c:	1a000003 	bne	c1029b0 <keypad_fullscan+0x27c>
						scancode |= (1 << 15);
 c1029a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1029a4:	e1e03883 	mvn	r3, r3, lsl #17
 c1029a8:	e1e038a3 	mvn	r3, r3, lsr #17
 c1029ac:	e14b30be 	strh	r3, [fp, #-14]
				}
	    return (scancode) ? scancode : KEYPAD_FAILURE;
 c1029b0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1029b4:	e3530000 	cmp	r3, #0
 c1029b8:	0a000001 	beq	c1029c4 <keypad_fullscan+0x290>
 c1029bc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1029c0:	ea000000 	b	c1029c8 <keypad_fullscan+0x294>
 c1029c4:	e3a030ff 	mov	r3, #255	; 0xff

}
 c1029c8:	e1a00003 	mov	r0, r3
 c1029cc:	e24bd00c 	sub	sp, fp, #12
 c1029d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1029d4:	e12fff1e 	bx	lr
 c1029d8:	0600001c 	.word	0x0600001c
 c1029dc:	0600001a 	.word	0x0600001a
 c1029e0:	06000016 	.word	0x06000016
 c1029e4:	0600000e 	.word	0x0600000e

0c1029e8 <keypad_keycount>:

uint8 keypad_keycount( void ){
 c1029e8:	e1a0c00d 	mov	ip, sp
 c1029ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1029f0:	e24cb004 	sub	fp, ip, #4
 c1029f4:	e24dd008 	sub	sp, sp, #8
	uint8 aux;
	uint16 scancode = 0;
 c1029f8:	e3a03000 	mov	r3, #0
 c1029fc:	e14b30be 	strh	r3, [fp, #-14]
	while(keypad_pressed()){
 c102a00:	ea00008c 	b	c102c38 <keypad_keycount+0x250>
	    aux = *( KEYPAD_ADDR + 0x1c );
 c102a04:	e59f329c 	ldr	r3, [pc, #668]	; c102ca8 <keypad_keycount+0x2c0>
 c102a08:	e5d33000 	ldrb	r3, [r3]
 c102a0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	    if( (aux & 0x0f) != 0x0f )
 c102a10:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102a14:	e203300f 	and	r3, r3, #15
 c102a18:	e353000f 	cmp	r3, #15
 c102a1c:	0a00001b 	beq	c102a90 <keypad_keycount+0xa8>
	    {
	        if( (aux & 0x8) == 0 )
 c102a20:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102a24:	e2033008 	and	r3, r3, #8
 c102a28:	e3530000 	cmp	r3, #0
 c102a2c:	1a000002 	bne	c102a3c <keypad_keycount+0x54>
	           scancode |= (1 << 0);
 c102a30:	e15b30be 	ldrh	r3, [fp, #-14]
 c102a34:	e3833001 	orr	r3, r3, #1
 c102a38:	e14b30be 	strh	r3, [fp, #-14]
	        if( (aux & 0x4) == 0 )
 c102a3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102a40:	e2033004 	and	r3, r3, #4
 c102a44:	e3530000 	cmp	r3, #0
 c102a48:	1a000002 	bne	c102a58 <keypad_keycount+0x70>
	           scancode |= (1 << 1);
 c102a4c:	e15b30be 	ldrh	r3, [fp, #-14]
 c102a50:	e3833002 	orr	r3, r3, #2
 c102a54:	e14b30be 	strh	r3, [fp, #-14]
	        if( (aux & 0x2) == 0 )
 c102a58:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102a5c:	e2033002 	and	r3, r3, #2
 c102a60:	e3530000 	cmp	r3, #0
 c102a64:	1a000002 	bne	c102a74 <keypad_keycount+0x8c>
	        	scancode |= (1 << 2);
 c102a68:	e15b30be 	ldrh	r3, [fp, #-14]
 c102a6c:	e3833004 	orr	r3, r3, #4
 c102a70:	e14b30be 	strh	r3, [fp, #-14]
	        if( (aux & 0x1) == 0 )
 c102a74:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102a78:	e2033001 	and	r3, r3, #1
 c102a7c:	e3530000 	cmp	r3, #0
 c102a80:	1a000002 	bne	c102a90 <keypad_keycount+0xa8>
	        	scancode |= (1 << 3);
 c102a84:	e15b30be 	ldrh	r3, [fp, #-14]
 c102a88:	e3833008 	orr	r3, r3, #8
 c102a8c:	e14b30be 	strh	r3, [fp, #-14]
	    }
		aux = *( KEYPAD_ADDR + 0x1a );
 c102a90:	e59f3214 	ldr	r3, [pc, #532]	; c102cac <keypad_keycount+0x2c4>
 c102a94:	e5d33000 	ldrb	r3, [r3]
 c102a98:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if( (aux & 0x0f) != 0x0f )
 c102a9c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102aa0:	e203300f 	and	r3, r3, #15
 c102aa4:	e353000f 	cmp	r3, #15
 c102aa8:	0a00001b 	beq	c102b1c <keypad_keycount+0x134>
		{
			if( (aux & 0x8) == 0 )
 c102aac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102ab0:	e2033008 	and	r3, r3, #8
 c102ab4:	e3530000 	cmp	r3, #0
 c102ab8:	1a000002 	bne	c102ac8 <keypad_keycount+0xe0>
				scancode |= (1 << 4);
 c102abc:	e15b30be 	ldrh	r3, [fp, #-14]
 c102ac0:	e3833010 	orr	r3, r3, #16
 c102ac4:	e14b30be 	strh	r3, [fp, #-14]
			if( (aux & 0x4) == 0 )
 c102ac8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102acc:	e2033004 	and	r3, r3, #4
 c102ad0:	e3530000 	cmp	r3, #0
 c102ad4:	1a000002 	bne	c102ae4 <keypad_keycount+0xfc>
				scancode |= (1 << 5);
 c102ad8:	e15b30be 	ldrh	r3, [fp, #-14]
 c102adc:	e3833020 	orr	r3, r3, #32
 c102ae0:	e14b30be 	strh	r3, [fp, #-14]
			if( (aux & 0x2) == 0 )
 c102ae4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102ae8:	e2033002 	and	r3, r3, #2
 c102aec:	e3530000 	cmp	r3, #0
 c102af0:	1a000002 	bne	c102b00 <keypad_keycount+0x118>
				scancode |= (1 << 6);
 c102af4:	e15b30be 	ldrh	r3, [fp, #-14]
 c102af8:	e3833040 	orr	r3, r3, #64	; 0x40
 c102afc:	e14b30be 	strh	r3, [fp, #-14]
			if( (aux & 0x1) == 0 )
 c102b00:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102b04:	e2033001 	and	r3, r3, #1
 c102b08:	e3530000 	cmp	r3, #0
 c102b0c:	1a000002 	bne	c102b1c <keypad_keycount+0x134>
				scancode |= (1 << 7);
 c102b10:	e15b30be 	ldrh	r3, [fp, #-14]
 c102b14:	e3833080 	orr	r3, r3, #128	; 0x80
 c102b18:	e14b30be 	strh	r3, [fp, #-14]
		}
		aux = *( KEYPAD_ADDR + 0x16 );
 c102b1c:	e59f318c 	ldr	r3, [pc, #396]	; c102cb0 <keypad_keycount+0x2c8>
 c102b20:	e5d33000 	ldrb	r3, [r3]
 c102b24:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
			if( (aux & 0x0f) != 0x0f )
 c102b28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102b2c:	e203300f 	and	r3, r3, #15
 c102b30:	e353000f 	cmp	r3, #15
 c102b34:	0a00001b 	beq	c102ba8 <keypad_keycount+0x1c0>
			{
				if( (aux & 0x8) == 0 )
 c102b38:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102b3c:	e2033008 	and	r3, r3, #8
 c102b40:	e3530000 	cmp	r3, #0
 c102b44:	1a000002 	bne	c102b54 <keypad_keycount+0x16c>
					scancode |= (1 << 8);
 c102b48:	e15b30be 	ldrh	r3, [fp, #-14]
 c102b4c:	e3833c01 	orr	r3, r3, #256	; 0x100
 c102b50:	e14b30be 	strh	r3, [fp, #-14]
				if( (aux & 0x4) == 0 )
 c102b54:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102b58:	e2033004 	and	r3, r3, #4
 c102b5c:	e3530000 	cmp	r3, #0
 c102b60:	1a000002 	bne	c102b70 <keypad_keycount+0x188>
					scancode |= (1 << 9);
 c102b64:	e15b30be 	ldrh	r3, [fp, #-14]
 c102b68:	e3833c02 	orr	r3, r3, #512	; 0x200
 c102b6c:	e14b30be 	strh	r3, [fp, #-14]
				if( (aux & 0x2) == 0 )
 c102b70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102b74:	e2033002 	and	r3, r3, #2
 c102b78:	e3530000 	cmp	r3, #0
 c102b7c:	1a000002 	bne	c102b8c <keypad_keycount+0x1a4>
					scancode |= (1 << 10);
 c102b80:	e15b30be 	ldrh	r3, [fp, #-14]
 c102b84:	e3833b01 	orr	r3, r3, #1024	; 0x400
 c102b88:	e14b30be 	strh	r3, [fp, #-14]
				if( (aux & 0x1) == 0 )
 c102b8c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102b90:	e2033001 	and	r3, r3, #1
 c102b94:	e3530000 	cmp	r3, #0
 c102b98:	1a000002 	bne	c102ba8 <keypad_keycount+0x1c0>
					scancode |= (1 << 11);
 c102b9c:	e15b30be 	ldrh	r3, [fp, #-14]
 c102ba0:	e3833b02 	orr	r3, r3, #2048	; 0x800
 c102ba4:	e14b30be 	strh	r3, [fp, #-14]
			}
		aux = *( KEYPAD_ADDR + 0x0e );
 c102ba8:	e59f3104 	ldr	r3, [pc, #260]	; c102cb4 <keypad_keycount+0x2cc>
 c102bac:	e5d33000 	ldrb	r3, [r3]
 c102bb0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
				if( (aux & 0x0f) != 0x0f )
 c102bb4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102bb8:	e203300f 	and	r3, r3, #15
 c102bbc:	e353000f 	cmp	r3, #15
 c102bc0:	0a00001c 	beq	c102c38 <keypad_keycount+0x250>
				{
					if( (aux & 0x8) == 0 )
 c102bc4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102bc8:	e2033008 	and	r3, r3, #8
 c102bcc:	e3530000 	cmp	r3, #0
 c102bd0:	1a000002 	bne	c102be0 <keypad_keycount+0x1f8>
						scancode |= (1 << 12);
 c102bd4:	e15b30be 	ldrh	r3, [fp, #-14]
 c102bd8:	e3833a01 	orr	r3, r3, #4096	; 0x1000
 c102bdc:	e14b30be 	strh	r3, [fp, #-14]
					if( (aux & 0x4) == 0 )
 c102be0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102be4:	e2033004 	and	r3, r3, #4
 c102be8:	e3530000 	cmp	r3, #0
 c102bec:	1a000002 	bne	c102bfc <keypad_keycount+0x214>
						scancode |= (1 << 13);
 c102bf0:	e15b30be 	ldrh	r3, [fp, #-14]
 c102bf4:	e3833a02 	orr	r3, r3, #8192	; 0x2000
 c102bf8:	e14b30be 	strh	r3, [fp, #-14]
					if( (aux & 0x2) == 0 )
 c102bfc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102c00:	e2033002 	and	r3, r3, #2
 c102c04:	e3530000 	cmp	r3, #0
 c102c08:	1a000002 	bne	c102c18 <keypad_keycount+0x230>
						scancode |= (1 << 14);
 c102c0c:	e15b30be 	ldrh	r3, [fp, #-14]
 c102c10:	e3833901 	orr	r3, r3, #16384	; 0x4000
 c102c14:	e14b30be 	strh	r3, [fp, #-14]
					if( (aux & 0x1) == 0 )
 c102c18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102c1c:	e2033001 	and	r3, r3, #1
 c102c20:	e3530000 	cmp	r3, #0
 c102c24:	1a000003 	bne	c102c38 <keypad_keycount+0x250>
						scancode |= (1 << 15);
 c102c28:	e15b30be 	ldrh	r3, [fp, #-14]
 c102c2c:	e1e03883 	mvn	r3, r3, lsl #17
 c102c30:	e1e038a3 	mvn	r3, r3, lsr #17
 c102c34:	e14b30be 	strh	r3, [fp, #-14]
}

uint8 keypad_keycount( void ){
	uint8 aux;
	uint16 scancode = 0;
	while(keypad_pressed()){
 c102c38:	ebfffe00 	bl	c102440 <keypad_pressed>
 c102c3c:	e1a03000 	mov	r3, r0
 c102c40:	e3530000 	cmp	r3, #0
 c102c44:	1affff6e 	bne	c102a04 <keypad_keycount+0x1c>
						scancode |= (1 << 15);
				}
	}
	uint8 count;
	uint8 i;
	for(i=0; i < 16; i++){
 c102c48:	e3a03000 	mov	r3, #0
 c102c4c:	e54b3010 	strb	r3, [fp, #-16]
 c102c50:	ea00000c 	b	c102c88 <keypad_keycount+0x2a0>
		if((scancode & (1 << i))) count++;
 c102c54:	e15b20be 	ldrh	r2, [fp, #-14]
 c102c58:	e55b3010 	ldrb	r3, [fp, #-16]
 c102c5c:	e1a03352 	asr	r3, r2, r3
 c102c60:	e2033001 	and	r3, r3, #1
 c102c64:	e20330ff 	and	r3, r3, #255	; 0xff
 c102c68:	e3530000 	cmp	r3, #0
 c102c6c:	0a000002 	beq	c102c7c <keypad_keycount+0x294>
 c102c70:	e55b300f 	ldrb	r3, [fp, #-15]
 c102c74:	e2833001 	add	r3, r3, #1
 c102c78:	e54b300f 	strb	r3, [fp, #-15]
						scancode |= (1 << 15);
				}
	}
	uint8 count;
	uint8 i;
	for(i=0; i < 16; i++){
 c102c7c:	e55b3010 	ldrb	r3, [fp, #-16]
 c102c80:	e2833001 	add	r3, r3, #1
 c102c84:	e54b3010 	strb	r3, [fp, #-16]
 c102c88:	e55b3010 	ldrb	r3, [fp, #-16]
 c102c8c:	e353000f 	cmp	r3, #15
 c102c90:	9affffef 	bls	c102c54 <keypad_keycount+0x26c>
		if((scancode & (1 << i))) count++;
	}
	return	count;
 c102c94:	e55b300f 	ldrb	r3, [fp, #-15]
}
 c102c98:	e1a00003 	mov	r0, r3
 c102c9c:	e24bd00c 	sub	sp, fp, #12
 c102ca0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102ca4:	e12fff1e 	bx	lr
 c102ca8:	0600001c 	.word	0x0600001c
 c102cac:	0600001a 	.word	0x0600001a
 c102cb0:	06000016 	.word	0x06000016
 c102cb4:	0600000e 	.word	0x0600000e

0c102cb8 <keypad_getfullchar>:

uint16 keypad_getfullchar( void )
{
 c102cb8:	e1a0c00d 	mov	ip, sp
 c102cbc:	e92dd800 	push	{fp, ip, lr, pc}
 c102cc0:	e24cb004 	sub	fp, ip, #4
 c102cc4:	e24dd008 	sub	sp, sp, #8
	uint16 scan_code,aux= keypad_fullscan();
 c102cc8:	ebfffe99 	bl	c102734 <keypad_fullscan>
 c102ccc:	e1a03000 	mov	r3, r0
 c102cd0:	e14b31b0 	strh	r3, [fp, #-16]
	while((aux) == KEYPAD_FAILURE){
 c102cd4:	ea000002 	b	c102ce4 <keypad_getfullchar+0x2c>
		aux = keypad_fullscan();
 c102cd8:	ebfffe95 	bl	c102734 <keypad_fullscan>
 c102cdc:	e1a03000 	mov	r3, r0
 c102ce0:	e14b31b0 	strh	r3, [fp, #-16]
}

uint16 keypad_getfullchar( void )
{
	uint16 scan_code,aux= keypad_fullscan();
	while((aux) == KEYPAD_FAILURE){
 c102ce4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102ce8:	e35300ff 	cmp	r3, #255	; 0xff
 c102cec:	0afffff9 	beq	c102cd8 <keypad_getfullchar+0x20>
		aux = keypad_fullscan();
	}
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c102cf0:	e3a0001e 	mov	r0, #30
 c102cf4:	eb000e6f 	bl	c1066b8 <sw_delay_ms>
	scan_code = aux;
 c102cf8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102cfc:	e14b30be 	strh	r3, [fp, #-14]
	while(keypad_fullscan() != KEYPAD_FAILURE){
 c102d00:	ea000004 	b	c102d18 <keypad_getfullchar+0x60>
		aux = keypad_fullscan();
 c102d04:	ebfffe8a 	bl	c102734 <keypad_fullscan>
 c102d08:	e1a03000 	mov	r3, r0
 c102d0c:	e14b31b0 	strh	r3, [fp, #-16]
		scan_code = aux;
 c102d10:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102d14:	e14b30be 	strh	r3, [fp, #-14]
	while((aux) == KEYPAD_FAILURE){
		aux = keypad_fullscan();
	}
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
	scan_code = aux;
	while(keypad_fullscan() != KEYPAD_FAILURE){
 c102d18:	ebfffe85 	bl	c102734 <keypad_fullscan>
 c102d1c:	e1a03000 	mov	r3, r0
 c102d20:	e35300ff 	cmp	r3, #255	; 0xff
 c102d24:	1afffff6 	bne	c102d04 <keypad_getfullchar+0x4c>
		aux = keypad_fullscan();
		scan_code = aux;
	}
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c102d28:	e3a00064 	mov	r0, #100	; 0x64
 c102d2c:	eb000e61 	bl	c1066b8 <sw_delay_ms>
	return scan_code;
 c102d30:	e15b30be 	ldrh	r3, [fp, #-14]
}
 c102d34:	e1a00003 	mov	r0, r3
 c102d38:	e24bd00c 	sub	sp, fp, #12
 c102d3c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102d40:	e12fff1e 	bx	lr

0c102d44 <lcd_init>:
static void isr_bdma0( void ) __attribute__ ((interrupt ("IRQ")));

static uint8 state;

void lcd_init( void )
{
 c102d44:	e1a0c00d 	mov	ip, sp
 c102d48:	e92dd800 	push	{fp, ip, lr, pc}
 c102d4c:	e24cb004 	sub	fp, ip, #4
    DITHMODE = 0x12210;
 c102d50:	e59f30fc 	ldr	r3, [pc, #252]	; c102e54 <lcd_init+0x110>
 c102d54:	e59f20fc 	ldr	r2, [pc, #252]	; c102e58 <lcd_init+0x114>
 c102d58:	e5832000 	str	r2, [r3]
    DP1_2    = 0xA5A5;
 c102d5c:	e59f30f8 	ldr	r3, [pc, #248]	; c102e5c <lcd_init+0x118>
 c102d60:	e59f20f8 	ldr	r2, [pc, #248]	; c102e60 <lcd_init+0x11c>
 c102d64:	e5832000 	str	r2, [r3]
    DP4_7    = 0xBA5DA65;
 c102d68:	e59f30f4 	ldr	r3, [pc, #244]	; c102e64 <lcd_init+0x120>
 c102d6c:	e59f20f4 	ldr	r2, [pc, #244]	; c102e68 <lcd_init+0x124>
 c102d70:	e5832000 	str	r2, [r3]
    DP3_5    = 0xA5A5F;
 c102d74:	e59f30f0 	ldr	r3, [pc, #240]	; c102e6c <lcd_init+0x128>
 c102d78:	e59f20f0 	ldr	r2, [pc, #240]	; c102e70 <lcd_init+0x12c>
 c102d7c:	e5832000 	str	r2, [r3]
    DP2_3    = 0xD6B;
 c102d80:	e59f30ec 	ldr	r3, [pc, #236]	; c102e74 <lcd_init+0x130>
 c102d84:	e59f20ec 	ldr	r2, [pc, #236]	; c102e78 <lcd_init+0x134>
 c102d88:	e5832000 	str	r2, [r3]
    DP5_7    = 0xEB7B5ED;
 c102d8c:	e59f30e8 	ldr	r3, [pc, #232]	; c102e7c <lcd_init+0x138>
 c102d90:	e59f20e8 	ldr	r2, [pc, #232]	; c102e80 <lcd_init+0x13c>
 c102d94:	e5832000 	str	r2, [r3]
    DP3_4    = 0x7DBE;
 c102d98:	e59f30e4 	ldr	r3, [pc, #228]	; c102e84 <lcd_init+0x140>
 c102d9c:	e59f20e4 	ldr	r2, [pc, #228]	; c102e88 <lcd_init+0x144>
 c102da0:	e5832000 	str	r2, [r3]
    DP4_5    = 0x7EBDF;
 c102da4:	e59f30e0 	ldr	r3, [pc, #224]	; c102e8c <lcd_init+0x148>
 c102da8:	e59f20e0 	ldr	r2, [pc, #224]	; c102e90 <lcd_init+0x14c>
 c102dac:	e5832000 	str	r2, [r3]
    DP6_7    = 0x7FDFBFE;
 c102db0:	e59f30dc 	ldr	r3, [pc, #220]	; c102e94 <lcd_init+0x150>
 c102db4:	e59f20dc 	ldr	r2, [pc, #220]	; c102e98 <lcd_init+0x154>
 c102db8:	e5832000 	str	r2, [r3]

    REDLUT   = 0x0;
 c102dbc:	e59f30d8 	ldr	r3, [pc, #216]	; c102e9c <lcd_init+0x158>
 c102dc0:	e3a02000 	mov	r2, #0
 c102dc4:	e5832000 	str	r2, [r3]
    GREENLUT = 0x0;
 c102dc8:	e59f30d0 	ldr	r3, [pc, #208]	; c102ea0 <lcd_init+0x15c>
 c102dcc:	e3a02000 	mov	r2, #0
 c102dd0:	e5832000 	str	r2, [r3]
    BLUELUT  = 0x0;
 c102dd4:	e59f30c8 	ldr	r3, [pc, #200]	; c102ea4 <lcd_init+0x160>
 c102dd8:	e3a02000 	mov	r2, #0
 c102ddc:	e5832000 	str	r2, [r3]

    LCDCON1  = 0x1C020;
 c102de0:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c102de4:	e59f20bc 	ldr	r2, [pc, #188]	; c102ea8 <lcd_init+0x164>
 c102de8:	e5832000 	str	r2, [r3]
    LCDCON2  = 0x13CEF;
 c102dec:	e59f30b8 	ldr	r3, [pc, #184]	; c102eac <lcd_init+0x168>
 c102df0:	e59f20b8 	ldr	r2, [pc, #184]	; c102eb0 <lcd_init+0x16c>
 c102df4:	e5832000 	str	r2, [r3]
    LCDCON3  = 0x50;
 c102df8:	e59f30b4 	ldr	r3, [pc, #180]	; c102eb4 <lcd_init+0x170>
 c102dfc:	e3a02050 	mov	r2, #80	; 0x50
 c102e00:	e5832000 	str	r2, [r3]

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c102e04:	e59f30ac 	ldr	r3, [pc, #172]	; c102eb8 <lcd_init+0x174>
 c102e08:	e59f20ac 	ldr	r2, [pc, #172]	; c102ebc <lcd_init+0x178>
 c102e0c:	e1a020a2 	lsr	r2, r2, #1
 c102e10:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c102e14:	e5832000 	str	r2, [r3]
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c102e18:	e59f20a0 	ldr	r2, [pc, #160]	; c102ec0 <lcd_init+0x17c>
 c102e1c:	e59f3098 	ldr	r3, [pc, #152]	; c102ebc <lcd_init+0x178>
 c102e20:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c102e24:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c102e28:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c102e2c:	e1a030a3 	lsr	r3, r3, #1
 c102e30:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c102e34:	e5823000 	str	r3, [r2]
    LCDSADDR3 =  0x50;
 c102e38:	e59f3084 	ldr	r3, [pc, #132]	; c102ec4 <lcd_init+0x180>
 c102e3c:	e3a02050 	mov	r2, #80	; 0x50
 c102e40:	e5832000 	str	r2, [r3]

    lcd_off();
 c102e44:	eb00002e 	bl	c102f04 <lcd_off>
}
 c102e48:	e24bd00c 	sub	sp, fp, #12
 c102e4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e50:	e12fff1e 	bx	lr
 c102e54:	01f00044 	.word	0x01f00044
 c102e58:	00012210 	.word	0x00012210
 c102e5c:	01f00020 	.word	0x01f00020
 c102e60:	0000a5a5 	.word	0x0000a5a5
 c102e64:	01f00024 	.word	0x01f00024
 c102e68:	0ba5da65 	.word	0x0ba5da65
 c102e6c:	01f00028 	.word	0x01f00028
 c102e70:	000a5a5f 	.word	0x000a5a5f
 c102e74:	01f0002c 	.word	0x01f0002c
 c102e78:	00000d6b 	.word	0x00000d6b
 c102e7c:	01f00030 	.word	0x01f00030
 c102e80:	0eb7b5ed 	.word	0x0eb7b5ed
 c102e84:	01f00034 	.word	0x01f00034
 c102e88:	00007dbe 	.word	0x00007dbe
 c102e8c:	01f00038 	.word	0x01f00038
 c102e90:	0007ebdf 	.word	0x0007ebdf
 c102e94:	01f0003c 	.word	0x01f0003c
 c102e98:	07fdfbfe 	.word	0x07fdfbfe
 c102e9c:	01f00014 	.word	0x01f00014
 c102ea0:	01f00018 	.word	0x01f00018
 c102ea4:	01f0001c 	.word	0x01f0001c
 c102ea8:	0001c020 	.word	0x0001c020
 c102eac:	01f00004 	.word	0x01f00004
 c102eb0:	00013cef 	.word	0x00013cef
 c102eb4:	01f00040 	.word	0x01f00040
 c102eb8:	01f00008 	.word	0x01f00008
 c102ebc:	0c10a634 	.word	0x0c10a634
 c102ec0:	01f0000c 	.word	0x01f0000c
 c102ec4:	01f00010 	.word	0x01f00010

0c102ec8 <lcd_on>:

void lcd_on( void )
{
 c102ec8:	e1a0c00d 	mov	ip, sp
 c102ecc:	e92dd800 	push	{fp, ip, lr, pc}
 c102ed0:	e24cb004 	sub	fp, ip, #4
    LCDCON1 |= (1<<0);
 c102ed4:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c102ed8:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c102edc:	e5922000 	ldr	r2, [r2]
 c102ee0:	e3822001 	orr	r2, r2, #1
 c102ee4:	e5832000 	str	r2, [r3]
    state = ON;
 c102ee8:	e59f3010 	ldr	r3, [pc, #16]	; c102f00 <lcd_on+0x38>
 c102eec:	e3a02001 	mov	r2, #1
 c102ef0:	e5c32000 	strb	r2, [r3]
}
 c102ef4:	e24bd00c 	sub	sp, fp, #12
 c102ef8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102efc:	e12fff1e 	bx	lr
 c102f00:	0c10a59c 	.word	0x0c10a59c

0c102f04 <lcd_off>:

void lcd_off( void )
{
 c102f04:	e1a0c00d 	mov	ip, sp
 c102f08:	e92dd800 	push	{fp, ip, lr, pc}
 c102f0c:	e24cb004 	sub	fp, ip, #4
	LCDCON1 &= ~(1<<0);
 c102f10:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c102f14:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c102f18:	e5922000 	ldr	r2, [r2]
 c102f1c:	e3c22001 	bic	r2, r2, #1
 c102f20:	e5832000 	str	r2, [r3]
	state = OFF;
 c102f24:	e59f3010 	ldr	r3, [pc, #16]	; c102f3c <lcd_off+0x38>
 c102f28:	e3a02000 	mov	r2, #0
 c102f2c:	e5c32000 	strb	r2, [r3]
}
 c102f30:	e24bd00c 	sub	sp, fp, #12
 c102f34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f38:	e12fff1e 	bx	lr
 c102f3c:	0c10a59c 	.word	0x0c10a59c

0c102f40 <lcd_status>:

uint8 lcd_status( void )
{
 c102f40:	e1a0c00d 	mov	ip, sp
 c102f44:	e92dd800 	push	{fp, ip, lr, pc}
 c102f48:	e24cb004 	sub	fp, ip, #4
    return state;
 c102f4c:	e59f3010 	ldr	r3, [pc, #16]	; c102f64 <lcd_status+0x24>
 c102f50:	e5d33000 	ldrb	r3, [r3]
}
 c102f54:	e1a00003 	mov	r0, r3
 c102f58:	e24bd00c 	sub	sp, fp, #12
 c102f5c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f60:	e12fff1e 	bx	lr
 c102f64:	0c10a59c 	.word	0x0c10a59c

0c102f68 <lcd_clear>:

void lcd_clear( void )
{
 c102f68:	e1a0c00d 	mov	ip, sp
 c102f6c:	e92dd800 	push	{fp, ip, lr, pc}
 c102f70:	e24cb004 	sub	fp, ip, #4
 c102f74:	e24dd008 	sub	sp, sp, #8
	uint16 x,y;
    for(x = 0; x < LCD_WIDTH; x++){
 c102f78:	e3a03000 	mov	r3, #0
 c102f7c:	e14b30be 	strh	r3, [fp, #-14]
 c102f80:	ea000011 	b	c102fcc <lcd_clear+0x64>
    	for(y = 0; y < LCD_HEIGHT; y++){
 c102f84:	e3a03000 	mov	r3, #0
 c102f88:	e14b31b0 	strh	r3, [fp, #-16]
 c102f8c:	ea000008 	b	c102fb4 <lcd_clear+0x4c>
    		lcd_putpixel(x,y,WHITE);
 c102f90:	e15b20be 	ldrh	r2, [fp, #-14]
 c102f94:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102f98:	e1a00002 	mov	r0, r2
 c102f9c:	e1a01003 	mov	r1, r3
 c102fa0:	e3a02000 	mov	r2, #0
 c102fa4:	eb000010 	bl	c102fec <lcd_putpixel>

void lcd_clear( void )
{
	uint16 x,y;
    for(x = 0; x < LCD_WIDTH; x++){
    	for(y = 0; y < LCD_HEIGHT; y++){
 c102fa8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102fac:	e2833001 	add	r3, r3, #1
 c102fb0:	e14b31b0 	strh	r3, [fp, #-16]
 c102fb4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102fb8:	e35300ef 	cmp	r3, #239	; 0xef
 c102fbc:	9afffff3 	bls	c102f90 <lcd_clear+0x28>
}

void lcd_clear( void )
{
	uint16 x,y;
    for(x = 0; x < LCD_WIDTH; x++){
 c102fc0:	e15b30be 	ldrh	r3, [fp, #-14]
 c102fc4:	e2833001 	add	r3, r3, #1
 c102fc8:	e14b30be 	strh	r3, [fp, #-14]
 c102fcc:	e15b20be 	ldrh	r2, [fp, #-14]
 c102fd0:	e59f3010 	ldr	r3, [pc, #16]	; c102fe8 <lcd_clear+0x80>
 c102fd4:	e1520003 	cmp	r2, r3
 c102fd8:	9affffe9 	bls	c102f84 <lcd_clear+0x1c>
    	for(y = 0; y < LCD_HEIGHT; y++){
    		lcd_putpixel(x,y,WHITE);
    	}
    }
}
 c102fdc:	e24bd00c 	sub	sp, fp, #12
 c102fe0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102fe4:	e12fff1e 	bx	lr
 c102fe8:	0000013f 	.word	0x0000013f

0c102fec <lcd_putpixel>:


void lcd_putpixel( uint16 x, uint16 y, uint8 c)
{
 c102fec:	e1a0c00d 	mov	ip, sp
 c102ff0:	e92dd800 	push	{fp, ip, lr, pc}
 c102ff4:	e24cb004 	sub	fp, ip, #4
 c102ff8:	e24dd010 	sub	sp, sp, #16
 c102ffc:	e1a03002 	mov	r3, r2
 c103000:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c103004:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c103008:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c10300c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103010:	e1a030a3 	lsr	r3, r3, #1
 c103014:	e1a03803 	lsl	r3, r3, #16
 c103018:	e1a02823 	lsr	r2, r3, #16
 c10301c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103020:	e1a01003 	mov	r1, r3
 c103024:	e1a01101 	lsl	r1, r1, #2
 c103028:	e0813003 	add	r3, r1, r3
 c10302c:	e1a03283 	lsl	r3, r3, #5
 c103030:	e1a03803 	lsl	r3, r3, #16
 c103034:	e1a03823 	lsr	r3, r3, #16
 c103038:	e0823003 	add	r3, r2, r3
 c10303c:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c103040:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103044:	e2033001 	and	r3, r3, #1
 c103048:	e3530000 	cmp	r3, #0
 c10304c:	1a000001 	bne	c103058 <lcd_putpixel+0x6c>
 c103050:	e3a03004 	mov	r3, #4
 c103054:	ea000000 	b	c10305c <lcd_putpixel+0x70>
 c103058:	e3a03000 	mov	r3, #0
 c10305c:	e54b300f 	strb	r3, [fp, #-15]

    byte = lcd_buffer[i];
 c103060:	e15b30be 	ldrh	r3, [fp, #-14]
 c103064:	e59f2068 	ldr	r2, [pc, #104]	; c1030d4 <lcd_putpixel+0xe8>
 c103068:	e7d23003 	ldrb	r3, [r2, r3]
 c10306c:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c103070:	e55b300f 	ldrb	r3, [fp, #-15]
 c103074:	e3a0200f 	mov	r2, #15
 c103078:	e1a03312 	lsl	r3, r2, r3
 c10307c:	e20330ff 	and	r3, r3, #255	; 0xff
 c103080:	e1e03003 	mvn	r3, r3
 c103084:	e20320ff 	and	r2, r3, #255	; 0xff
 c103088:	e55b3010 	ldrb	r3, [fp, #-16]
 c10308c:	e0023003 	and	r3, r2, r3
 c103090:	e20330ff 	and	r3, r3, #255	; 0xff
 c103094:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c103098:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10309c:	e55b300f 	ldrb	r3, [fp, #-15]
 c1030a0:	e1a03312 	lsl	r3, r2, r3
 c1030a4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1030a8:	e55b3010 	ldrb	r3, [fp, #-16]
 c1030ac:	e1823003 	orr	r3, r2, r3
 c1030b0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1030b4:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c1030b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1030bc:	e59f2010 	ldr	r2, [pc, #16]	; c1030d4 <lcd_putpixel+0xe8>
 c1030c0:	e55b1010 	ldrb	r1, [fp, #-16]
 c1030c4:	e7c21003 	strb	r1, [r2, r3]
}
 c1030c8:	e24bd00c 	sub	sp, fp, #12
 c1030cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1030d0:	e12fff1e 	bx	lr
 c1030d4:	0c10a634 	.word	0x0c10a634

0c1030d8 <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y )
{
 c1030d8:	e1a0c00d 	mov	ip, sp
 c1030dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1030e0:	e24cb004 	sub	fp, ip, #4
 c1030e4:	e24dd010 	sub	sp, sp, #16
 c1030e8:	e1a02000 	mov	r2, r0
 c1030ec:	e1a03001 	mov	r3, r1
 c1030f0:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c1030f4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c1030f8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1030fc:	e1a030a3 	lsr	r3, r3, #1
 c103100:	e1a03803 	lsl	r3, r3, #16
 c103104:	e1a02823 	lsr	r2, r3, #16
 c103108:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10310c:	e1a01003 	mov	r1, r3
 c103110:	e1a01101 	lsl	r1, r1, #2
 c103114:	e0813003 	add	r3, r1, r3
 c103118:	e1a03283 	lsl	r3, r3, #5
 c10311c:	e1a03803 	lsl	r3, r3, #16
 c103120:	e1a03823 	lsr	r3, r3, #16
 c103124:	e0823003 	add	r3, r2, r3
 c103128:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c10312c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103130:	e2033001 	and	r3, r3, #1
 c103134:	e3530000 	cmp	r3, #0
 c103138:	1a000001 	bne	c103144 <lcd_getpixel+0x6c>
 c10313c:	e3a03004 	mov	r3, #4
 c103140:	ea000000 	b	c103148 <lcd_getpixel+0x70>
 c103144:	e3a03000 	mov	r3, #0
 c103148:	e54b300f 	strb	r3, [fp, #-15]

    byte = lcd_buffer[i];
 c10314c:	e15b30be 	ldrh	r3, [fp, #-14]
 c103150:	e59f202c 	ldr	r2, [pc, #44]	; c103184 <lcd_getpixel+0xac>
 c103154:	e7d23003 	ldrb	r3, [r2, r3]
 c103158:	e54b3010 	strb	r3, [fp, #-16]

    return (byte >> bit) & 0xF;
 c10315c:	e55b2010 	ldrb	r2, [fp, #-16]
 c103160:	e55b300f 	ldrb	r3, [fp, #-15]
 c103164:	e1a03352 	asr	r3, r2, r3
 c103168:	e20330ff 	and	r3, r3, #255	; 0xff
 c10316c:	e203300f 	and	r3, r3, #15
 c103170:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c103174:	e1a00003 	mov	r0, r3
 c103178:	e24bd00c 	sub	sp, fp, #12
 c10317c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103180:	e12fff1e 	bx	lr
 c103184:	0c10a634 	.word	0x0c10a634

0c103188 <lcd_draw_hline>:

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
 c103188:	e1a0c00d 	mov	ip, sp
 c10318c:	e92dd800 	push	{fp, ip, lr, pc}
 c103190:	e24cb004 	sub	fp, ip, #4
 c103194:	e24dd010 	sub	sp, sp, #16
 c103198:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10319c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1031a0:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c1031a4:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 i,j;
    for(i = xleft; i < xright; i++){
 c1031a8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1031ac:	e14b30be 	strh	r3, [fp, #-14]
 c1031b0:	ea000015 	b	c10320c <lcd_draw_hline+0x84>
    	for(j = y; j < (y+width); j++){
 c1031b4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1031b8:	e14b31b0 	strh	r3, [fp, #-16]
 c1031bc:	ea000009 	b	c1031e8 <lcd_draw_hline+0x60>
    		lcd_putpixel(i, j, color);
 c1031c0:	e15b10be 	ldrh	r1, [fp, #-14]
 c1031c4:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1031c8:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c1031cc:	e1a00001 	mov	r0, r1
 c1031d0:	e1a01002 	mov	r1, r2
 c1031d4:	e1a02003 	mov	r2, r3
 c1031d8:	ebffff83 	bl	c102fec <lcd_putpixel>

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	uint16 i,j;
    for(i = xleft; i < xright; i++){
    	for(j = y; j < (y+width); j++){
 c1031dc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1031e0:	e2833001 	add	r3, r3, #1
 c1031e4:	e14b31b0 	strh	r3, [fp, #-16]
 c1031e8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1031ec:	e15b11ba 	ldrh	r1, [fp, #-26]	; 0xffffffe6
 c1031f0:	e1db30b4 	ldrh	r3, [fp, #4]
 c1031f4:	e0813003 	add	r3, r1, r3
 c1031f8:	e1520003 	cmp	r2, r3
 c1031fc:	baffffef 	blt	c1031c0 <lcd_draw_hline+0x38>
}

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	uint16 i,j;
    for(i = xleft; i < xright; i++){
 c103200:	e15b30be 	ldrh	r3, [fp, #-14]
 c103204:	e2833001 	add	r3, r3, #1
 c103208:	e14b30be 	strh	r3, [fp, #-14]
 c10320c:	e15b20be 	ldrh	r2, [fp, #-14]
 c103210:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103214:	e1520003 	cmp	r2, r3
 c103218:	3affffe5 	bcc	c1031b4 <lcd_draw_hline+0x2c>
    	for(j = y; j < (y+width); j++){
    		lcd_putpixel(i, j, color);
    	}
    }
}
 c10321c:	e24bd00c 	sub	sp, fp, #12
 c103220:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103224:	e12fff1e 	bx	lr

0c103228 <lcd_draw_vline>:

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
 c103228:	e1a0c00d 	mov	ip, sp
 c10322c:	e92dd800 	push	{fp, ip, lr, pc}
 c103230:	e24cb004 	sub	fp, ip, #4
 c103234:	e24dd010 	sub	sp, sp, #16
 c103238:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10323c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c103240:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c103244:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 i,j;
    for(i = yup; i < ydown; i++){
 c103248:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10324c:	e14b30be 	strh	r3, [fp, #-14]
 c103250:	ea000015 	b	c1032ac <lcd_draw_vline+0x84>
    	for(j = x; j < (x+width); j++){
 c103254:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c103258:	e14b31b0 	strh	r3, [fp, #-16]
 c10325c:	ea000009 	b	c103288 <lcd_draw_vline+0x60>
    		lcd_putpixel(j, i, color);
 c103260:	e15b11b0 	ldrh	r1, [fp, #-16]
 c103264:	e15b20be 	ldrh	r2, [fp, #-14]
 c103268:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c10326c:	e1a00001 	mov	r0, r1
 c103270:	e1a01002 	mov	r1, r2
 c103274:	e1a02003 	mov	r2, r3
 c103278:	ebffff5b 	bl	c102fec <lcd_putpixel>

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	uint16 i,j;
    for(i = yup; i < ydown; i++){
    	for(j = x; j < (x+width); j++){
 c10327c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c103280:	e2833001 	add	r3, r3, #1
 c103284:	e14b31b0 	strh	r3, [fp, #-16]
 c103288:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10328c:	e15b11ba 	ldrh	r1, [fp, #-26]	; 0xffffffe6
 c103290:	e1db30b4 	ldrh	r3, [fp, #4]
 c103294:	e0813003 	add	r3, r1, r3
 c103298:	e1520003 	cmp	r2, r3
 c10329c:	baffffef 	blt	c103260 <lcd_draw_vline+0x38>
}

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	uint16 i,j;
    for(i = yup; i < ydown; i++){
 c1032a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1032a4:	e2833001 	add	r3, r3, #1
 c1032a8:	e14b30be 	strh	r3, [fp, #-14]
 c1032ac:	e15b20be 	ldrh	r2, [fp, #-14]
 c1032b0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1032b4:	e1520003 	cmp	r2, r3
 c1032b8:	3affffe5 	bcc	c103254 <lcd_draw_vline+0x2c>
    	for(j = x; j < (x+width); j++){
    		lcd_putpixel(j, i, color);
    	}
    }
}
 c1032bc:	e24bd00c 	sub	sp, fp, #12
 c1032c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1032c4:	e12fff1e 	bx	lr

0c1032c8 <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width )
{
 c1032c8:	e1a0c00d 	mov	ip, sp
 c1032cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1032d0:	e24cb004 	sub	fp, ip, #4
 c1032d4:	e24dd010 	sub	sp, sp, #16
 c1032d8:	e14b00be 	strh	r0, [fp, #-14]
 c1032dc:	e14b11b0 	strh	r1, [fp, #-16]
 c1032e0:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c1032e4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_hline(xleft,xright,yup,color,width);
 c1032e8:	e15b00be 	ldrh	r0, [fp, #-14]
 c1032ec:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c1032f0:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1032f4:	e5db3004 	ldrb	r3, [fp, #4]
 c1032f8:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1032fc:	e58dc000 	str	ip, [sp]
 c103300:	ebffffa0 	bl	c103188 <lcd_draw_hline>
	lcd_draw_hline(xleft,xright,ydown,color,width);
 c103304:	e15b00be 	ldrh	r0, [fp, #-14]
 c103308:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c10330c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c103310:	e5db3004 	ldrb	r3, [fp, #4]
 c103314:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c103318:	e58dc000 	str	ip, [sp]
 c10331c:	ebffff99 	bl	c103188 <lcd_draw_hline>
	lcd_draw_vline(yup,ydown,xleft,color,width);
 c103320:	e15b01b0 	ldrh	r0, [fp, #-16]
 c103324:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c103328:	e15b20be 	ldrh	r2, [fp, #-14]
 c10332c:	e5db3004 	ldrb	r3, [fp, #4]
 c103330:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c103334:	e58dc000 	str	ip, [sp]
 c103338:	ebffffba 	bl	c103228 <lcd_draw_vline>
	lcd_draw_vline(yup,ydown + width,xright,color,width);
 c10333c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c103340:	e1db30b8 	ldrh	r3, [fp, #8]
 c103344:	e0823003 	add	r3, r2, r3
 c103348:	e1a03803 	lsl	r3, r3, #16
 c10334c:	e1a01823 	lsr	r1, r3, #16
 c103350:	e15b01b0 	ldrh	r0, [fp, #-16]
 c103354:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c103358:	e5db3004 	ldrb	r3, [fp, #4]
 c10335c:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c103360:	e58dc000 	str	ip, [sp]
 c103364:	ebffffaf 	bl	c103228 <lcd_draw_vline>
}
 c103368:	e24bd00c 	sub	sp, fp, #12
 c10336c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103370:	e12fff1e 	bx	lr

0c103374 <lcd_fill_box>:

void lcd_fill_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color )
{
 c103374:	e1a0c00d 	mov	ip, sp
 c103378:	e92dd800 	push	{fp, ip, lr, pc}
 c10337c:	e24cb004 	sub	fp, ip, #4
 c103380:	e24dd018 	sub	sp, sp, #24
 c103384:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c103388:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10338c:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c103390:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
	uint16 i;
	for(i = 0; i < ydown-yup; i++){
 c103394:	e3a03000 	mov	r3, #0
 c103398:	e14b30be 	strh	r3, [fp, #-14]
 c10339c:	ea000015 	b	c1033f8 <lcd_fill_box+0x84>
		lcd_draw_hline(xleft+i,xright+i,yup+i,color, 1);
 c1033a0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1033a4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1033a8:	e0823003 	add	r3, r2, r3
 c1033ac:	e1a03803 	lsl	r3, r3, #16
 c1033b0:	e1a00823 	lsr	r0, r3, #16
 c1033b4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c1033b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1033bc:	e0823003 	add	r3, r2, r3
 c1033c0:	e1a03803 	lsl	r3, r3, #16
 c1033c4:	e1a01823 	lsr	r1, r3, #16
 c1033c8:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c1033cc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1033d0:	e0823003 	add	r3, r2, r3
 c1033d4:	e1a03803 	lsl	r3, r3, #16
 c1033d8:	e1a02823 	lsr	r2, r3, #16
 c1033dc:	e5db3004 	ldrb	r3, [fp, #4]
 c1033e0:	e3a0c001 	mov	ip, #1
 c1033e4:	e58dc000 	str	ip, [sp]
 c1033e8:	ebffff66 	bl	c103188 <lcd_draw_hline>
}

void lcd_fill_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color )
{
	uint16 i;
	for(i = 0; i < ydown-yup; i++){
 c1033ec:	e15b30be 	ldrh	r3, [fp, #-14]
 c1033f0:	e2833001 	add	r3, r3, #1
 c1033f4:	e14b30be 	strh	r3, [fp, #-14]
 c1033f8:	e15b20be 	ldrh	r2, [fp, #-14]
 c1033fc:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c103400:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103404:	e0633001 	rsb	r3, r3, r1
 c103408:	e1520003 	cmp	r2, r3
 c10340c:	baffffe3 	blt	c1033a0 <lcd_fill_box+0x2c>
		lcd_draw_hline(xleft+i,xright+i,yup+i,color, 1);
	}
}
 c103410:	e24bd00c 	sub	sp, fp, #12
 c103414:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103418:	e12fff1e 	bx	lr

0c10341c <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
{
 c10341c:	e1a0c00d 	mov	ip, sp
 c103420:	e92dd800 	push	{fp, ip, lr, pc}
 c103424:	e24cb004 	sub	fp, ip, #4
 c103428:	e24dd010 	sub	sp, sp, #16
 c10342c:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c103430:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c103434:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c103438:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c10343c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c103440:	e1a03203 	lsl	r3, r3, #4
 c103444:	e1a02003 	mov	r2, r3
 c103448:	e59f311c 	ldr	r3, [pc, #284]	; c10356c <lcd_putchar+0x150>
 c10344c:	e0823003 	add	r3, r2, r3
 c103450:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( row=0; row<16; row++ )
 c103454:	e3a03000 	mov	r3, #0
 c103458:	e54b300d 	strb	r3, [fp, #-13]
 c10345c:	ea00003c 	b	c103554 <lcd_putchar+0x138>
        for( col=0; col<8; col++ )
 c103460:	e3a03000 	mov	r3, #0
 c103464:	e54b300e 	strb	r3, [fp, #-14]
 c103468:	ea000033 	b	c10353c <lcd_putchar+0x120>
            if( bitmap[row] & (0x80 >> col) )
 c10346c:	e55b300d 	ldrb	r3, [fp, #-13]
 c103470:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103474:	e0823003 	add	r3, r2, r3
 c103478:	e5d33000 	ldrb	r3, [r3]
 c10347c:	e1a02003 	mov	r2, r3
 c103480:	e55b300e 	ldrb	r3, [fp, #-14]
 c103484:	e3a01080 	mov	r1, #128	; 0x80
 c103488:	e1a03351 	asr	r3, r1, r3
 c10348c:	e0023003 	and	r3, r2, r3
 c103490:	e3530000 	cmp	r3, #0
 c103494:	0a000013 	beq	c1034e8 <lcd_putchar+0xcc>
                lcd_putpixel( x+col, y+row, color );
 c103498:	e55b300e 	ldrb	r3, [fp, #-14]
 c10349c:	e1a03803 	lsl	r3, r3, #16
 c1034a0:	e1a02823 	lsr	r2, r3, #16
 c1034a4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1034a8:	e0823003 	add	r3, r2, r3
 c1034ac:	e1a03803 	lsl	r3, r3, #16
 c1034b0:	e1a01823 	lsr	r1, r3, #16
 c1034b4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1034b8:	e1a03803 	lsl	r3, r3, #16
 c1034bc:	e1a02823 	lsr	r2, r3, #16
 c1034c0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1034c4:	e0823003 	add	r3, r2, r3
 c1034c8:	e1a03803 	lsl	r3, r3, #16
 c1034cc:	e1a02823 	lsr	r2, r3, #16
 c1034d0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1034d4:	e1a00001 	mov	r0, r1
 c1034d8:	e1a01002 	mov	r1, r2
 c1034dc:	e1a02003 	mov	r2, r3
 c1034e0:	ebfffec1 	bl	c102fec <lcd_putpixel>
 c1034e4:	ea000011 	b	c103530 <lcd_putchar+0x114>
            else
                lcd_putpixel( x+col, y+row, WHITE );
 c1034e8:	e55b300e 	ldrb	r3, [fp, #-14]
 c1034ec:	e1a03803 	lsl	r3, r3, #16
 c1034f0:	e1a02823 	lsr	r2, r3, #16
 c1034f4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1034f8:	e0823003 	add	r3, r2, r3
 c1034fc:	e1a03803 	lsl	r3, r3, #16
 c103500:	e1a02823 	lsr	r2, r3, #16
 c103504:	e55b300d 	ldrb	r3, [fp, #-13]
 c103508:	e1a03803 	lsl	r3, r3, #16
 c10350c:	e1a01823 	lsr	r1, r3, #16
 c103510:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103514:	e0813003 	add	r3, r1, r3
 c103518:	e1a03803 	lsl	r3, r3, #16
 c10351c:	e1a03823 	lsr	r3, r3, #16
 c103520:	e1a00002 	mov	r0, r2
 c103524:	e1a01003 	mov	r1, r3
 c103528:	e3a02000 	mov	r2, #0
 c10352c:	ebfffeae 	bl	c102fec <lcd_putpixel>
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
        for( col=0; col<8; col++ )
 c103530:	e55b300e 	ldrb	r3, [fp, #-14]
 c103534:	e2833001 	add	r3, r3, #1
 c103538:	e54b300e 	strb	r3, [fp, #-14]
 c10353c:	e55b300e 	ldrb	r3, [fp, #-14]
 c103540:	e3530007 	cmp	r3, #7
 c103544:	9affffc8 	bls	c10346c <lcd_putchar+0x50>
{
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
 c103548:	e55b300d 	ldrb	r3, [fp, #-13]
 c10354c:	e2833001 	add	r3, r3, #1
 c103550:	e54b300d 	strb	r3, [fp, #-13]
 c103554:	e55b300d 	ldrb	r3, [fp, #-13]
 c103558:	e353000f 	cmp	r3, #15
 c10355c:	9affffbf 	bls	c103460 <lcd_putchar+0x44>
        for( col=0; col<8; col++ )
            if( bitmap[row] & (0x80 >> col) )
                lcd_putpixel( x+col, y+row, color );
            else
                lcd_putpixel( x+col, y+row, WHITE );
}
 c103560:	e24bd00c 	sub	sp, fp, #12
 c103564:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103568:	e12fff1e 	bx	lr
 c10356c:	0c1094d4 	.word	0x0c1094d4

0c103570 <lcd_putchar_inverted>:

void lcd_putchar_inverted( uint16 x, uint16 y, uint8 color, char ch )
{
 c103570:	e1a0c00d 	mov	ip, sp
 c103574:	e92dd800 	push	{fp, ip, lr, pc}
 c103578:	e24cb004 	sub	fp, ip, #4
 c10357c:	e24dd010 	sub	sp, sp, #16
 c103580:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c103584:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c103588:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c10358c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c103590:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c103594:	e1a03203 	lsl	r3, r3, #4
 c103598:	e1a02003 	mov	r2, r3
 c10359c:	e59f311c 	ldr	r3, [pc, #284]	; c1036c0 <lcd_putchar_inverted+0x150>
 c1035a0:	e0823003 	add	r3, r2, r3
 c1035a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( row=0; row<16; row++ )
 c1035a8:	e3a03000 	mov	r3, #0
 c1035ac:	e54b300d 	strb	r3, [fp, #-13]
 c1035b0:	ea00003c 	b	c1036a8 <lcd_putchar_inverted+0x138>
        for( col=0; col<8; col++ )
 c1035b4:	e3a03000 	mov	r3, #0
 c1035b8:	e54b300e 	strb	r3, [fp, #-14]
 c1035bc:	ea000033 	b	c103690 <lcd_putchar_inverted+0x120>
            if( bitmap[row] & (0x80 >> col) )
 c1035c0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1035c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1035c8:	e0823003 	add	r3, r2, r3
 c1035cc:	e5d33000 	ldrb	r3, [r3]
 c1035d0:	e1a02003 	mov	r2, r3
 c1035d4:	e55b300e 	ldrb	r3, [fp, #-14]
 c1035d8:	e3a01080 	mov	r1, #128	; 0x80
 c1035dc:	e1a03351 	asr	r3, r1, r3
 c1035e0:	e0023003 	and	r3, r2, r3
 c1035e4:	e3530000 	cmp	r3, #0
 c1035e8:	0a000012 	beq	c103638 <lcd_putchar_inverted+0xc8>
                lcd_putpixel( x+col, y+row, WHITE );
 c1035ec:	e55b300e 	ldrb	r3, [fp, #-14]
 c1035f0:	e1a03803 	lsl	r3, r3, #16
 c1035f4:	e1a02823 	lsr	r2, r3, #16
 c1035f8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1035fc:	e0823003 	add	r3, r2, r3
 c103600:	e1a03803 	lsl	r3, r3, #16
 c103604:	e1a02823 	lsr	r2, r3, #16
 c103608:	e55b300d 	ldrb	r3, [fp, #-13]
 c10360c:	e1a03803 	lsl	r3, r3, #16
 c103610:	e1a01823 	lsr	r1, r3, #16
 c103614:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103618:	e0813003 	add	r3, r1, r3
 c10361c:	e1a03803 	lsl	r3, r3, #16
 c103620:	e1a03823 	lsr	r3, r3, #16
 c103624:	e1a00002 	mov	r0, r2
 c103628:	e1a01003 	mov	r1, r3
 c10362c:	e3a02000 	mov	r2, #0
 c103630:	ebfffe6d 	bl	c102fec <lcd_putpixel>
 c103634:	ea000012 	b	c103684 <lcd_putchar_inverted+0x114>
            else
                lcd_putpixel( x+col, y+row, color );
 c103638:	e55b300e 	ldrb	r3, [fp, #-14]
 c10363c:	e1a03803 	lsl	r3, r3, #16
 c103640:	e1a02823 	lsr	r2, r3, #16
 c103644:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103648:	e0823003 	add	r3, r2, r3
 c10364c:	e1a03803 	lsl	r3, r3, #16
 c103650:	e1a01823 	lsr	r1, r3, #16
 c103654:	e55b300d 	ldrb	r3, [fp, #-13]
 c103658:	e1a03803 	lsl	r3, r3, #16
 c10365c:	e1a02823 	lsr	r2, r3, #16
 c103660:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103664:	e0823003 	add	r3, r2, r3
 c103668:	e1a03803 	lsl	r3, r3, #16
 c10366c:	e1a02823 	lsr	r2, r3, #16
 c103670:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c103674:	e1a00001 	mov	r0, r1
 c103678:	e1a01002 	mov	r1, r2
 c10367c:	e1a02003 	mov	r2, r3
 c103680:	ebfffe59 	bl	c102fec <lcd_putpixel>
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
        for( col=0; col<8; col++ )
 c103684:	e55b300e 	ldrb	r3, [fp, #-14]
 c103688:	e2833001 	add	r3, r3, #1
 c10368c:	e54b300e 	strb	r3, [fp, #-14]
 c103690:	e55b300e 	ldrb	r3, [fp, #-14]
 c103694:	e3530007 	cmp	r3, #7
 c103698:	9affffc8 	bls	c1035c0 <lcd_putchar_inverted+0x50>
{
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
 c10369c:	e55b300d 	ldrb	r3, [fp, #-13]
 c1036a0:	e2833001 	add	r3, r3, #1
 c1036a4:	e54b300d 	strb	r3, [fp, #-13]
 c1036a8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1036ac:	e353000f 	cmp	r3, #15
 c1036b0:	9affffbf 	bls	c1035b4 <lcd_putchar_inverted+0x44>
        for( col=0; col<8; col++ )
            if( bitmap[row] & (0x80 >> col) )
                lcd_putpixel( x+col, y+row, WHITE );
            else
                lcd_putpixel( x+col, y+row, color );
}
 c1036b4:	e24bd00c 	sub	sp, fp, #12
 c1036b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1036bc:	e12fff1e 	bx	lr
 c1036c0:	0c1094d4 	.word	0x0c1094d4

0c1036c4 <lcd_putchar_upsidedown>:

void lcd_putchar_upsidedown( uint16 x, uint16 y, uint8 color, char ch )
{
 c1036c4:	e1a0c00d 	mov	ip, sp
 c1036c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1036cc:	e24cb004 	sub	fp, ip, #4
 c1036d0:	e24dd010 	sub	sp, sp, #16
 c1036d4:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1036d8:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1036dc:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c1036e0:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c1036e4:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c1036e8:	e1a03203 	lsl	r3, r3, #4
 c1036ec:	e1a02003 	mov	r2, r3
 c1036f0:	e59f314c 	ldr	r3, [pc, #332]	; c103844 <lcd_putchar_upsidedown+0x180>
 c1036f4:	e0823003 	add	r3, r2, r3
 c1036f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( row=0; row<16; row++ )
 c1036fc:	e3a03000 	mov	r3, #0
 c103700:	e54b300d 	strb	r3, [fp, #-13]
 c103704:	ea000048 	b	c10382c <lcd_putchar_upsidedown+0x168>
        for( col=0; col<8; col++ )
 c103708:	e3a03000 	mov	r3, #0
 c10370c:	e54b300e 	strb	r3, [fp, #-14]
 c103710:	ea00003f 	b	c103814 <lcd_putchar_upsidedown+0x150>
            if( bitmap[row] & (0x80 >> col) )
 c103714:	e55b300d 	ldrb	r3, [fp, #-13]
 c103718:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10371c:	e0823003 	add	r3, r2, r3
 c103720:	e5d33000 	ldrb	r3, [r3]
 c103724:	e1a02003 	mov	r2, r3
 c103728:	e55b300e 	ldrb	r3, [fp, #-14]
 c10372c:	e3a01080 	mov	r1, #128	; 0x80
 c103730:	e1a03351 	asr	r3, r1, r3
 c103734:	e0023003 	and	r3, r2, r3
 c103738:	e3530000 	cmp	r3, #0
 c10373c:	0a000019 	beq	c1037a8 <lcd_putchar_upsidedown+0xe4>
                lcd_putpixel( x-col+7, y-row+15, color );
 c103740:	e55b300e 	ldrb	r3, [fp, #-14]
 c103744:	e1a03803 	lsl	r3, r3, #16
 c103748:	e1a03823 	lsr	r3, r3, #16
 c10374c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c103750:	e0633002 	rsb	r3, r3, r2
 c103754:	e1a03803 	lsl	r3, r3, #16
 c103758:	e1a03823 	lsr	r3, r3, #16
 c10375c:	e2833007 	add	r3, r3, #7
 c103760:	e1a03803 	lsl	r3, r3, #16
 c103764:	e1a01823 	lsr	r1, r3, #16
 c103768:	e55b300d 	ldrb	r3, [fp, #-13]
 c10376c:	e1a03803 	lsl	r3, r3, #16
 c103770:	e1a03823 	lsr	r3, r3, #16
 c103774:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c103778:	e0633002 	rsb	r3, r3, r2
 c10377c:	e1a03803 	lsl	r3, r3, #16
 c103780:	e1a03823 	lsr	r3, r3, #16
 c103784:	e283300f 	add	r3, r3, #15
 c103788:	e1a03803 	lsl	r3, r3, #16
 c10378c:	e1a02823 	lsr	r2, r3, #16
 c103790:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c103794:	e1a00001 	mov	r0, r1
 c103798:	e1a01002 	mov	r1, r2
 c10379c:	e1a02003 	mov	r2, r3
 c1037a0:	ebfffe11 	bl	c102fec <lcd_putpixel>
 c1037a4:	ea000017 	b	c103808 <lcd_putchar_upsidedown+0x144>
            else
                lcd_putpixel( x-col+7, y-row+15, WHITE );
 c1037a8:	e55b300e 	ldrb	r3, [fp, #-14]
 c1037ac:	e1a03803 	lsl	r3, r3, #16
 c1037b0:	e1a03823 	lsr	r3, r3, #16
 c1037b4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1037b8:	e0633002 	rsb	r3, r3, r2
 c1037bc:	e1a03803 	lsl	r3, r3, #16
 c1037c0:	e1a03823 	lsr	r3, r3, #16
 c1037c4:	e2833007 	add	r3, r3, #7
 c1037c8:	e1a03803 	lsl	r3, r3, #16
 c1037cc:	e1a02823 	lsr	r2, r3, #16
 c1037d0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1037d4:	e1a03803 	lsl	r3, r3, #16
 c1037d8:	e1a03823 	lsr	r3, r3, #16
 c1037dc:	e15b11b8 	ldrh	r1, [fp, #-24]	; 0xffffffe8
 c1037e0:	e0633001 	rsb	r3, r3, r1
 c1037e4:	e1a03803 	lsl	r3, r3, #16
 c1037e8:	e1a03823 	lsr	r3, r3, #16
 c1037ec:	e283300f 	add	r3, r3, #15
 c1037f0:	e1a03803 	lsl	r3, r3, #16
 c1037f4:	e1a03823 	lsr	r3, r3, #16
 c1037f8:	e1a00002 	mov	r0, r2
 c1037fc:	e1a01003 	mov	r1, r3
 c103800:	e3a02000 	mov	r2, #0
 c103804:	ebfffdf8 	bl	c102fec <lcd_putpixel>
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
        for( col=0; col<8; col++ )
 c103808:	e55b300e 	ldrb	r3, [fp, #-14]
 c10380c:	e2833001 	add	r3, r3, #1
 c103810:	e54b300e 	strb	r3, [fp, #-14]
 c103814:	e55b300e 	ldrb	r3, [fp, #-14]
 c103818:	e3530007 	cmp	r3, #7
 c10381c:	9affffbc 	bls	c103714 <lcd_putchar_upsidedown+0x50>
{
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
 c103820:	e55b300d 	ldrb	r3, [fp, #-13]
 c103824:	e2833001 	add	r3, r3, #1
 c103828:	e54b300d 	strb	r3, [fp, #-13]
 c10382c:	e55b300d 	ldrb	r3, [fp, #-13]
 c103830:	e353000f 	cmp	r3, #15
 c103834:	9affffb3 	bls	c103708 <lcd_putchar_upsidedown+0x44>
        for( col=0; col<8; col++ )
            if( bitmap[row] & (0x80 >> col) )
                lcd_putpixel( x-col+7, y-row+15, color );
            else
                lcd_putpixel( x-col+7, y-row+15, WHITE );
}
 c103838:	e24bd00c 	sub	sp, fp, #12
 c10383c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103840:	e12fff1e 	bx	lr
 c103844:	0c1094d4 	.word	0x0c1094d4

0c103848 <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
 c103848:	e1a0c00d 	mov	ip, sp
 c10384c:	e92dd800 	push	{fp, ip, lr, pc}
 c103850:	e24cb004 	sub	fp, ip, #4
 c103854:	e24dd010 	sub	sp, sp, #16
 c103858:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10385c:	e14b00be 	strh	r0, [fp, #-14]
 c103860:	e14b11b0 	strh	r1, [fp, #-16]
 c103864:	e1a03002 	mov	r3, r2
 c103868:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	while(*s != '\0'){
 c10386c:	ea00000b 	b	c1038a0 <lcd_puts+0x58>
		lcd_putchar(x,y,color, *s++);
 c103870:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103874:	e5d33000 	ldrb	r3, [r3]
 c103878:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10387c:	e2822001 	add	r2, r2, #1
 c103880:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c103884:	e15b00be 	ldrh	r0, [fp, #-14]
 c103888:	e15b11b0 	ldrh	r1, [fp, #-16]
 c10388c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c103890:	ebfffee1 	bl	c10341c <lcd_putchar>
		x += 8;
 c103894:	e15b30be 	ldrh	r3, [fp, #-14]
 c103898:	e2833008 	add	r3, r3, #8
 c10389c:	e14b30be 	strh	r3, [fp, #-14]
                lcd_putpixel( x-col+7, y-row+15, WHITE );
}

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
	while(*s != '\0'){
 c1038a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1038a4:	e5d33000 	ldrb	r3, [r3]
 c1038a8:	e3530000 	cmp	r3, #0
 c1038ac:	1affffef 	bne	c103870 <lcd_puts+0x28>
		lcd_putchar(x,y,color, *s++);
		x += 8;
	}
}
 c1038b0:	e24bd00c 	sub	sp, fp, #12
 c1038b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1038b8:	e12fff1e 	bx	lr

0c1038bc <lcd_putint>:

void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
{
 c1038bc:	e1a0c00d 	mov	ip, sp
 c1038c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1038c4:	e24cb004 	sub	fp, ip, #4
 c1038c8:	e24dd028 	sub	sp, sp, #40	; 0x28
 c1038cc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c1038d0:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c1038d4:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c1038d8:	e1a03002 	mov	r3, r2
 c1038dc:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	char buf[12];
	    char *ptr = buf + 12;
 c1038e0:	e24b3024 	sub	r3, fp, #36	; 0x24
 c1038e4:	e283300c 	add	r3, r3, #12
 c1038e8:	e50b3010 	str	r3, [fp, #-16]
	    *ptr = '\0';
 c1038ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1038f0:	e3a02000 	mov	r2, #0
 c1038f4:	e5c32000 	strb	r2, [r3]
	    uint8 c;
	    int neg = 0;
 c1038f8:	e3a03000 	mov	r3, #0
 c1038fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	    if(i < 0) {
 c103900:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c103904:	e3530000 	cmp	r3, #0
 c103908:	aa000004 	bge	c103920 <lcd_putint+0x64>
	        i *= -1;
 c10390c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c103910:	e2633000 	rsb	r3, r3, #0
 c103914:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	        neg = 1;
 c103918:	e3a03001 	mov	r3, #1
 c10391c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	    }

	    do {
	        	c = i % 10;
 c103920:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c103924:	e59f30c0 	ldr	r3, [pc, #192]	; c1039ec <lcd_putint+0x130>
 c103928:	e0c32391 	smull	r2, r3, r1, r3
 c10392c:	e1a02143 	asr	r2, r3, #2
 c103930:	e1a03fc1 	asr	r3, r1, #31
 c103934:	e0632002 	rsb	r2, r3, r2
 c103938:	e1a03002 	mov	r3, r2
 c10393c:	e1a03103 	lsl	r3, r3, #2
 c103940:	e0833002 	add	r3, r3, r2
 c103944:	e1a03083 	lsl	r3, r3, #1
 c103948:	e0632001 	rsb	r2, r3, r1
 c10394c:	e1a03002 	mov	r3, r2
 c103950:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	        	*--ptr = '0' + c;
 c103954:	e51b3010 	ldr	r3, [fp, #-16]
 c103958:	e2433001 	sub	r3, r3, #1
 c10395c:	e50b3010 	str	r3, [fp, #-16]
 c103960:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103964:	e2833030 	add	r3, r3, #48	; 0x30
 c103968:	e20320ff 	and	r2, r3, #255	; 0xff
 c10396c:	e51b3010 	ldr	r3, [fp, #-16]
 c103970:	e5c32000 	strb	r2, [r3]
	        	i /= 10;
 c103974:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c103978:	e59f206c 	ldr	r2, [pc, #108]	; c1039ec <lcd_putint+0x130>
 c10397c:	e0c21293 	smull	r1, r2, r3, r2
 c103980:	e1a02142 	asr	r2, r2, #2
 c103984:	e1a03fc3 	asr	r3, r3, #31
 c103988:	e0633002 	rsb	r3, r3, r2
 c10398c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	        } while(i);
 c103990:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c103994:	e3530000 	cmp	r3, #0
 c103998:	1affffe0 	bne	c103920 <lcd_putint+0x64>

	    if(neg) *--ptr = '-';
 c10399c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1039a0:	e3530000 	cmp	r3, #0
 c1039a4:	0a000005 	beq	c1039c0 <lcd_putint+0x104>
 c1039a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1039ac:	e2433001 	sub	r3, r3, #1
 c1039b0:	e50b3010 	str	r3, [fp, #-16]
 c1039b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1039b8:	e3a0202d 	mov	r2, #45	; 0x2d
 c1039bc:	e5c32000 	strb	r2, [r3]

	    lcd_puts(x,y,color,ptr);
 c1039c0:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c1039c4:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c1039c8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c1039cc:	e1a00001 	mov	r0, r1
 c1039d0:	e1a01002 	mov	r1, r2
 c1039d4:	e1a02003 	mov	r2, r3
 c1039d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1039dc:	ebffff99 	bl	c103848 <lcd_puts>
}
 c1039e0:	e24bd00c 	sub	sp, fp, #12
 c1039e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1039e8:	e12fff1e 	bx	lr
 c1039ec:	66666667 	.word	0x66666667

0c1039f0 <lcd_puthex>:

void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c1039f0:	e1a0c00d 	mov	ip, sp
 c1039f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1039f8:	e24cb004 	sub	fp, ip, #4
 c1039fc:	e24dd020 	sub	sp, sp, #32
 c103a00:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c103a04:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c103a08:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c103a0c:	e1a03002 	mov	r3, r2
 c103a10:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
	char buf[8 + 1];
	    char *p = buf + 8;
 c103a14:	e24b301c 	sub	r3, fp, #28
 c103a18:	e2833008 	add	r3, r3, #8
 c103a1c:	e50b3010 	str	r3, [fp, #-16]
	    uint8 c;

	    *p = '\0';
 c103a20:	e51b3010 	ldr	r3, [fp, #-16]
 c103a24:	e3a02000 	mov	r2, #0
 c103a28:	e5c32000 	strb	r2, [r3]

	    do {
	        c = i & 0xf;
 c103a2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103a30:	e20330ff 	and	r3, r3, #255	; 0xff
 c103a34:	e203300f 	and	r3, r3, #15
 c103a38:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	        if( c < 10 )
 c103a3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103a40:	e3530009 	cmp	r3, #9
 c103a44:	8a000008 	bhi	c103a6c <lcd_puthex+0x7c>
	            *--p = '0' + c;
 c103a48:	e51b3010 	ldr	r3, [fp, #-16]
 c103a4c:	e2433001 	sub	r3, r3, #1
 c103a50:	e50b3010 	str	r3, [fp, #-16]
 c103a54:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103a58:	e2833030 	add	r3, r3, #48	; 0x30
 c103a5c:	e20320ff 	and	r2, r3, #255	; 0xff
 c103a60:	e51b3010 	ldr	r3, [fp, #-16]
 c103a64:	e5c32000 	strb	r2, [r3]
 c103a68:	ea000007 	b	c103a8c <lcd_puthex+0x9c>
	        else
	            *--p = 'a' + c - 10;
 c103a6c:	e51b3010 	ldr	r3, [fp, #-16]
 c103a70:	e2433001 	sub	r3, r3, #1
 c103a74:	e50b3010 	str	r3, [fp, #-16]
 c103a78:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103a7c:	e2833057 	add	r3, r3, #87	; 0x57
 c103a80:	e20320ff 	and	r2, r3, #255	; 0xff
 c103a84:	e51b3010 	ldr	r3, [fp, #-16]
 c103a88:	e5c32000 	strb	r2, [r3]
	        i = i >> 4;
 c103a8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103a90:	e1a03223 	lsr	r3, r3, #4
 c103a94:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	    } while( i );
 c103a98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103a9c:	e3530000 	cmp	r3, #0
 c103aa0:	1affffe1 	bne	c103a2c <lcd_puthex+0x3c>

	    lcd_puts(x,y,color,p);
 c103aa4:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c103aa8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c103aac:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c103ab0:	e1a00001 	mov	r0, r1
 c103ab4:	e1a01002 	mov	r1, r2
 c103ab8:	e1a02003 	mov	r2, r3
 c103abc:	e51b3010 	ldr	r3, [fp, #-16]
 c103ac0:	ebffff60 	bl	c103848 <lcd_puts>
}
 c103ac4:	e24bd00c 	sub	sp, fp, #12
 c103ac8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103acc:	e12fff1e 	bx	lr

0c103ad0 <lcd_putchar_x2>:

void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
 c103ad0:	e1a0c00d 	mov	ip, sp
 c103ad4:	e92dd800 	push	{fp, ip, lr, pc}
 c103ad8:	e24cb004 	sub	fp, ip, #4
 c103adc:	e24dd018 	sub	sp, sp, #24
 c103ae0:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c103ae4:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c103ae8:	e54b2021 	strb	r2, [fp, #-33]	; 0xffffffdf
 c103aec:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
	uint8 row, col;
	uint8 *bitmap;

 c103af0:	e3a03000 	mov	r3, #0
 c103af4:	e14b31b0 	strh	r3, [fp, #-16]
 c103af8:	e3a03000 	mov	r3, #0
 c103afc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	bitmap = font + ch*16;
	for( row=0; row<32; row++ )
 c103b00:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
 c103b04:	e1a03203 	lsl	r3, r3, #4
 c103b08:	e1a02003 	mov	r2, r3
 c103b0c:	e59f3408 	ldr	r3, [pc, #1032]	; c103f1c <lcd_putchar_x2+0x44c>
 c103b10:	e0823003 	add	r3, r2, r3
 c103b14:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		for( col=0; col<16; col++ )
 c103b18:	e3a03000 	mov	r3, #0
 c103b1c:	e54b300d 	strb	r3, [fp, #-13]
 c103b20:	ea0000f7 	b	c103f04 <lcd_putchar_x2+0x434>
			if( bitmap[row >> 1] & (0x80 >> (col >> 1)) ){
				lcd_putpixel( x+col, y+row, color );
 c103b24:	e3a03000 	mov	r3, #0
 c103b28:	e54b300e 	strb	r3, [fp, #-14]
 c103b2c:	ea0000ee 	b	c103eec <lcd_putchar_x2+0x41c>
			}
 c103b30:	e55b300d 	ldrb	r3, [fp, #-13]
 c103b34:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103b38:	e0823003 	add	r3, r2, r3
 c103b3c:	e5d33000 	ldrb	r3, [r3]
 c103b40:	e1a02003 	mov	r2, r3
 c103b44:	e55b300e 	ldrb	r3, [fp, #-14]
 c103b48:	e3a01080 	mov	r1, #128	; 0x80
 c103b4c:	e1a03351 	asr	r3, r1, r3
 c103b50:	e0023003 	and	r3, r2, r3
 c103b54:	e3530000 	cmp	r3, #0
 c103b58:	0a000072 	beq	c103d28 <lcd_putchar_x2+0x258>
			else{
 c103b5c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103b60:	e55b300e 	ldrb	r3, [fp, #-14]
 c103b64:	e0823003 	add	r3, r2, r3
 c103b68:	e2433009 	sub	r3, r3, #9
 c103b6c:	e1a03803 	lsl	r3, r3, #16
 c103b70:	e1a03823 	lsr	r3, r3, #16
 c103b74:	e1a03083 	lsl	r3, r3, #1
 c103b78:	e1a03803 	lsl	r3, r3, #16
 c103b7c:	e1a01823 	lsr	r1, r3, #16
 c103b80:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c103b84:	e55b300d 	ldrb	r3, [fp, #-13]
 c103b88:	e0823003 	add	r3, r2, r3
 c103b8c:	e1a03803 	lsl	r3, r3, #16
 c103b90:	e1a03823 	lsr	r3, r3, #16
 c103b94:	e1a03083 	lsl	r3, r3, #1
 c103b98:	e1a03803 	lsl	r3, r3, #16
 c103b9c:	e1a02823 	lsr	r2, r3, #16
 c103ba0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103ba4:	e0633002 	rsb	r3, r3, r2
 c103ba8:	e1a03803 	lsl	r3, r3, #16
 c103bac:	e1a02823 	lsr	r2, r3, #16
 c103bb0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c103bb4:	e1a00001 	mov	r0, r1
 c103bb8:	e1a01002 	mov	r1, r2
 c103bbc:	e1a02003 	mov	r2, r3
 c103bc0:	ebfffd09 	bl	c102fec <lcd_putpixel>
				lcd_putpixel( x+col, y+row, WHITE );
 c103bc4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103bc8:	e55b300e 	ldrb	r3, [fp, #-14]
 c103bcc:	e0823003 	add	r3, r2, r3
 c103bd0:	e1a03803 	lsl	r3, r3, #16
 c103bd4:	e1a03823 	lsr	r3, r3, #16
 c103bd8:	e1a03083 	lsl	r3, r3, #1
 c103bdc:	e1a03803 	lsl	r3, r3, #16
 c103be0:	e1a03823 	lsr	r3, r3, #16
 c103be4:	e2433013 	sub	r3, r3, #19
 c103be8:	e1a03803 	lsl	r3, r3, #16
 c103bec:	e1a01823 	lsr	r1, r3, #16
 c103bf0:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c103bf4:	e55b300d 	ldrb	r3, [fp, #-13]
 c103bf8:	e0823003 	add	r3, r2, r3
 c103bfc:	e1a03803 	lsl	r3, r3, #16
 c103c00:	e1a03823 	lsr	r3, r3, #16
 c103c04:	e1a03083 	lsl	r3, r3, #1
 c103c08:	e1a03803 	lsl	r3, r3, #16
 c103c0c:	e1a02823 	lsr	r2, r3, #16
 c103c10:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103c14:	e0633002 	rsb	r3, r3, r2
 c103c18:	e1a03803 	lsl	r3, r3, #16
 c103c1c:	e1a02823 	lsr	r2, r3, #16
 c103c20:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c103c24:	e1a00001 	mov	r0, r1
 c103c28:	e1a01002 	mov	r1, r2
 c103c2c:	e1a02003 	mov	r2, r3
 c103c30:	ebfffced 	bl	c102fec <lcd_putpixel>
			}
 c103c34:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103c38:	e55b300e 	ldrb	r3, [fp, #-14]
 c103c3c:	e0823003 	add	r3, r2, r3
 c103c40:	e2433009 	sub	r3, r3, #9
 c103c44:	e1a03803 	lsl	r3, r3, #16
 c103c48:	e1a03823 	lsr	r3, r3, #16
 c103c4c:	e1a03083 	lsl	r3, r3, #1
 c103c50:	e1a03803 	lsl	r3, r3, #16
 c103c54:	e1a01823 	lsr	r1, r3, #16
 c103c58:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c103c5c:	e55b300d 	ldrb	r3, [fp, #-13]
 c103c60:	e0823003 	add	r3, r2, r3
 c103c64:	e1a03803 	lsl	r3, r3, #16
 c103c68:	e1a03823 	lsr	r3, r3, #16
 c103c6c:	e1a03083 	lsl	r3, r3, #1
 c103c70:	e1a03803 	lsl	r3, r3, #16
 c103c74:	e1a02823 	lsr	r2, r3, #16
 c103c78:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103c7c:	e0633002 	rsb	r3, r3, r2
 c103c80:	e1a03803 	lsl	r3, r3, #16
 c103c84:	e1a03823 	lsr	r3, r3, #16
 c103c88:	e2833001 	add	r3, r3, #1
 c103c8c:	e1a03803 	lsl	r3, r3, #16
 c103c90:	e1a02823 	lsr	r2, r3, #16
 c103c94:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c103c98:	e1a00001 	mov	r0, r1
 c103c9c:	e1a01002 	mov	r1, r2
 c103ca0:	e1a02003 	mov	r2, r3
 c103ca4:	ebfffcd0 	bl	c102fec <lcd_putpixel>
}
 c103ca8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103cac:	e55b300e 	ldrb	r3, [fp, #-14]
 c103cb0:	e0823003 	add	r3, r2, r3
 c103cb4:	e1a03803 	lsl	r3, r3, #16
 c103cb8:	e1a03823 	lsr	r3, r3, #16
 c103cbc:	e1a03083 	lsl	r3, r3, #1
 c103cc0:	e1a03803 	lsl	r3, r3, #16
 c103cc4:	e1a03823 	lsr	r3, r3, #16
 c103cc8:	e2433013 	sub	r3, r3, #19
 c103ccc:	e1a03803 	lsl	r3, r3, #16
 c103cd0:	e1a01823 	lsr	r1, r3, #16
 c103cd4:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c103cd8:	e55b300d 	ldrb	r3, [fp, #-13]
 c103cdc:	e0823003 	add	r3, r2, r3
 c103ce0:	e1a03803 	lsl	r3, r3, #16
 c103ce4:	e1a03823 	lsr	r3, r3, #16
 c103ce8:	e1a03083 	lsl	r3, r3, #1
 c103cec:	e1a03803 	lsl	r3, r3, #16
 c103cf0:	e1a02823 	lsr	r2, r3, #16
 c103cf4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103cf8:	e0633002 	rsb	r3, r3, r2
 c103cfc:	e1a03803 	lsl	r3, r3, #16
 c103d00:	e1a03823 	lsr	r3, r3, #16
 c103d04:	e2833001 	add	r3, r3, #1
 c103d08:	e1a03803 	lsl	r3, r3, #16
 c103d0c:	e1a02823 	lsr	r2, r3, #16
 c103d10:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c103d14:	e1a00001 	mov	r0, r1
 c103d18:	e1a01002 	mov	r1, r2
 c103d1c:	e1a02003 	mov	r2, r3
 c103d20:	ebfffcb1 	bl	c102fec <lcd_putpixel>
 c103d24:	ea00006d 	b	c103ee0 <lcd_putchar_x2+0x410>

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
	while(*s != '\0'){
 c103d28:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103d2c:	e55b300e 	ldrb	r3, [fp, #-14]
 c103d30:	e0823003 	add	r3, r2, r3
 c103d34:	e2433009 	sub	r3, r3, #9
 c103d38:	e1a03803 	lsl	r3, r3, #16
 c103d3c:	e1a03823 	lsr	r3, r3, #16
 c103d40:	e1a03083 	lsl	r3, r3, #1
 c103d44:	e1a03803 	lsl	r3, r3, #16
 c103d48:	e1a02823 	lsr	r2, r3, #16
 c103d4c:	e15b12b0 	ldrh	r1, [fp, #-32]	; 0xffffffe0
 c103d50:	e55b300d 	ldrb	r3, [fp, #-13]
 c103d54:	e0813003 	add	r3, r1, r3
 c103d58:	e1a03803 	lsl	r3, r3, #16
 c103d5c:	e1a03823 	lsr	r3, r3, #16
 c103d60:	e1a03083 	lsl	r3, r3, #1
 c103d64:	e1a03803 	lsl	r3, r3, #16
 c103d68:	e1a01823 	lsr	r1, r3, #16
 c103d6c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103d70:	e0633001 	rsb	r3, r3, r1
 c103d74:	e1a03803 	lsl	r3, r3, #16
 c103d78:	e1a03823 	lsr	r3, r3, #16
 c103d7c:	e1a00002 	mov	r0, r2
 c103d80:	e1a01003 	mov	r1, r3
 c103d84:	e3a02000 	mov	r2, #0
 c103d88:	ebfffc97 	bl	c102fec <lcd_putpixel>
		lcd_putchar_x2(x, y, color, *s++);
 c103d8c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103d90:	e55b300e 	ldrb	r3, [fp, #-14]
 c103d94:	e0823003 	add	r3, r2, r3
 c103d98:	e1a03803 	lsl	r3, r3, #16
 c103d9c:	e1a03823 	lsr	r3, r3, #16
 c103da0:	e1a03083 	lsl	r3, r3, #1
 c103da4:	e1a03803 	lsl	r3, r3, #16
 c103da8:	e1a03823 	lsr	r3, r3, #16
 c103dac:	e2433013 	sub	r3, r3, #19
 c103db0:	e1a03803 	lsl	r3, r3, #16
 c103db4:	e1a02823 	lsr	r2, r3, #16
 c103db8:	e15b12b0 	ldrh	r1, [fp, #-32]	; 0xffffffe0
 c103dbc:	e55b300d 	ldrb	r3, [fp, #-13]
 c103dc0:	e0813003 	add	r3, r1, r3
 c103dc4:	e1a03803 	lsl	r3, r3, #16
 c103dc8:	e1a03823 	lsr	r3, r3, #16
 c103dcc:	e1a03083 	lsl	r3, r3, #1
 c103dd0:	e1a03803 	lsl	r3, r3, #16
 c103dd4:	e1a01823 	lsr	r1, r3, #16
 c103dd8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103ddc:	e0633001 	rsb	r3, r3, r1
 c103de0:	e1a03803 	lsl	r3, r3, #16
 c103de4:	e1a03823 	lsr	r3, r3, #16
 c103de8:	e1a00002 	mov	r0, r2
 c103dec:	e1a01003 	mov	r1, r3
 c103df0:	e3a02000 	mov	r2, #0
 c103df4:	ebfffc7c 	bl	c102fec <lcd_putpixel>
		x += 16;
 c103df8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103dfc:	e55b300e 	ldrb	r3, [fp, #-14]
 c103e00:	e0823003 	add	r3, r2, r3
 c103e04:	e2433009 	sub	r3, r3, #9
 c103e08:	e1a03803 	lsl	r3, r3, #16
 c103e0c:	e1a03823 	lsr	r3, r3, #16
 c103e10:	e1a03083 	lsl	r3, r3, #1
 c103e14:	e1a03803 	lsl	r3, r3, #16
 c103e18:	e1a02823 	lsr	r2, r3, #16
 c103e1c:	e15b12b0 	ldrh	r1, [fp, #-32]	; 0xffffffe0
 c103e20:	e55b300d 	ldrb	r3, [fp, #-13]
 c103e24:	e0813003 	add	r3, r1, r3
 c103e28:	e1a03803 	lsl	r3, r3, #16
 c103e2c:	e1a03823 	lsr	r3, r3, #16
 c103e30:	e1a03083 	lsl	r3, r3, #1
 c103e34:	e1a03803 	lsl	r3, r3, #16
 c103e38:	e1a01823 	lsr	r1, r3, #16
 c103e3c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103e40:	e0633001 	rsb	r3, r3, r1
 c103e44:	e1a03803 	lsl	r3, r3, #16
 c103e48:	e1a03823 	lsr	r3, r3, #16
 c103e4c:	e2833001 	add	r3, r3, #1
 c103e50:	e1a03803 	lsl	r3, r3, #16
 c103e54:	e1a03823 	lsr	r3, r3, #16
 c103e58:	e1a00002 	mov	r0, r2
 c103e5c:	e1a01003 	mov	r1, r3
 c103e60:	e3a02000 	mov	r2, #0
 c103e64:	ebfffc60 	bl	c102fec <lcd_putpixel>
		if(x > (320 - 16)){
 c103e68:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c103e6c:	e55b300e 	ldrb	r3, [fp, #-14]
 c103e70:	e0823003 	add	r3, r2, r3
 c103e74:	e1a03803 	lsl	r3, r3, #16
 c103e78:	e1a03823 	lsr	r3, r3, #16
 c103e7c:	e1a03083 	lsl	r3, r3, #1
 c103e80:	e1a03803 	lsl	r3, r3, #16
 c103e84:	e1a03823 	lsr	r3, r3, #16
 c103e88:	e2433013 	sub	r3, r3, #19
 c103e8c:	e1a03803 	lsl	r3, r3, #16
 c103e90:	e1a02823 	lsr	r2, r3, #16
 c103e94:	e15b12b0 	ldrh	r1, [fp, #-32]	; 0xffffffe0
 c103e98:	e55b300d 	ldrb	r3, [fp, #-13]
 c103e9c:	e0813003 	add	r3, r1, r3
 c103ea0:	e1a03803 	lsl	r3, r3, #16
 c103ea4:	e1a03823 	lsr	r3, r3, #16
 c103ea8:	e1a03083 	lsl	r3, r3, #1
 c103eac:	e1a03803 	lsl	r3, r3, #16
 c103eb0:	e1a01823 	lsr	r1, r3, #16
 c103eb4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c103eb8:	e0633001 	rsb	r3, r3, r1
 c103ebc:	e1a03803 	lsl	r3, r3, #16
 c103ec0:	e1a03823 	lsr	r3, r3, #16
 c103ec4:	e2833001 	add	r3, r3, #1
 c103ec8:	e1a03803 	lsl	r3, r3, #16
 c103ecc:	e1a03823 	lsr	r3, r3, #16
 c103ed0:	e1a00002 	mov	r0, r2
 c103ed4:	e1a01003 	mov	r1, r3
 c103ed8:	e3a02000 	mov	r2, #0
 c103edc:	ebfffc42 	bl	c102fec <lcd_putpixel>

	bitmap = font + ch*16;
	for( row=0; row<32; row++ )
		for( col=0; col<16; col++ )
			if( bitmap[row >> 1] & (0x80 >> (col >> 1)) ){
				lcd_putpixel( x+col, y+row, color );
 c103ee0:	e55b300e 	ldrb	r3, [fp, #-14]
 c103ee4:	e2833001 	add	r3, r3, #1
 c103ee8:	e54b300e 	strb	r3, [fp, #-14]
 c103eec:	e55b300e 	ldrb	r3, [fp, #-14]
 c103ef0:	e3530007 	cmp	r3, #7
 c103ef4:	9affff0d 	bls	c103b30 <lcd_putchar_x2+0x60>
	uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
	for( row=0; row<32; row++ )
		for( col=0; col<16; col++ )
 c103ef8:	e55b300d 	ldrb	r3, [fp, #-13]
 c103efc:	e2833001 	add	r3, r3, #1
 c103f00:	e54b300d 	strb	r3, [fp, #-13]
 c103f04:	e55b300d 	ldrb	r3, [fp, #-13]
 c103f08:	e353000f 	cmp	r3, #15
 c103f0c:	9affff04 	bls	c103b24 <lcd_putchar_x2+0x54>
		x += 16;
		if(x > (320 - 16)){
			y += 32;
			x = 0;
		}
	}
 c103f10:	e24bd00c 	sub	sp, fp, #12
 c103f14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103f18:	e12fff1e 	bx	lr
 c103f1c:	0c1094d4 	.word	0x0c1094d4

0c103f20 <lcd_puts_x2>:
}

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
 c103f20:	e1a0c00d 	mov	ip, sp
 c103f24:	e92dd800 	push	{fp, ip, lr, pc}
 c103f28:	e24cb004 	sub	fp, ip, #4
 c103f2c:	e24dd010 	sub	sp, sp, #16
 c103f30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c103f34:	e14b00be 	strh	r0, [fp, #-14]
 c103f38:	e14b11b0 	strh	r1, [fp, #-16]
 c103f3c:	e1a03002 	mov	r3, r2
 c103f40:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
{
 c103f44:	ea00000b 	b	c103f78 <lcd_puts_x2+0x58>
	char buf[12];
 c103f48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103f4c:	e5d33000 	ldrb	r3, [r3]
 c103f50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103f54:	e2822001 	add	r2, r2, #1
 c103f58:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c103f5c:	e15b00be 	ldrh	r0, [fp, #-14]
 c103f60:	e15b11b0 	ldrh	r1, [fp, #-16]
 c103f64:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c103f68:	ebfffed8 	bl	c103ad0 <lcd_putchar_x2>
		    char *ptr = buf + 12;
 c103f6c:	e15b30be 	ldrh	r3, [fp, #-14]
 c103f70:	e2833008 	add	r3, r3, #8
 c103f74:	e14b30be 	strh	r3, [fp, #-14]
		}
	}
}

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
{
 c103f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103f7c:	e5d33000 	ldrb	r3, [r3]
 c103f80:	e3530000 	cmp	r3, #0
 c103f84:	1affffef 	bne	c103f48 <lcd_puts_x2+0x28>
	char buf[12];
		    char *ptr = buf + 12;
		    *ptr = '\0';
		    uint8 c;
 c103f88:	e24bd00c 	sub	sp, fp, #12
 c103f8c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103f90:	e12fff1e 	bx	lr

0c103f94 <lcd_putint_x2>:
		    int neg = 0;

		    if(i < 0) {
 c103f94:	e1a0c00d 	mov	ip, sp
 c103f98:	e92dd800 	push	{fp, ip, lr, pc}
 c103f9c:	e24cb004 	sub	fp, ip, #4
 c103fa0:	e24dd028 	sub	sp, sp, #40	; 0x28
 c103fa4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c103fa8:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c103fac:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c103fb0:	e1a03002 	mov	r3, r2
 c103fb4:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
		        i *= -1;
		        neg = 1;
 c103fb8:	e24b3024 	sub	r3, fp, #36	; 0x24
 c103fbc:	e283300c 	add	r3, r3, #12
 c103fc0:	e50b3010 	str	r3, [fp, #-16]
		    }
 c103fc4:	e51b3010 	ldr	r3, [fp, #-16]
 c103fc8:	e3a02000 	mov	r2, #0
 c103fcc:	e5c32000 	strb	r2, [r3]

		    do {
 c103fd0:	e3a03000 	mov	r3, #0
 c103fd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		        	c = i % 10;
		        	*--ptr = '0' + c;
 c103fd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c103fdc:	e3530000 	cmp	r3, #0
 c103fe0:	aa000004 	bge	c103ff8 <lcd_putint_x2+0x64>
		        	i /= 10;
 c103fe4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c103fe8:	e2633000 	rsb	r3, r3, #0
 c103fec:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		        } while(i);
 c103ff0:	e3a03001 	mov	r3, #1
 c103ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

		    if(neg) *--ptr = '-';

		    lcd_puts_x2(x,y,color,ptr);
 c103ff8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c103ffc:	e59f30c0 	ldr	r3, [pc, #192]	; c1040c4 <lcd_putint_x2+0x130>
 c104000:	e0c32391 	smull	r2, r3, r1, r3
 c104004:	e1a02143 	asr	r2, r3, #2
 c104008:	e1a03fc1 	asr	r3, r1, #31
 c10400c:	e0632002 	rsb	r2, r3, r2
 c104010:	e1a03002 	mov	r3, r2
 c104014:	e1a03103 	lsl	r3, r3, #2
 c104018:	e0833002 	add	r3, r3, r2
 c10401c:	e1a03083 	lsl	r3, r3, #1
 c104020:	e0632001 	rsb	r2, r3, r1
 c104024:	e1a03002 	mov	r3, r2
 c104028:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
}
 c10402c:	e51b3010 	ldr	r3, [fp, #-16]
 c104030:	e2433001 	sub	r3, r3, #1
 c104034:	e50b3010 	str	r3, [fp, #-16]
 c104038:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10403c:	e2833030 	add	r3, r3, #48	; 0x30
 c104040:	e20320ff 	and	r2, r3, #255	; 0xff
 c104044:	e51b3010 	ldr	r3, [fp, #-16]
 c104048:	e5c32000 	strb	r2, [r3]

 c10404c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c104050:	e59f206c 	ldr	r2, [pc, #108]	; c1040c4 <lcd_putint_x2+0x130>
 c104054:	e0c21293 	smull	r1, r2, r3, r2
 c104058:	e1a02142 	asr	r2, r2, #2
 c10405c:	e1a03fc3 	asr	r3, r3, #31
 c104060:	e0633002 	rsb	r3, r3, r2
 c104064:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
 c104068:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10406c:	e3530000 	cmp	r3, #0
 c104070:	1affffe0 	bne	c103ff8 <lcd_putint_x2+0x64>
{
	char buf[8 + 1];
 c104074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104078:	e3530000 	cmp	r3, #0
 c10407c:	0a000005 	beq	c104098 <lcd_putint_x2+0x104>
 c104080:	e51b3010 	ldr	r3, [fp, #-16]
 c104084:	e2433001 	sub	r3, r3, #1
 c104088:	e50b3010 	str	r3, [fp, #-16]
 c10408c:	e51b3010 	ldr	r3, [fp, #-16]
 c104090:	e3a0202d 	mov	r2, #45	; 0x2d
 c104094:	e5c32000 	strb	r2, [r3]
		    char *p = buf + 8;
		    uint8 c;
 c104098:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
 c10409c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
 c1040a0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c1040a4:	e1a00001 	mov	r0, r1
 c1040a8:	e1a01002 	mov	r1, r2
 c1040ac:	e1a02003 	mov	r2, r3
 c1040b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1040b4:	ebffff99 	bl	c103f20 <lcd_puts_x2>

 c1040b8:	e24bd00c 	sub	sp, fp, #12
 c1040bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1040c0:	e12fff1e 	bx	lr
 c1040c4:	66666667 	.word	0x66666667

0c1040c8 <lcd_puthex_x2>:
		    *p = '\0';

		    do {
 c1040c8:	e1a0c00d 	mov	ip, sp
 c1040cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1040d0:	e24cb004 	sub	fp, ip, #4
 c1040d4:	e24dd020 	sub	sp, sp, #32
 c1040d8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c1040dc:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c1040e0:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c1040e4:	e1a03002 	mov	r3, r2
 c1040e8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
		        c = i & 0xf;
		        if( c < 10 )
 c1040ec:	e24b301c 	sub	r3, fp, #28
 c1040f0:	e2833008 	add	r3, r3, #8
 c1040f4:	e50b3010 	str	r3, [fp, #-16]
		            *--p = '0' + c;
		        else
		            *--p = 'a' + c - 10;
 c1040f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1040fc:	e3a02000 	mov	r2, #0
 c104100:	e5c32000 	strb	r2, [r3]
		        i = i >> 4;
		    } while( i );

 c104104:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104108:	e20330ff 	and	r3, r3, #255	; 0xff
 c10410c:	e203300f 	and	r3, r3, #15
 c104110:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		    lcd_puts_x2(x,y,color,p);
 c104114:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c104118:	e3530009 	cmp	r3, #9
 c10411c:	8a000008 	bhi	c104144 <lcd_puthex_x2+0x7c>
}
 c104120:	e51b3010 	ldr	r3, [fp, #-16]
 c104124:	e2433001 	sub	r3, r3, #1
 c104128:	e50b3010 	str	r3, [fp, #-16]
 c10412c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c104130:	e2833030 	add	r3, r3, #48	; 0x30
 c104134:	e20320ff 	and	r2, r3, #255	; 0xff
 c104138:	e51b3010 	ldr	r3, [fp, #-16]
 c10413c:	e5c32000 	strb	r2, [r3]
 c104140:	ea000007 	b	c104164 <lcd_puthex_x2+0x9c>

void lcd_putWallpaper( uint8 *bmp )
 c104144:	e51b3010 	ldr	r3, [fp, #-16]
 c104148:	e2433001 	sub	r3, r3, #1
 c10414c:	e50b3010 	str	r3, [fp, #-16]
 c104150:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c104154:	e2833057 	add	r3, r3, #87	; 0x57
 c104158:	e20320ff 	and	r2, r3, #255	; 0xff
 c10415c:	e51b3010 	ldr	r3, [fp, #-16]
 c104160:	e5c32000 	strb	r2, [r3]
{
 c104164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104168:	e1a03223 	lsr	r3, r3, #4
 c10416c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    uint32 headerSize;
 c104170:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104174:	e3530000 	cmp	r3, #0
 c104178:	1affffe1 	bne	c104104 <lcd_puthex_x2+0x3c>

    uint16 x, ySrc, yDst;
 c10417c:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c104180:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c104184:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c104188:	e1a00001 	mov	r0, r1
 c10418c:	e1a01002 	mov	r1, r2
 c104190:	e1a02003 	mov	r2, r3
 c104194:	e51b3010 	ldr	r3, [fp, #-16]
 c104198:	ebffff60 	bl	c103f20 <lcd_puts_x2>
    uint16 offsetSrc, offsetDst;
 c10419c:	e24bd00c 	sub	sp, fp, #12
 c1041a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1041a4:	e12fff1e 	bx	lr

0c1041a8 <lcd_putWallpaper>:

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

 c1041a8:	e1a0c00d 	mov	ip, sp
 c1041ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1041b0:	e24cb004 	sub	fp, ip, #4
 c1041b4:	e24dd018 	sub	sp, sp, #24
 c1041b8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bmp = bmp + headerSize;

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
 c1041bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1041c0:	e283300a 	add	r3, r3, #10
 c1041c4:	e5d33000 	ldrb	r3, [r3]
 c1041c8:	e1a02003 	mov	r2, r3
 c1041cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1041d0:	e283300b 	add	r3, r3, #11
 c1041d4:	e5d33000 	ldrb	r3, [r3]
 c1041d8:	e1a03403 	lsl	r3, r3, #8
 c1041dc:	e0822003 	add	r2, r2, r3
 c1041e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1041e4:	e283300c 	add	r3, r3, #12
 c1041e8:	e5d33000 	ldrb	r3, [r3]
 c1041ec:	e1a03803 	lsl	r3, r3, #16
 c1041f0:	e0822003 	add	r2, r2, r3
 c1041f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1041f8:	e283300d 	add	r3, r3, #13
 c1041fc:	e5d33000 	ldrb	r3, [r3]
 c104200:	e1a03c03 	lsl	r3, r3, #24
 c104204:	e0823003 	add	r3, r2, r3
 c104208:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c10420c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c104210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104214:	e0823003 	add	r3, r2, r3
 c104218:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    }
}
 c10421c:	e3a03000 	mov	r3, #0
 c104220:	e14b31b0 	strh	r3, [fp, #-16]
 c104224:	e3a030ef 	mov	r3, #239	; 0xef
 c104228:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10422c:	ea00002d 	b	c1042e8 <lcd_putWallpaper+0x140>

void lcd_putWindow( uint8 *bmp, uint16 xleft, uint16 yup, uint16 xright, uint16 ydown )
 c104230:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c104234:	e1a03002 	mov	r3, r2
 c104238:	e1a03103 	lsl	r3, r3, #2
 c10423c:	e0833002 	add	r3, r3, r2
 c104240:	e1a03303 	lsl	r3, r3, #6
 c104244:	e1a02fa3 	lsr	r2, r3, #31
 c104248:	e0823003 	add	r3, r2, r3
 c10424c:	e1a030c3 	asr	r3, r3, #1
 c104250:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
{
 c104254:	e15b21b0 	ldrh	r2, [fp, #-16]
 c104258:	e1a03002 	mov	r3, r2
 c10425c:	e1a03103 	lsl	r3, r3, #2
 c104260:	e0833002 	add	r3, r3, r2
 c104264:	e1a03303 	lsl	r3, r3, #6
 c104268:	e1a02fa3 	lsr	r2, r3, #31
 c10426c:	e0823003 	add	r3, r2, r3
 c104270:	e1a030c3 	asr	r3, r3, #1
 c104274:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
    uint32 headerSize;
 c104278:	e3a03000 	mov	r3, #0
 c10427c:	e14b30be 	strh	r3, [fp, #-14]
 c104280:	ea00000f 	b	c1042c4 <lcd_putWallpaper+0x11c>

 c104284:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c104288:	e15b30be 	ldrh	r3, [fp, #-14]
 c10428c:	e0823003 	add	r3, r2, r3
 c104290:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c104294:	e15b20be 	ldrh	r2, [fp, #-14]
 c104298:	e0812002 	add	r2, r1, r2
 c10429c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c1042a0:	e0812002 	add	r2, r1, r2
 c1042a4:	e5d22000 	ldrb	r2, [r2]
 c1042a8:	e1e02002 	mvn	r2, r2
 c1042ac:	e20210ff 	and	r1, r2, #255	; 0xff
 c1042b0:	e59f2048 	ldr	r2, [pc, #72]	; c104300 <lcd_putWallpaper+0x158>
 c1042b4:	e7c21003 	strb	r1, [r2, r3]
    }
}

void lcd_putWindow( uint8 *bmp, uint16 xleft, uint16 yup, uint16 xright, uint16 ydown )
{
    uint32 headerSize;
 c1042b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1042bc:	e2833001 	add	r3, r3, #1
 c1042c0:	e14b30be 	strh	r3, [fp, #-14]
 c1042c4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1042c8:	e353009f 	cmp	r3, #159	; 0x9f
 c1042cc:	9affffec 	bls	c104284 <lcd_putWallpaper+0xdc>
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c1042d0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1042d4:	e2833001 	add	r3, r3, #1
 c1042d8:	e14b31b0 	strh	r3, [fp, #-16]
 c1042dc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1042e0:	e2433001 	sub	r3, r3, #1
 c1042e4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c1042e8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1042ec:	e35300ef 	cmp	r3, #239	; 0xef
 c1042f0:	9affffce 	bls	c104230 <lcd_putWallpaper+0x88>
void lcd_putWindow( uint8 *bmp, uint16 xleft, uint16 yup, uint16 xright, uint16 ydown )
{
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;
 c1042f4:	e24bd00c 	sub	sp, fp, #12
 c1042f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1042fc:	e12fff1e 	bx	lr
 c104300:	0c10a634 	.word	0x0c10a634

0c104304 <lcd_putWindow>:

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

 c104304:	e1a0c00d 	mov	ip, sp
 c104308:	e92dd800 	push	{fp, ip, lr, pc}
 c10430c:	e24cb004 	sub	fp, ip, #4
 c104310:	e24dd020 	sub	sp, sp, #32
 c104314:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c104318:	e14b12b2 	strh	r1, [fp, #-34]	; 0xffffffde
 c10431c:	e14b22b4 	strh	r2, [fp, #-36]	; 0xffffffdc
 c104320:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    bmp = bmp + headerSize;

    for( ySrc=LCD_HEIGHT - ydown, yDst=ydown-1; ySrc<LCD_HEIGHT-yup; ySrc++, yDst-- )
    {
        offsetDst = yDst*xright/2;
        offsetSrc = ySrc*xright/2;
 c104324:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104328:	e283300a 	add	r3, r3, #10
 c10432c:	e5d33000 	ldrb	r3, [r3]
 c104330:	e1a02003 	mov	r2, r3
 c104334:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104338:	e283300b 	add	r3, r3, #11
 c10433c:	e5d33000 	ldrb	r3, [r3]
 c104340:	e1a03403 	lsl	r3, r3, #8
 c104344:	e0822003 	add	r2, r2, r3
 c104348:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10434c:	e283300c 	add	r3, r3, #12
 c104350:	e5d33000 	ldrb	r3, [r3]
 c104354:	e1a03803 	lsl	r3, r3, #16
 c104358:	e0822003 	add	r2, r2, r3
 c10435c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104360:	e283300d 	add	r3, r3, #13
 c104364:	e5d33000 	ldrb	r3, [r3]
 c104368:	e1a03c03 	lsl	r3, r3, #24
 c10436c:	e0823003 	add	r3, r2, r3
 c104370:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        for( x=xleft; x<xright; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c104374:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c104378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10437c:	e0823003 	add	r3, r2, r3
 c104380:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    }
}
 c104384:	e1db30b4 	ldrh	r3, [fp, #4]
 c104388:	e26330f0 	rsb	r3, r3, #240	; 0xf0
 c10438c:	e14b31b0 	strh	r3, [fp, #-16]
 c104390:	e1db30b4 	ldrh	r3, [fp, #4]
 c104394:	e2433001 	sub	r3, r3, #1
 c104398:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10439c:	ea00002a 	b	c10444c <lcd_putWindow+0x148>

static void isr_bdma0( void )
 c1043a0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1043a4:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
 c1043a8:	e0030392 	mul	r3, r2, r3
 c1043ac:	e1a02fa3 	lsr	r2, r3, #31
 c1043b0:	e0823003 	add	r3, r2, r3
 c1043b4:	e1a030c3 	asr	r3, r3, #1
 c1043b8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
{
 c1043bc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1043c0:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
 c1043c4:	e0030392 	mul	r3, r2, r3
 c1043c8:	e1a02fa3 	lsr	r2, r3, #31
 c1043cc:	e0823003 	add	r3, r2, r3
 c1043d0:	e1a030c3 	asr	r3, r3, #1
 c1043d4:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
    IISCON &= ~1;
 c1043d8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
 c1043dc:	e14b30be 	strh	r3, [fp, #-14]
 c1043e0:	ea00000f 	b	c104424 <lcd_putWindow+0x120>
    I_ISPC = BIT_BDMA0;
 c1043e4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c1043e8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1043ec:	e0823003 	add	r3, r2, r3
 c1043f0:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c1043f4:	e15b20be 	ldrh	r2, [fp, #-14]
 c1043f8:	e0812002 	add	r2, r1, r2
 c1043fc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c104400:	e0812002 	add	r2, r1, r2
 c104404:	e5d22000 	ldrb	r2, [r2]
 c104408:	e1e02002 	mvn	r2, r2
 c10440c:	e20210ff 	and	r1, r2, #255	; 0xff
 c104410:	e59f2054 	ldr	r2, [pc, #84]	; c10446c <lcd_putWindow+0x168>
 c104414:	e7c21003 	strb	r1, [r2, r3]
    }
}

static void isr_bdma0( void )
{
    IISCON &= ~1;
 c104418:	e15b30be 	ldrh	r3, [fp, #-14]
 c10441c:	e2833001 	add	r3, r3, #1
 c104420:	e14b30be 	strh	r3, [fp, #-14]
 c104424:	e15b20be 	ldrh	r2, [fp, #-14]
 c104428:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
 c10442c:	e1520003 	cmp	r2, r3
 c104430:	3affffeb 	bcc	c1043e4 <lcd_putWindow+0xe0>
        offsetDst = yDst*xright/2;
        offsetSrc = ySrc*xright/2;
        for( x=xleft; x<xright; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c104434:	e15b31b0 	ldrh	r3, [fp, #-16]
 c104438:	e2833001 	add	r3, r3, #1
 c10443c:	e14b31b0 	strh	r3, [fp, #-16]
 c104440:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c104444:	e2433001 	sub	r3, r3, #1
 c104448:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10444c:	e15b21b0 	ldrh	r2, [fp, #-16]
 c104450:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
 c104454:	e26330f0 	rsb	r3, r3, #240	; 0xf0
 c104458:	e1520003 	cmp	r2, r3
 c10445c:	baffffcf 	blt	c1043a0 <lcd_putWindow+0x9c>
static void isr_bdma0( void )
{
    IISCON &= ~1;
    I_ISPC = BIT_BDMA0;
}
 c104460:	e24bd00c 	sub	sp, fp, #12
 c104464:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104468:	e12fff1e 	bx	lr
 c10446c:	0c10a634 	.word	0x0c10a634

0c104470 <isr_bdma0>:
 c104470:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c104474:	e1a0c00d 	mov	ip, sp
 c104478:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c10447c:	e24cb004 	sub	fp, ip, #4
 c104480:	e59f3028 	ldr	r3, [pc, #40]	; c1044b0 <isr_bdma0+0x40>
 c104484:	e59f2024 	ldr	r2, [pc, #36]	; c1044b0 <isr_bdma0+0x40>
 c104488:	e5922000 	ldr	r2, [r2]
 c10448c:	e3c22001 	bic	r2, r2, #1
 c104490:	e5832000 	str	r2, [r3]
 c104494:	e59f3018 	ldr	r3, [pc, #24]	; c1044b4 <isr_bdma0+0x44>
 c104498:	e3a02802 	mov	r2, #131072	; 0x20000
 c10449c:	e5832000 	str	r2, [r3]
 c1044a0:	e24bd014 	sub	sp, fp, #20
 c1044a4:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c1044a8:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1044ac:	e25ef004 	subs	pc, lr, #4
 c1044b0:	01d18000 	.word	0x01d18000
 c1044b4:	01e00024 	.word	0x01e00024

0c1044b8 <leds_init>:

#include <s3c44b0x.h>
#include "leds.h"

void leds_init( void )
{
 c1044b8:	e1a0c00d 	mov	ip, sp
 c1044bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1044c0:	e24cb004 	sub	fp, ip, #4
	PCONB &= ~((1<<10)|(1<<9));  // PB[10] = out, PF[9] = out
 c1044c4:	e59f3028 	ldr	r3, [pc, #40]	; c1044f4 <leds_init+0x3c>
 c1044c8:	e59f2024 	ldr	r2, [pc, #36]	; c1044f4 <leds_init+0x3c>
 c1044cc:	e5922000 	ldr	r2, [r2]
 c1044d0:	e3c22c06 	bic	r2, r2, #1536	; 0x600
 c1044d4:	e5832000 	str	r2, [r3]
	led_off(LEFT_LED);
 c1044d8:	e3a00001 	mov	r0, #1
 c1044dc:	eb000017 	bl	c104540 <led_off>
	led_off(RIGHT_LED);
 c1044e0:	e3a00002 	mov	r0, #2
 c1044e4:	eb000015 	bl	c104540 <led_off>
}
 c1044e8:	e24bd00c 	sub	sp, fp, #12
 c1044ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1044f0:	e12fff1e 	bx	lr
 c1044f4:	01d20008 	.word	0x01d20008

0c1044f8 <led_on>:

void led_on( uint8 led )
{
 c1044f8:	e1a0c00d 	mov	ip, sp
 c1044fc:	e92dd800 	push	{fp, ip, lr, pc}
 c104500:	e24cb004 	sub	fp, ip, #4
 c104504:	e24dd008 	sub	sp, sp, #8
 c104508:	e1a03000 	mov	r3, r0
 c10450c:	e54b300d 	strb	r3, [fp, #-13]
    PDATB &= ~(led << 9);
 c104510:	e59f3024 	ldr	r3, [pc, #36]	; c10453c <led_on+0x44>
 c104514:	e59f2020 	ldr	r2, [pc, #32]	; c10453c <led_on+0x44>
 c104518:	e5921000 	ldr	r1, [r2]
 c10451c:	e55b200d 	ldrb	r2, [fp, #-13]
 c104520:	e1a02482 	lsl	r2, r2, #9
 c104524:	e1e02002 	mvn	r2, r2
 c104528:	e0012002 	and	r2, r1, r2
 c10452c:	e5832000 	str	r2, [r3]
}
 c104530:	e24bd00c 	sub	sp, fp, #12
 c104534:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104538:	e12fff1e 	bx	lr
 c10453c:	01d2000c 	.word	0x01d2000c

0c104540 <led_off>:

void led_off( uint8 led )
{
 c104540:	e1a0c00d 	mov	ip, sp
 c104544:	e92dd800 	push	{fp, ip, lr, pc}
 c104548:	e24cb004 	sub	fp, ip, #4
 c10454c:	e24dd008 	sub	sp, sp, #8
 c104550:	e1a03000 	mov	r3, r0
 c104554:	e54b300d 	strb	r3, [fp, #-13]
	PDATB |= (led << 9);
 c104558:	e59f3020 	ldr	r3, [pc, #32]	; c104580 <led_off+0x40>
 c10455c:	e59f201c 	ldr	r2, [pc, #28]	; c104580 <led_off+0x40>
 c104560:	e5921000 	ldr	r1, [r2]
 c104564:	e55b200d 	ldrb	r2, [fp, #-13]
 c104568:	e1a02482 	lsl	r2, r2, #9
 c10456c:	e1812002 	orr	r2, r1, r2
 c104570:	e5832000 	str	r2, [r3]
}
 c104574:	e24bd00c 	sub	sp, fp, #12
 c104578:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10457c:	e12fff1e 	bx	lr
 c104580:	01d2000c 	.word	0x01d2000c

0c104584 <led_toggle>:

void led_toggle( uint8 led )
{
 c104584:	e1a0c00d 	mov	ip, sp
 c104588:	e92dd800 	push	{fp, ip, lr, pc}
 c10458c:	e24cb004 	sub	fp, ip, #4
 c104590:	e24dd008 	sub	sp, sp, #8
 c104594:	e1a03000 	mov	r3, r0
 c104598:	e54b300d 	strb	r3, [fp, #-13]
	PDATB ^= (led << 9);
 c10459c:	e59f3020 	ldr	r3, [pc, #32]	; c1045c4 <led_toggle+0x40>
 c1045a0:	e59f201c 	ldr	r2, [pc, #28]	; c1045c4 <led_toggle+0x40>
 c1045a4:	e5921000 	ldr	r1, [r2]
 c1045a8:	e55b200d 	ldrb	r2, [fp, #-13]
 c1045ac:	e1a02482 	lsl	r2, r2, #9
 c1045b0:	e0212002 	eor	r2, r1, r2
 c1045b4:	e5832000 	str	r2, [r3]
}
 c1045b8:	e24bd00c 	sub	sp, fp, #12
 c1045bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1045c0:	e12fff1e 	bx	lr
 c1045c4:	01d2000c 	.word	0x01d2000c

0c1045c8 <led_status>:

uint8 led_status( uint8 led )
{
 c1045c8:	e1a0c00d 	mov	ip, sp
 c1045cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1045d0:	e24cb004 	sub	fp, ip, #4
 c1045d4:	e24dd008 	sub	sp, sp, #8
 c1045d8:	e1a03000 	mov	r3, r0
 c1045dc:	e54b300d 	strb	r3, [fp, #-13]
	if(PDATB& led<<9){
 c1045e0:	e59f3030 	ldr	r3, [pc, #48]	; c104618 <led_status+0x50>
 c1045e4:	e5932000 	ldr	r2, [r3]
 c1045e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1045ec:	e1a03483 	lsl	r3, r3, #9
 c1045f0:	e0023003 	and	r3, r2, r3
 c1045f4:	e3530000 	cmp	r3, #0
 c1045f8:	0a000001 	beq	c104604 <led_status+0x3c>
			return 0;
 c1045fc:	e3a03000 	mov	r3, #0
 c104600:	ea000000 	b	c104608 <led_status+0x40>
		}
		else return 1;
 c104604:	e3a03001 	mov	r3, #1
}
 c104608:	e1a00003 	mov	r0, r3
 c10460c:	e24bd00c 	sub	sp, fp, #12
 c104610:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104614:	e12fff1e 	bx	lr
 c104618:	01d2000c 	.word	0x01d2000c

0c10461c <leds_on>:

void leds_on()
{
 c10461c:	e1a0c00d 	mov	ip, sp
 c104620:	e92dd800 	push	{fp, ip, lr, pc}
 c104624:	e24cb004 	sub	fp, ip, #4
	led_on(LEFT_LED);
 c104628:	e3a00001 	mov	r0, #1
 c10462c:	ebffffb1 	bl	c1044f8 <led_on>
	led_on(RIGHT_LED);
 c104630:	e3a00002 	mov	r0, #2
 c104634:	ebffffaf 	bl	c1044f8 <led_on>
}
 c104638:	e24bd00c 	sub	sp, fp, #12
 c10463c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104640:	e12fff1e 	bx	lr

0c104644 <leds_off>:

void leds_off()
{
 c104644:	e1a0c00d 	mov	ip, sp
 c104648:	e92dd800 	push	{fp, ip, lr, pc}
 c10464c:	e24cb004 	sub	fp, ip, #4
	led_off(LEFT_LED);
 c104650:	e3a00001 	mov	r0, #1
 c104654:	ebffffb9 	bl	c104540 <led_off>
	led_off(RIGHT_LED);
 c104658:	e3a00002 	mov	r0, #2
 c10465c:	ebffffb7 	bl	c104540 <led_off>
}
 c104660:	e24bd00c 	sub	sp, fp, #12
 c104664:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104668:	e12fff1e 	bx	lr

0c10466c <rtc_init>:
#include <rtc.h>

extern void isr_TICK_dummy( void );

void rtc_init( void )
{
 c10466c:	e1a0c00d 	mov	ip, sp
 c104670:	e92dd800 	push	{fp, ip, lr, pc}
 c104674:	e24cb004 	sub	fp, ip, #4
	TICNT   = 0x0;
 c104678:	e59f30e4 	ldr	r3, [pc, #228]	; c104764 <rtc_init+0xf8>
 c10467c:	e3a02000 	mov	r2, #0
 c104680:	e5832000 	str	r2, [r3]
	RTCALM  = 0x0;
 c104684:	e59f30dc 	ldr	r3, [pc, #220]	; c104768 <rtc_init+0xfc>
 c104688:	e3a02000 	mov	r2, #0
 c10468c:	e5832000 	str	r2, [r3]
	RTCRST  = 0x0;
 c104690:	e59f30d4 	ldr	r3, [pc, #212]	; c10476c <rtc_init+0x100>
 c104694:	e3a02000 	mov	r2, #0
 c104698:	e5832000 	str	r2, [r3]

	RTCCON  = 0x9;
 c10469c:	e59f30cc 	ldr	r3, [pc, #204]	; c104770 <rtc_init+0x104>
 c1046a0:	e3a02009 	mov	r2, #9
 c1046a4:	e5832000 	str	r2, [r3]

	BCDYEAR = 0x25;
 c1046a8:	e59f30c4 	ldr	r3, [pc, #196]	; c104774 <rtc_init+0x108>
 c1046ac:	e3a02025 	mov	r2, #37	; 0x25
 c1046b0:	e5832000 	str	r2, [r3]
	BCDMON  = 0x5;
 c1046b4:	e59f30bc 	ldr	r3, [pc, #188]	; c104778 <rtc_init+0x10c>
 c1046b8:	e3a02005 	mov	r2, #5
 c1046bc:	e5832000 	str	r2, [r3]
	BCDDAY  = 0x15;
 c1046c0:	e59f30b4 	ldr	r3, [pc, #180]	; c10477c <rtc_init+0x110>
 c1046c4:	e3a02015 	mov	r2, #21
 c1046c8:	e5832000 	str	r2, [r3]
	BCDDATE = 0x4;
 c1046cc:	e59f30ac 	ldr	r3, [pc, #172]	; c104780 <rtc_init+0x114>
 c1046d0:	e3a02004 	mov	r2, #4
 c1046d4:	e5832000 	str	r2, [r3]
	BCDHOUR = 0x19;
 c1046d8:	e59f30a4 	ldr	r3, [pc, #164]	; c104784 <rtc_init+0x118>
 c1046dc:	e3a02019 	mov	r2, #25
 c1046e0:	e5832000 	str	r2, [r3]
	BCDMIN  = 0x33;
 c1046e4:	e59f309c 	ldr	r3, [pc, #156]	; c104788 <rtc_init+0x11c>
 c1046e8:	e3a02033 	mov	r2, #51	; 0x33
 c1046ec:	e5832000 	str	r2, [r3]
	BCDSEC  = 0x12;
 c1046f0:	e59f3094 	ldr	r3, [pc, #148]	; c10478c <rtc_init+0x120>
 c1046f4:	e3a02012 	mov	r2, #18
 c1046f8:	e5832000 	str	r2, [r3]

	ALMYEAR = 0x0;
 c1046fc:	e59f308c 	ldr	r3, [pc, #140]	; c104790 <rtc_init+0x124>
 c104700:	e3a02000 	mov	r2, #0
 c104704:	e5832000 	str	r2, [r3]
	ALMMON  = 0x0;
 c104708:	e59f3084 	ldr	r3, [pc, #132]	; c104794 <rtc_init+0x128>
 c10470c:	e3a02000 	mov	r2, #0
 c104710:	e5832000 	str	r2, [r3]
	ALMDAY  = 0x0;
 c104714:	e59f307c 	ldr	r3, [pc, #124]	; c104798 <rtc_init+0x12c>
 c104718:	e3a02000 	mov	r2, #0
 c10471c:	e5832000 	str	r2, [r3]
	ALMHOUR = 0x0;
 c104720:	e59f3074 	ldr	r3, [pc, #116]	; c10479c <rtc_init+0x130>
 c104724:	e3a02000 	mov	r2, #0
 c104728:	e5832000 	str	r2, [r3]
	ALMMIN  = 0x0;
 c10472c:	e59f306c 	ldr	r3, [pc, #108]	; c1047a0 <rtc_init+0x134>
 c104730:	e3a02000 	mov	r2, #0
 c104734:	e5832000 	str	r2, [r3]
	ALMSEC  = 0x0;
 c104738:	e59f3064 	ldr	r3, [pc, #100]	; c1047a4 <rtc_init+0x138>
 c10473c:	e3a02000 	mov	r2, #0
 c104740:	e5832000 	str	r2, [r3]

	RTCCON &= 0;
 c104744:	e59f3024 	ldr	r3, [pc, #36]	; c104770 <rtc_init+0x104>
 c104748:	e5933000 	ldr	r3, [r3]
 c10474c:	e59f301c 	ldr	r3, [pc, #28]	; c104770 <rtc_init+0x104>
 c104750:	e3a02000 	mov	r2, #0
 c104754:	e5832000 	str	r2, [r3]
}
 c104758:	e24bd00c 	sub	sp, fp, #12
 c10475c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104760:	e12fff1e 	bx	lr
 c104764:	01d7008c 	.word	0x01d7008c
 c104768:	01d70050 	.word	0x01d70050
 c10476c:	01d7006c 	.word	0x01d7006c
 c104770:	01d70040 	.word	0x01d70040
 c104774:	01d70088 	.word	0x01d70088
 c104778:	01d70084 	.word	0x01d70084
 c10477c:	01d7007c 	.word	0x01d7007c
 c104780:	01d70080 	.word	0x01d70080
 c104784:	01d70078 	.word	0x01d70078
 c104788:	01d70074 	.word	0x01d70074
 c10478c:	01d70070 	.word	0x01d70070
 c104790:	01d70068 	.word	0x01d70068
 c104794:	01d70064 	.word	0x01d70064
 c104798:	01d70060 	.word	0x01d70060
 c10479c:	01d7005c 	.word	0x01d7005c
 c1047a0:	01d70058 	.word	0x01d70058
 c1047a4:	01d70054 	.word	0x01d70054

0c1047a8 <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c1047a8:	e1a0c00d 	mov	ip, sp
 c1047ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1047b0:	e24cb004 	sub	fp, ip, #4
 c1047b4:	e24dd008 	sub	sp, sp, #8
 c1047b8:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= 0x1;
 c1047bc:	e59f3234 	ldr	r3, [pc, #564]	; c1049f8 <rtc_puttime+0x250>
 c1047c0:	e59f2230 	ldr	r2, [pc, #560]	; c1049f8 <rtc_puttime+0x250>
 c1047c4:	e5922000 	ldr	r2, [r2]
 c1047c8:	e3822001 	orr	r2, r2, #1
 c1047cc:	e5832000 	str	r2, [r3]
    
    BCDYEAR = ((rtc_time->year/10)<<4) +rtc_time->year%10;
 c1047d0:	e59f0224 	ldr	r0, [pc, #548]	; c1049fc <rtc_puttime+0x254>
 c1047d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1047d8:	e5d32006 	ldrb	r2, [r3, #6]
 c1047dc:	e59f321c 	ldr	r3, [pc, #540]	; c104a00 <rtc_puttime+0x258>
 c1047e0:	e0831392 	umull	r1, r3, r2, r3
 c1047e4:	e1a031a3 	lsr	r3, r3, #3
 c1047e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1047ec:	e1a0c203 	lsl	ip, r3, #4
 c1047f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1047f4:	e5d32006 	ldrb	r2, [r3, #6]
 c1047f8:	e59f3200 	ldr	r3, [pc, #512]	; c104a00 <rtc_puttime+0x258>
 c1047fc:	e0831392 	umull	r1, r3, r2, r3
 c104800:	e1a011a3 	lsr	r1, r3, #3
 c104804:	e1a03001 	mov	r3, r1
 c104808:	e1a03103 	lsl	r3, r3, #2
 c10480c:	e0833001 	add	r3, r3, r1
 c104810:	e1a03083 	lsl	r3, r3, #1
 c104814:	e0633002 	rsb	r3, r3, r2
 c104818:	e20330ff 	and	r3, r3, #255	; 0xff
 c10481c:	e08c3003 	add	r3, ip, r3
 c104820:	e5803000 	str	r3, [r0]
	BCDMON  = ((rtc_time->mon/10)<<4) +rtc_time->mon%10;
 c104824:	e59f01d8 	ldr	r0, [pc, #472]	; c104a04 <rtc_puttime+0x25c>
 c104828:	e51b3010 	ldr	r3, [fp, #-16]
 c10482c:	e5d32005 	ldrb	r2, [r3, #5]
 c104830:	e59f31c8 	ldr	r3, [pc, #456]	; c104a00 <rtc_puttime+0x258>
 c104834:	e0831392 	umull	r1, r3, r2, r3
 c104838:	e1a031a3 	lsr	r3, r3, #3
 c10483c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104840:	e1a0c203 	lsl	ip, r3, #4
 c104844:	e51b3010 	ldr	r3, [fp, #-16]
 c104848:	e5d32005 	ldrb	r2, [r3, #5]
 c10484c:	e59f31ac 	ldr	r3, [pc, #428]	; c104a00 <rtc_puttime+0x258>
 c104850:	e0831392 	umull	r1, r3, r2, r3
 c104854:	e1a011a3 	lsr	r1, r3, #3
 c104858:	e1a03001 	mov	r3, r1
 c10485c:	e1a03103 	lsl	r3, r3, #2
 c104860:	e0833001 	add	r3, r3, r1
 c104864:	e1a03083 	lsl	r3, r3, #1
 c104868:	e0633002 	rsb	r3, r3, r2
 c10486c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104870:	e08c3003 	add	r3, ip, r3
 c104874:	e5803000 	str	r3, [r0]
	BCDDAY  = ((rtc_time->mday/10)<<4) +rtc_time->mday%10;
 c104878:	e59f0188 	ldr	r0, [pc, #392]	; c104a08 <rtc_puttime+0x260>
 c10487c:	e51b3010 	ldr	r3, [fp, #-16]
 c104880:	e5d32003 	ldrb	r2, [r3, #3]
 c104884:	e59f3174 	ldr	r3, [pc, #372]	; c104a00 <rtc_puttime+0x258>
 c104888:	e0831392 	umull	r1, r3, r2, r3
 c10488c:	e1a031a3 	lsr	r3, r3, #3
 c104890:	e20330ff 	and	r3, r3, #255	; 0xff
 c104894:	e1a0c203 	lsl	ip, r3, #4
 c104898:	e51b3010 	ldr	r3, [fp, #-16]
 c10489c:	e5d32003 	ldrb	r2, [r3, #3]
 c1048a0:	e59f3158 	ldr	r3, [pc, #344]	; c104a00 <rtc_puttime+0x258>
 c1048a4:	e0831392 	umull	r1, r3, r2, r3
 c1048a8:	e1a011a3 	lsr	r1, r3, #3
 c1048ac:	e1a03001 	mov	r3, r1
 c1048b0:	e1a03103 	lsl	r3, r3, #2
 c1048b4:	e0833001 	add	r3, r3, r1
 c1048b8:	e1a03083 	lsl	r3, r3, #1
 c1048bc:	e0633002 	rsb	r3, r3, r2
 c1048c0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1048c4:	e08c3003 	add	r3, ip, r3
 c1048c8:	e5803000 	str	r3, [r0]
	BCDDATE = rtc_time->wday;
 c1048cc:	e59f3138 	ldr	r3, [pc, #312]	; c104a0c <rtc_puttime+0x264>
 c1048d0:	e51b2010 	ldr	r2, [fp, #-16]
 c1048d4:	e5d22004 	ldrb	r2, [r2, #4]
 c1048d8:	e5832000 	str	r2, [r3]
	BCDHOUR = ((rtc_time->hour/10)<<4) +rtc_time->hour%10;
 c1048dc:	e59f012c 	ldr	r0, [pc, #300]	; c104a10 <rtc_puttime+0x268>
 c1048e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1048e4:	e5d32002 	ldrb	r2, [r3, #2]
 c1048e8:	e59f3110 	ldr	r3, [pc, #272]	; c104a00 <rtc_puttime+0x258>
 c1048ec:	e0831392 	umull	r1, r3, r2, r3
 c1048f0:	e1a031a3 	lsr	r3, r3, #3
 c1048f4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1048f8:	e1a0c203 	lsl	ip, r3, #4
 c1048fc:	e51b3010 	ldr	r3, [fp, #-16]
 c104900:	e5d32002 	ldrb	r2, [r3, #2]
 c104904:	e59f30f4 	ldr	r3, [pc, #244]	; c104a00 <rtc_puttime+0x258>
 c104908:	e0831392 	umull	r1, r3, r2, r3
 c10490c:	e1a011a3 	lsr	r1, r3, #3
 c104910:	e1a03001 	mov	r3, r1
 c104914:	e1a03103 	lsl	r3, r3, #2
 c104918:	e0833001 	add	r3, r3, r1
 c10491c:	e1a03083 	lsl	r3, r3, #1
 c104920:	e0633002 	rsb	r3, r3, r2
 c104924:	e20330ff 	and	r3, r3, #255	; 0xff
 c104928:	e08c3003 	add	r3, ip, r3
 c10492c:	e5803000 	str	r3, [r0]
	BCDMIN  = ((rtc_time->min/10)<<4) +rtc_time->min%10;
 c104930:	e59f00dc 	ldr	r0, [pc, #220]	; c104a14 <rtc_puttime+0x26c>
 c104934:	e51b3010 	ldr	r3, [fp, #-16]
 c104938:	e5d32001 	ldrb	r2, [r3, #1]
 c10493c:	e59f30bc 	ldr	r3, [pc, #188]	; c104a00 <rtc_puttime+0x258>
 c104940:	e0831392 	umull	r1, r3, r2, r3
 c104944:	e1a031a3 	lsr	r3, r3, #3
 c104948:	e20330ff 	and	r3, r3, #255	; 0xff
 c10494c:	e1a0c203 	lsl	ip, r3, #4
 c104950:	e51b3010 	ldr	r3, [fp, #-16]
 c104954:	e5d32001 	ldrb	r2, [r3, #1]
 c104958:	e59f30a0 	ldr	r3, [pc, #160]	; c104a00 <rtc_puttime+0x258>
 c10495c:	e0831392 	umull	r1, r3, r2, r3
 c104960:	e1a011a3 	lsr	r1, r3, #3
 c104964:	e1a03001 	mov	r3, r1
 c104968:	e1a03103 	lsl	r3, r3, #2
 c10496c:	e0833001 	add	r3, r3, r1
 c104970:	e1a03083 	lsl	r3, r3, #1
 c104974:	e0633002 	rsb	r3, r3, r2
 c104978:	e20330ff 	and	r3, r3, #255	; 0xff
 c10497c:	e08c3003 	add	r3, ip, r3
 c104980:	e5803000 	str	r3, [r0]
	BCDSEC  = ((rtc_time->sec/10)<<4) +rtc_time->sec%10;
 c104984:	e59f008c 	ldr	r0, [pc, #140]	; c104a18 <rtc_puttime+0x270>
 c104988:	e51b3010 	ldr	r3, [fp, #-16]
 c10498c:	e5d32000 	ldrb	r2, [r3]
 c104990:	e59f3068 	ldr	r3, [pc, #104]	; c104a00 <rtc_puttime+0x258>
 c104994:	e0831392 	umull	r1, r3, r2, r3
 c104998:	e1a031a3 	lsr	r3, r3, #3
 c10499c:	e20330ff 	and	r3, r3, #255	; 0xff
 c1049a0:	e1a0c203 	lsl	ip, r3, #4
 c1049a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1049a8:	e5d32000 	ldrb	r2, [r3]
 c1049ac:	e59f304c 	ldr	r3, [pc, #76]	; c104a00 <rtc_puttime+0x258>
 c1049b0:	e0831392 	umull	r1, r3, r2, r3
 c1049b4:	e1a011a3 	lsr	r1, r3, #3
 c1049b8:	e1a03001 	mov	r3, r1
 c1049bc:	e1a03103 	lsl	r3, r3, #2
 c1049c0:	e0833001 	add	r3, r3, r1
 c1049c4:	e1a03083 	lsl	r3, r3, #1
 c1049c8:	e0633002 	rsb	r3, r3, r2
 c1049cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1049d0:	e08c3003 	add	r3, ip, r3
 c1049d4:	e5803000 	str	r3, [r0]

	RTCCON &= ~(1<<0);
 c1049d8:	e59f3018 	ldr	r3, [pc, #24]	; c1049f8 <rtc_puttime+0x250>
 c1049dc:	e59f2014 	ldr	r2, [pc, #20]	; c1049f8 <rtc_puttime+0x250>
 c1049e0:	e5922000 	ldr	r2, [r2]
 c1049e4:	e3c22001 	bic	r2, r2, #1
 c1049e8:	e5832000 	str	r2, [r3]
}
 c1049ec:	e24bd00c 	sub	sp, fp, #12
 c1049f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1049f4:	e12fff1e 	bx	lr
 c1049f8:	01d70040 	.word	0x01d70040
 c1049fc:	01d70088 	.word	0x01d70088
 c104a00:	cccccccd 	.word	0xcccccccd
 c104a04:	01d70084 	.word	0x01d70084
 c104a08:	01d7007c 	.word	0x01d7007c
 c104a0c:	01d70080 	.word	0x01d70080
 c104a10:	01d70078 	.word	0x01d70078
 c104a14:	01d70074 	.word	0x01d70074
 c104a18:	01d70070 	.word	0x01d70070

0c104a1c <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c104a1c:	e1a0c00d 	mov	ip, sp
 c104a20:	e92dd800 	push	{fp, ip, lr, pc}
 c104a24:	e24cb004 	sub	fp, ip, #4
 c104a28:	e24dd008 	sub	sp, sp, #8
 c104a2c:	e50b0010 	str	r0, [fp, #-16]
	RTCCON |= 0x1;
 c104a30:	e59f33c4 	ldr	r3, [pc, #964]	; c104dfc <rtc_gettime+0x3e0>
 c104a34:	e59f23c0 	ldr	r2, [pc, #960]	; c104dfc <rtc_gettime+0x3e0>
 c104a38:	e5922000 	ldr	r2, [r2]
 c104a3c:	e3822001 	orr	r2, r2, #1
 c104a40:	e5832000 	str	r2, [r3]

	rtc_time->year = (BCDYEAR & 0xF)+ (BCDYEAR >>4)*10;
 c104a44:	e59f33b4 	ldr	r3, [pc, #948]	; c104e00 <rtc_gettime+0x3e4>
 c104a48:	e5933000 	ldr	r3, [r3]
 c104a4c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a50:	e203300f 	and	r3, r3, #15
 c104a54:	e20320ff 	and	r2, r3, #255	; 0xff
 c104a58:	e59f33a0 	ldr	r3, [pc, #928]	; c104e00 <rtc_gettime+0x3e4>
 c104a5c:	e5933000 	ldr	r3, [r3]
 c104a60:	e1a03223 	lsr	r3, r3, #4
 c104a64:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a68:	e1a01003 	mov	r1, r3
 c104a6c:	e1a01101 	lsl	r1, r1, #2
 c104a70:	e0813003 	add	r3, r1, r3
 c104a74:	e1a03083 	lsl	r3, r3, #1
 c104a78:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a7c:	e0823003 	add	r3, r2, r3
 c104a80:	e20320ff 	and	r2, r3, #255	; 0xff
 c104a84:	e51b3010 	ldr	r3, [fp, #-16]
 c104a88:	e5c32006 	strb	r2, [r3, #6]
	rtc_time->mon  = (BCDMON & 0xF)+ (BCDMON >>4)*10;
 c104a8c:	e59f3370 	ldr	r3, [pc, #880]	; c104e04 <rtc_gettime+0x3e8>
 c104a90:	e5933000 	ldr	r3, [r3]
 c104a94:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a98:	e203300f 	and	r3, r3, #15
 c104a9c:	e20320ff 	and	r2, r3, #255	; 0xff
 c104aa0:	e59f335c 	ldr	r3, [pc, #860]	; c104e04 <rtc_gettime+0x3e8>
 c104aa4:	e5933000 	ldr	r3, [r3]
 c104aa8:	e1a03223 	lsr	r3, r3, #4
 c104aac:	e20330ff 	and	r3, r3, #255	; 0xff
 c104ab0:	e1a01003 	mov	r1, r3
 c104ab4:	e1a01101 	lsl	r1, r1, #2
 c104ab8:	e0813003 	add	r3, r1, r3
 c104abc:	e1a03083 	lsl	r3, r3, #1
 c104ac0:	e20330ff 	and	r3, r3, #255	; 0xff
 c104ac4:	e0823003 	add	r3, r2, r3
 c104ac8:	e20320ff 	and	r2, r3, #255	; 0xff
 c104acc:	e51b3010 	ldr	r3, [fp, #-16]
 c104ad0:	e5c32005 	strb	r2, [r3, #5]
	rtc_time->mday = (BCDDAY & 0xF)+ (BCDDAY >>4)*10;
 c104ad4:	e59f332c 	ldr	r3, [pc, #812]	; c104e08 <rtc_gettime+0x3ec>
 c104ad8:	e5933000 	ldr	r3, [r3]
 c104adc:	e20330ff 	and	r3, r3, #255	; 0xff
 c104ae0:	e203300f 	and	r3, r3, #15
 c104ae4:	e20320ff 	and	r2, r3, #255	; 0xff
 c104ae8:	e59f3318 	ldr	r3, [pc, #792]	; c104e08 <rtc_gettime+0x3ec>
 c104aec:	e5933000 	ldr	r3, [r3]
 c104af0:	e1a03223 	lsr	r3, r3, #4
 c104af4:	e20330ff 	and	r3, r3, #255	; 0xff
 c104af8:	e1a01003 	mov	r1, r3
 c104afc:	e1a01101 	lsl	r1, r1, #2
 c104b00:	e0813003 	add	r3, r1, r3
 c104b04:	e1a03083 	lsl	r3, r3, #1
 c104b08:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b0c:	e0823003 	add	r3, r2, r3
 c104b10:	e20320ff 	and	r2, r3, #255	; 0xff
 c104b14:	e51b3010 	ldr	r3, [fp, #-16]
 c104b18:	e5c32003 	strb	r2, [r3, #3]
	rtc_time->wday = BCDDATE;
 c104b1c:	e59f32e8 	ldr	r3, [pc, #744]	; c104e0c <rtc_gettime+0x3f0>
 c104b20:	e5933000 	ldr	r3, [r3]
 c104b24:	e20320ff 	and	r2, r3, #255	; 0xff
 c104b28:	e51b3010 	ldr	r3, [fp, #-16]
 c104b2c:	e5c32004 	strb	r2, [r3, #4]
	rtc_time->hour = (BCDHOUR & 0xF)+ (BCDHOUR >>4)*10;
 c104b30:	e59f32d8 	ldr	r3, [pc, #728]	; c104e10 <rtc_gettime+0x3f4>
 c104b34:	e5933000 	ldr	r3, [r3]
 c104b38:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b3c:	e203300f 	and	r3, r3, #15
 c104b40:	e20320ff 	and	r2, r3, #255	; 0xff
 c104b44:	e59f32c4 	ldr	r3, [pc, #708]	; c104e10 <rtc_gettime+0x3f4>
 c104b48:	e5933000 	ldr	r3, [r3]
 c104b4c:	e1a03223 	lsr	r3, r3, #4
 c104b50:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b54:	e1a01003 	mov	r1, r3
 c104b58:	e1a01101 	lsl	r1, r1, #2
 c104b5c:	e0813003 	add	r3, r1, r3
 c104b60:	e1a03083 	lsl	r3, r3, #1
 c104b64:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b68:	e0823003 	add	r3, r2, r3
 c104b6c:	e20320ff 	and	r2, r3, #255	; 0xff
 c104b70:	e51b3010 	ldr	r3, [fp, #-16]
 c104b74:	e5c32002 	strb	r2, [r3, #2]
	rtc_time->min  = (BCDMIN & 0xF)+ (BCDMIN >>4)*10;
 c104b78:	e59f3294 	ldr	r3, [pc, #660]	; c104e14 <rtc_gettime+0x3f8>
 c104b7c:	e5933000 	ldr	r3, [r3]
 c104b80:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b84:	e203300f 	and	r3, r3, #15
 c104b88:	e20320ff 	and	r2, r3, #255	; 0xff
 c104b8c:	e59f3280 	ldr	r3, [pc, #640]	; c104e14 <rtc_gettime+0x3f8>
 c104b90:	e5933000 	ldr	r3, [r3]
 c104b94:	e1a03223 	lsr	r3, r3, #4
 c104b98:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b9c:	e1a01003 	mov	r1, r3
 c104ba0:	e1a01101 	lsl	r1, r1, #2
 c104ba4:	e0813003 	add	r3, r1, r3
 c104ba8:	e1a03083 	lsl	r3, r3, #1
 c104bac:	e20330ff 	and	r3, r3, #255	; 0xff
 c104bb0:	e0823003 	add	r3, r2, r3
 c104bb4:	e20320ff 	and	r2, r3, #255	; 0xff
 c104bb8:	e51b3010 	ldr	r3, [fp, #-16]
 c104bbc:	e5c32001 	strb	r2, [r3, #1]
	rtc_time->sec  = (BCDSEC & 0xF)+ (BCDSEC >>4)*10;
 c104bc0:	e59f3250 	ldr	r3, [pc, #592]	; c104e18 <rtc_gettime+0x3fc>
 c104bc4:	e5933000 	ldr	r3, [r3]
 c104bc8:	e20330ff 	and	r3, r3, #255	; 0xff
 c104bcc:	e203300f 	and	r3, r3, #15
 c104bd0:	e20320ff 	and	r2, r3, #255	; 0xff
 c104bd4:	e59f323c 	ldr	r3, [pc, #572]	; c104e18 <rtc_gettime+0x3fc>
 c104bd8:	e5933000 	ldr	r3, [r3]
 c104bdc:	e1a03223 	lsr	r3, r3, #4
 c104be0:	e20330ff 	and	r3, r3, #255	; 0xff
 c104be4:	e1a01003 	mov	r1, r3
 c104be8:	e1a01101 	lsl	r1, r1, #2
 c104bec:	e0813003 	add	r3, r1, r3
 c104bf0:	e1a03083 	lsl	r3, r3, #1
 c104bf4:	e20330ff 	and	r3, r3, #255	; 0xff
 c104bf8:	e0823003 	add	r3, r2, r3
 c104bfc:	e20320ff 	and	r2, r3, #255	; 0xff
 c104c00:	e51b3010 	ldr	r3, [fp, #-16]
 c104c04:	e5c32000 	strb	r2, [r3]
	if( ! rtc_time->sec ){
 c104c08:	e51b3010 	ldr	r3, [fp, #-16]
 c104c0c:	e5d33000 	ldrb	r3, [r3]
 c104c10:	e3530000 	cmp	r3, #0
 c104c14:	1a000070 	bne	c104ddc <rtc_gettime+0x3c0>
		rtc_time->year = (BCDYEAR & 0xF)+ (BCDYEAR >>4)*10;
 c104c18:	e59f31e0 	ldr	r3, [pc, #480]	; c104e00 <rtc_gettime+0x3e4>
 c104c1c:	e5933000 	ldr	r3, [r3]
 c104c20:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c24:	e203300f 	and	r3, r3, #15
 c104c28:	e20320ff 	and	r2, r3, #255	; 0xff
 c104c2c:	e59f31cc 	ldr	r3, [pc, #460]	; c104e00 <rtc_gettime+0x3e4>
 c104c30:	e5933000 	ldr	r3, [r3]
 c104c34:	e1a03223 	lsr	r3, r3, #4
 c104c38:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c3c:	e1a01003 	mov	r1, r3
 c104c40:	e1a01101 	lsl	r1, r1, #2
 c104c44:	e0813003 	add	r3, r1, r3
 c104c48:	e1a03083 	lsl	r3, r3, #1
 c104c4c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c50:	e0823003 	add	r3, r2, r3
 c104c54:	e20320ff 	and	r2, r3, #255	; 0xff
 c104c58:	e51b3010 	ldr	r3, [fp, #-16]
 c104c5c:	e5c32006 	strb	r2, [r3, #6]
		rtc_time->mon  = (BCDMON & 0xF)+ (BCDMON >>4)*10;
 c104c60:	e59f319c 	ldr	r3, [pc, #412]	; c104e04 <rtc_gettime+0x3e8>
 c104c64:	e5933000 	ldr	r3, [r3]
 c104c68:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c6c:	e203300f 	and	r3, r3, #15
 c104c70:	e20320ff 	and	r2, r3, #255	; 0xff
 c104c74:	e59f3188 	ldr	r3, [pc, #392]	; c104e04 <rtc_gettime+0x3e8>
 c104c78:	e5933000 	ldr	r3, [r3]
 c104c7c:	e1a03223 	lsr	r3, r3, #4
 c104c80:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c84:	e1a01003 	mov	r1, r3
 c104c88:	e1a01101 	lsl	r1, r1, #2
 c104c8c:	e0813003 	add	r3, r1, r3
 c104c90:	e1a03083 	lsl	r3, r3, #1
 c104c94:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c98:	e0823003 	add	r3, r2, r3
 c104c9c:	e20320ff 	and	r2, r3, #255	; 0xff
 c104ca0:	e51b3010 	ldr	r3, [fp, #-16]
 c104ca4:	e5c32005 	strb	r2, [r3, #5]
		rtc_time->mday = (BCDDAY & 0xF)+ (BCDDAY >>4)*10;
 c104ca8:	e59f3158 	ldr	r3, [pc, #344]	; c104e08 <rtc_gettime+0x3ec>
 c104cac:	e5933000 	ldr	r3, [r3]
 c104cb0:	e20330ff 	and	r3, r3, #255	; 0xff
 c104cb4:	e203300f 	and	r3, r3, #15
 c104cb8:	e20320ff 	and	r2, r3, #255	; 0xff
 c104cbc:	e59f3144 	ldr	r3, [pc, #324]	; c104e08 <rtc_gettime+0x3ec>
 c104cc0:	e5933000 	ldr	r3, [r3]
 c104cc4:	e1a03223 	lsr	r3, r3, #4
 c104cc8:	e20330ff 	and	r3, r3, #255	; 0xff
 c104ccc:	e1a01003 	mov	r1, r3
 c104cd0:	e1a01101 	lsl	r1, r1, #2
 c104cd4:	e0813003 	add	r3, r1, r3
 c104cd8:	e1a03083 	lsl	r3, r3, #1
 c104cdc:	e20330ff 	and	r3, r3, #255	; 0xff
 c104ce0:	e0823003 	add	r3, r2, r3
 c104ce4:	e20320ff 	and	r2, r3, #255	; 0xff
 c104ce8:	e51b3010 	ldr	r3, [fp, #-16]
 c104cec:	e5c32003 	strb	r2, [r3, #3]
		rtc_time->wday = BCDDATE;
 c104cf0:	e59f3114 	ldr	r3, [pc, #276]	; c104e0c <rtc_gettime+0x3f0>
 c104cf4:	e5933000 	ldr	r3, [r3]
 c104cf8:	e20320ff 	and	r2, r3, #255	; 0xff
 c104cfc:	e51b3010 	ldr	r3, [fp, #-16]
 c104d00:	e5c32004 	strb	r2, [r3, #4]
		rtc_time->hour = (BCDHOUR & 0xF)+ (BCDHOUR >>4)*10;
 c104d04:	e59f3104 	ldr	r3, [pc, #260]	; c104e10 <rtc_gettime+0x3f4>
 c104d08:	e5933000 	ldr	r3, [r3]
 c104d0c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d10:	e203300f 	and	r3, r3, #15
 c104d14:	e20320ff 	and	r2, r3, #255	; 0xff
 c104d18:	e59f30f0 	ldr	r3, [pc, #240]	; c104e10 <rtc_gettime+0x3f4>
 c104d1c:	e5933000 	ldr	r3, [r3]
 c104d20:	e1a03223 	lsr	r3, r3, #4
 c104d24:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d28:	e1a01003 	mov	r1, r3
 c104d2c:	e1a01101 	lsl	r1, r1, #2
 c104d30:	e0813003 	add	r3, r1, r3
 c104d34:	e1a03083 	lsl	r3, r3, #1
 c104d38:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d3c:	e0823003 	add	r3, r2, r3
 c104d40:	e20320ff 	and	r2, r3, #255	; 0xff
 c104d44:	e51b3010 	ldr	r3, [fp, #-16]
 c104d48:	e5c32002 	strb	r2, [r3, #2]
		rtc_time->min  = (BCDMIN & 0xF)+ (BCDMIN >>4)*10;
 c104d4c:	e59f30c0 	ldr	r3, [pc, #192]	; c104e14 <rtc_gettime+0x3f8>
 c104d50:	e5933000 	ldr	r3, [r3]
 c104d54:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d58:	e203300f 	and	r3, r3, #15
 c104d5c:	e20320ff 	and	r2, r3, #255	; 0xff
 c104d60:	e59f30ac 	ldr	r3, [pc, #172]	; c104e14 <rtc_gettime+0x3f8>
 c104d64:	e5933000 	ldr	r3, [r3]
 c104d68:	e1a03223 	lsr	r3, r3, #4
 c104d6c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d70:	e1a01003 	mov	r1, r3
 c104d74:	e1a01101 	lsl	r1, r1, #2
 c104d78:	e0813003 	add	r3, r1, r3
 c104d7c:	e1a03083 	lsl	r3, r3, #1
 c104d80:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d84:	e0823003 	add	r3, r2, r3
 c104d88:	e20320ff 	and	r2, r3, #255	; 0xff
 c104d8c:	e51b3010 	ldr	r3, [fp, #-16]
 c104d90:	e5c32001 	strb	r2, [r3, #1]
		rtc_time->sec  = (BCDSEC & 0xF)+ (BCDSEC >>4)*10;
 c104d94:	e59f307c 	ldr	r3, [pc, #124]	; c104e18 <rtc_gettime+0x3fc>
 c104d98:	e5933000 	ldr	r3, [r3]
 c104d9c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104da0:	e203300f 	and	r3, r3, #15
 c104da4:	e20320ff 	and	r2, r3, #255	; 0xff
 c104da8:	e59f3068 	ldr	r3, [pc, #104]	; c104e18 <rtc_gettime+0x3fc>
 c104dac:	e5933000 	ldr	r3, [r3]
 c104db0:	e1a03223 	lsr	r3, r3, #4
 c104db4:	e20330ff 	and	r3, r3, #255	; 0xff
 c104db8:	e1a01003 	mov	r1, r3
 c104dbc:	e1a01101 	lsl	r1, r1, #2
 c104dc0:	e0813003 	add	r3, r1, r3
 c104dc4:	e1a03083 	lsl	r3, r3, #1
 c104dc8:	e20330ff 	and	r3, r3, #255	; 0xff
 c104dcc:	e0823003 	add	r3, r2, r3
 c104dd0:	e20320ff 	and	r2, r3, #255	; 0xff
 c104dd4:	e51b3010 	ldr	r3, [fp, #-16]
 c104dd8:	e5c32000 	strb	r2, [r3]
	};

	RTCCON &= ~(1<<0);
 c104ddc:	e59f3018 	ldr	r3, [pc, #24]	; c104dfc <rtc_gettime+0x3e0>
 c104de0:	e59f2014 	ldr	r2, [pc, #20]	; c104dfc <rtc_gettime+0x3e0>
 c104de4:	e5922000 	ldr	r2, [r2]
 c104de8:	e3c22001 	bic	r2, r2, #1
 c104dec:	e5832000 	str	r2, [r3]
}
 c104df0:	e24bd00c 	sub	sp, fp, #12
 c104df4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104df8:	e12fff1e 	bx	lr
 c104dfc:	01d70040 	.word	0x01d70040
 c104e00:	01d70088 	.word	0x01d70088
 c104e04:	01d70084 	.word	0x01d70084
 c104e08:	01d7007c 	.word	0x01d7007c
 c104e0c:	01d70080 	.word	0x01d70080
 c104e10:	01d70078 	.word	0x01d70078
 c104e14:	01d70074 	.word	0x01d70074
 c104e18:	01d70070 	.word	0x01d70070

0c104e1c <rtc_open>:


void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c104e1c:	e1a0c00d 	mov	ip, sp
 c104e20:	e92dd800 	push	{fp, ip, lr, pc}
 c104e24:	e24cb004 	sub	fp, ip, #4
 c104e28:	e24dd008 	sub	sp, sp, #8
 c104e2c:	e50b0010 	str	r0, [fp, #-16]
 c104e30:	e1a03001 	mov	r3, r1
 c104e34:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	pISR_TICK = (uint32)isr;
 c104e38:	e59f3040 	ldr	r3, [pc, #64]	; c104e80 <rtc_open+0x64>
 c104e3c:	e51b2010 	ldr	r2, [fp, #-16]
 c104e40:	e5832000 	str	r2, [r3]
	I_ISPC    = (1<<20);
 c104e44:	e59f3038 	ldr	r3, [pc, #56]	; c104e84 <rtc_open+0x68>
 c104e48:	e3a02601 	mov	r2, #1048576	; 0x100000
 c104e4c:	e5832000 	str	r2, [r3]
	INTMSK   &= ~((1<<26)+(1<<20));
 c104e50:	e59f3030 	ldr	r3, [pc, #48]	; c104e88 <rtc_open+0x6c>
 c104e54:	e59f202c 	ldr	r2, [pc, #44]	; c104e88 <rtc_open+0x6c>
 c104e58:	e5922000 	ldr	r2, [r2]
 c104e5c:	e3c22641 	bic	r2, r2, #68157440	; 0x4100000
 c104e60:	e5832000 	str	r2, [r3]
	TICNT     = (1<<7) +(tick_count);//&0x3f
 c104e64:	e59f3020 	ldr	r3, [pc, #32]	; c104e8c <rtc_open+0x70>
 c104e68:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c104e6c:	e2822080 	add	r2, r2, #128	; 0x80
 c104e70:	e5832000 	str	r2, [r3]
}
 c104e74:	e24bd00c 	sub	sp, fp, #12
 c104e78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104e7c:	e12fff1e 	bx	lr
 c104e80:	0c7fff70 	.word	0x0c7fff70
 c104e84:	01e00024 	.word	0x01e00024
 c104e88:	01e0000c 	.word	0x01e0000c
 c104e8c:	01d7008c 	.word	0x01d7008c

0c104e90 <rtc_close>:

void rtc_close( void )
{
 c104e90:	e1a0c00d 	mov	ip, sp
 c104e94:	e92dd800 	push	{fp, ip, lr, pc}
 c104e98:	e24cb004 	sub	fp, ip, #4
	TICNT     = 0x0;
 c104e9c:	e59f3030 	ldr	r3, [pc, #48]	; c104ed4 <rtc_close+0x44>
 c104ea0:	e3a02000 	mov	r2, #0
 c104ea4:	e5832000 	str	r2, [r3]
	INTMSK   |= ((1<<20));
 c104ea8:	e59f3028 	ldr	r3, [pc, #40]	; c104ed8 <rtc_close+0x48>
 c104eac:	e59f2024 	ldr	r2, [pc, #36]	; c104ed8 <rtc_close+0x48>
 c104eb0:	e5922000 	ldr	r2, [r2]
 c104eb4:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c104eb8:	e5832000 	str	r2, [r3]
	pISR_TICK = (uint32) isr_TICK_dummy;
 c104ebc:	e59f3018 	ldr	r3, [pc, #24]	; c104edc <rtc_close+0x4c>
 c104ec0:	e59f2018 	ldr	r2, [pc, #24]	; c104ee0 <rtc_close+0x50>
 c104ec4:	e5832000 	str	r2, [r3]
}
 c104ec8:	e24bd00c 	sub	sp, fp, #12
 c104ecc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104ed0:	e12fff1e 	bx	lr
 c104ed4:	01d7008c 	.word	0x01d7008c
 c104ed8:	01e0000c 	.word	0x01e0000c
 c104edc:	0c7fff70 	.word	0x0c7fff70
 c104ee0:	0c105d20 	.word	0x0c105d20

0c104ee4 <intToStr>:

void intToStr(int num, char* str, int len)
{
 c104ee4:	e1a0c00d 	mov	ip, sp
 c104ee8:	e92dd800 	push	{fp, ip, lr, pc}
 c104eec:	e24cb004 	sub	fp, ip, #4
 c104ef0:	e24dd018 	sub	sp, sp, #24
 c104ef4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c104ef8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c104efc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
	int i;
	for (i = len - 1; i >= 0; i--)
 c104f00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104f04:	e2433001 	sub	r3, r3, #1
 c104f08:	e50b3010 	str	r3, [fp, #-16]
 c104f0c:	ea00001b 	b	c104f80 <intToStr+0x9c>
	{
		str[i] = (num % 10) + '0';
 c104f10:	e51b3010 	ldr	r3, [fp, #-16]
 c104f14:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c104f18:	e0820003 	add	r0, r2, r3
 c104f1c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c104f20:	e59f3070 	ldr	r3, [pc, #112]	; c104f98 <intToStr+0xb4>
 c104f24:	e0c32391 	smull	r2, r3, r1, r3
 c104f28:	e1a02143 	asr	r2, r3, #2
 c104f2c:	e1a03fc1 	asr	r3, r1, #31
 c104f30:	e0632002 	rsb	r2, r3, r2
 c104f34:	e1a03002 	mov	r3, r2
 c104f38:	e1a03103 	lsl	r3, r3, #2
 c104f3c:	e0833002 	add	r3, r3, r2
 c104f40:	e1a03083 	lsl	r3, r3, #1
 c104f44:	e0632001 	rsb	r2, r3, r1
 c104f48:	e20230ff 	and	r3, r2, #255	; 0xff
 c104f4c:	e2833030 	add	r3, r3, #48	; 0x30
 c104f50:	e20330ff 	and	r3, r3, #255	; 0xff
 c104f54:	e5c03000 	strb	r3, [r0]
		num /= 10;
 c104f58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104f5c:	e59f2034 	ldr	r2, [pc, #52]	; c104f98 <intToStr+0xb4>
 c104f60:	e0c21293 	smull	r1, r2, r3, r2
 c104f64:	e1a02142 	asr	r2, r2, #2
 c104f68:	e1a03fc3 	asr	r3, r3, #31
 c104f6c:	e0633002 	rsb	r3, r3, r2
 c104f70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
}

void intToStr(int num, char* str, int len)
{
	int i;
	for (i = len - 1; i >= 0; i--)
 c104f74:	e51b3010 	ldr	r3, [fp, #-16]
 c104f78:	e2433001 	sub	r3, r3, #1
 c104f7c:	e50b3010 	str	r3, [fp, #-16]
 c104f80:	e51b3010 	ldr	r3, [fp, #-16]
 c104f84:	e3530000 	cmp	r3, #0
 c104f88:	aaffffe0 	bge	c104f10 <intToStr+0x2c>
	{
		str[i] = (num % 10) + '0';
		num /= 10;
	}
}
 c104f8c:	e24bd00c 	sub	sp, fp, #12
 c104f90:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104f94:	e12fff1e 	bx	lr
 c104f98:	66666667 	.word	0x66666667

0c104f9c <rtc_stringDate>:

char* rtc_stringDate (rtc_time_t rtc_time)
{
 c104f9c:	e1a0c00d 	mov	ip, sp
 c104fa0:	e92dd800 	push	{fp, ip, lr, pc}
 c104fa4:	e24cb004 	sub	fp, ip, #4
 c104fa8:	e24dd030 	sub	sp, sp, #48	; 0x30
 c104fac:	e24b303c 	sub	r3, fp, #60	; 0x3c
 c104fb0:	e8830003 	stm	r3, {r0, r1}
	char* wday;
		switch(rtc_time.wday){
 c104fb4:	e55b3038 	ldrb	r3, [fp, #-56]	; 0xffffffc8
 c104fb8:	e2433001 	sub	r3, r3, #1
 c104fbc:	e3530006 	cmp	r3, #6
 c104fc0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c104fc4:	ea00001b 	b	c105038 <rtc_stringDate+0x9c>
 c104fc8:	0c104fe4 	.word	0x0c104fe4
 c104fcc:	0c104ff0 	.word	0x0c104ff0
 c104fd0:	0c104ffc 	.word	0x0c104ffc
 c104fd4:	0c105008 	.word	0x0c105008
 c104fd8:	0c105014 	.word	0x0c105014
 c104fdc:	0c105020 	.word	0x0c105020
 c104fe0:	0c10502c 	.word	0x0c10502c
			case 1:  wday = "dom";
 c104fe4:	e59f3488 	ldr	r3, [pc, #1160]	; c105474 <rtc_stringDate+0x4d8>
 c104fe8:	e50b3010 	str	r3, [fp, #-16]
				break;
 c104fec:	ea000011 	b	c105038 <rtc_stringDate+0x9c>
			case 2:  wday = "lun";
 c104ff0:	e59f3480 	ldr	r3, [pc, #1152]	; c105478 <rtc_stringDate+0x4dc>
 c104ff4:	e50b3010 	str	r3, [fp, #-16]
				break;
 c104ff8:	ea00000e 	b	c105038 <rtc_stringDate+0x9c>
			case 3:  wday = "mar";
 c104ffc:	e59f3478 	ldr	r3, [pc, #1144]	; c10547c <rtc_stringDate+0x4e0>
 c105000:	e50b3010 	str	r3, [fp, #-16]
				break;
 c105004:	ea00000b 	b	c105038 <rtc_stringDate+0x9c>
			case 4:  wday = "mie";
 c105008:	e59f3470 	ldr	r3, [pc, #1136]	; c105480 <rtc_stringDate+0x4e4>
 c10500c:	e50b3010 	str	r3, [fp, #-16]
				break;
 c105010:	ea000008 	b	c105038 <rtc_stringDate+0x9c>
			case 5:  wday = "jue";
 c105014:	e59f3468 	ldr	r3, [pc, #1128]	; c105484 <rtc_stringDate+0x4e8>
 c105018:	e50b3010 	str	r3, [fp, #-16]
				break;
 c10501c:	ea000005 	b	c105038 <rtc_stringDate+0x9c>
			case 6:  wday = "vie";
 c105020:	e59f3460 	ldr	r3, [pc, #1120]	; c105488 <rtc_stringDate+0x4ec>
 c105024:	e50b3010 	str	r3, [fp, #-16]
				break;
 c105028:	ea000002 	b	c105038 <rtc_stringDate+0x9c>
			case 7:  wday = "sab";
 c10502c:	e59f3458 	ldr	r3, [pc, #1112]	; c10548c <rtc_stringDate+0x4f0>
 c105030:	e50b3010 	str	r3, [fp, #-16]
				break;
 c105034:	e1a00000 	nop			; (mov r0, r0)
		}
		char * date = "";
 c105038:	e59f3450 	ldr	r3, [pc, #1104]	; c105490 <rtc_stringDate+0x4f4>
 c10503c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

		char dayStr[2] = {'0', '0'};
 c105040:	e3a03000 	mov	r3, #0
 c105044:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
 c105048:	e3a03000 	mov	r3, #0
 c10504c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
 c105050:	e3a03030 	mov	r3, #48	; 0x30
 c105054:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
 c105058:	e3a03030 	mov	r3, #48	; 0x30
 c10505c:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
		char monStr[2] = {'0', '0'};
 c105060:	e3a03000 	mov	r3, #0
 c105064:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
 c105068:	e3a03000 	mov	r3, #0
 c10506c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
 c105070:	e3a03030 	mov	r3, #48	; 0x30
 c105074:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
 c105078:	e3a03030 	mov	r3, #48	; 0x30
 c10507c:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
		char yearStr[2] = {'0', '0'};
 c105080:	e3a03000 	mov	r3, #0
 c105084:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
 c105088:	e3a03000 	mov	r3, #0
 c10508c:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
 c105090:	e3a03030 	mov	r3, #48	; 0x30
 c105094:	e54b3024 	strb	r3, [fp, #-36]	; 0xffffffdc
 c105098:	e3a03030 	mov	r3, #48	; 0x30
 c10509c:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
		char hourStr[2] = {'0', '0'};
 c1050a0:	e3a03000 	mov	r3, #0
 c1050a4:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
 c1050a8:	e3a03000 	mov	r3, #0
 c1050ac:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
 c1050b0:	e3a03030 	mov	r3, #48	; 0x30
 c1050b4:	e54b3028 	strb	r3, [fp, #-40]	; 0xffffffd8
 c1050b8:	e3a03030 	mov	r3, #48	; 0x30
 c1050bc:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
		char minStr[2] = {'0', '0'};
 c1050c0:	e3a03000 	mov	r3, #0
 c1050c4:	e14b32bc 	strh	r3, [fp, #-44]	; 0xffffffd4
 c1050c8:	e3a03000 	mov	r3, #0
 c1050cc:	e54b302a 	strb	r3, [fp, #-42]	; 0xffffffd6
 c1050d0:	e3a03030 	mov	r3, #48	; 0x30
 c1050d4:	e54b302c 	strb	r3, [fp, #-44]	; 0xffffffd4
 c1050d8:	e3a03030 	mov	r3, #48	; 0x30
 c1050dc:	e54b302b 	strb	r3, [fp, #-43]	; 0xffffffd5
		char secStr[2] = {'0', '0'};
 c1050e0:	e3a03000 	mov	r3, #0
 c1050e4:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
 c1050e8:	e3a03000 	mov	r3, #0
 c1050ec:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
 c1050f0:	e3a03030 	mov	r3, #48	; 0x30
 c1050f4:	e54b3030 	strb	r3, [fp, #-48]	; 0xffffffd0
 c1050f8:	e3a03030 	mov	r3, #48	; 0x30
 c1050fc:	e54b302f 	strb	r3, [fp, #-47]	; 0xffffffd1

		intToStr(rtc_time.mday, dayStr, 2);
 c105100:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
 c105104:	e1a02003 	mov	r2, r3
 c105108:	e24b301c 	sub	r3, fp, #28
 c10510c:	e1a00002 	mov	r0, r2
 c105110:	e1a01003 	mov	r1, r3
 c105114:	e3a02002 	mov	r2, #2
 c105118:	ebffff71 	bl	c104ee4 <intToStr>
		intToStr(rtc_time.mon, monStr, 2);
 c10511c:	e55b3037 	ldrb	r3, [fp, #-55]	; 0xffffffc9
 c105120:	e1a02003 	mov	r2, r3
 c105124:	e24b3020 	sub	r3, fp, #32
 c105128:	e1a00002 	mov	r0, r2
 c10512c:	e1a01003 	mov	r1, r3
 c105130:	e3a02002 	mov	r2, #2
 c105134:	ebffff6a 	bl	c104ee4 <intToStr>
		intToStr(rtc_time.year, yearStr, 2);
 c105138:	e55b2036 	ldrb	r2, [fp, #-54]	; 0xffffffca
 c10513c:	e59f3350 	ldr	r3, [pc, #848]	; c105494 <rtc_stringDate+0x4f8>
 c105140:	e0831392 	umull	r1, r3, r2, r3
 c105144:	e1a012a3 	lsr	r1, r3, #5
 c105148:	e1a03001 	mov	r3, r1
 c10514c:	e1a03103 	lsl	r3, r3, #2
 c105150:	e0833001 	add	r3, r3, r1
 c105154:	e1a01103 	lsl	r1, r3, #2
 c105158:	e0833001 	add	r3, r3, r1
 c10515c:	e1a03103 	lsl	r3, r3, #2
 c105160:	e0633002 	rsb	r3, r3, r2
 c105164:	e20330ff 	and	r3, r3, #255	; 0xff
 c105168:	e1a02003 	mov	r2, r3
 c10516c:	e24b3024 	sub	r3, fp, #36	; 0x24
 c105170:	e1a00002 	mov	r0, r2
 c105174:	e1a01003 	mov	r1, r3
 c105178:	e3a02002 	mov	r2, #2
 c10517c:	ebffff58 	bl	c104ee4 <intToStr>
		intToStr(rtc_time.hour, hourStr, 2);
 c105180:	e55b303a 	ldrb	r3, [fp, #-58]	; 0xffffffc6
 c105184:	e1a02003 	mov	r2, r3
 c105188:	e24b3028 	sub	r3, fp, #40	; 0x28
 c10518c:	e1a00002 	mov	r0, r2
 c105190:	e1a01003 	mov	r1, r3
 c105194:	e3a02002 	mov	r2, #2
 c105198:	ebffff51 	bl	c104ee4 <intToStr>
		intToStr(rtc_time.min, minStr, 2);
 c10519c:	e55b303b 	ldrb	r3, [fp, #-59]	; 0xffffffc5
 c1051a0:	e1a02003 	mov	r2, r3
 c1051a4:	e24b302c 	sub	r3, fp, #44	; 0x2c
 c1051a8:	e1a00002 	mov	r0, r2
 c1051ac:	e1a01003 	mov	r1, r3
 c1051b0:	e3a02002 	mov	r2, #2
 c1051b4:	ebffff4a 	bl	c104ee4 <intToStr>
		intToStr(rtc_time.sec, secStr, 2);
 c1051b8:	e55b303c 	ldrb	r3, [fp, #-60]	; 0xffffffc4
 c1051bc:	e1a02003 	mov	r2, r3
 c1051c0:	e24b3030 	sub	r3, fp, #48	; 0x30
 c1051c4:	e1a00002 	mov	r0, r2
 c1051c8:	e1a01003 	mov	r1, r3
 c1051cc:	e3a02002 	mov	r2, #2
 c1051d0:	ebffff43 	bl	c104ee4 <intToStr>

		// Construir la cadena final
		int index = 0;
 c1051d4:	e3a03000 	mov	r3, #0
 c1051d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		while (*wday) {
 c1051dc:	ea00000b 	b	c105210 <rtc_stringDate+0x274>
			date[index++] = *wday++;
 c1051e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1051e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1051e8:	e0823003 	add	r3, r2, r3
 c1051ec:	e51b2010 	ldr	r2, [fp, #-16]
 c1051f0:	e5d22000 	ldrb	r2, [r2]
 c1051f4:	e5c32000 	strb	r2, [r3]
 c1051f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1051fc:	e2833001 	add	r3, r3, #1
 c105200:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c105204:	e51b3010 	ldr	r3, [fp, #-16]
 c105208:	e2833001 	add	r3, r3, #1
 c10520c:	e50b3010 	str	r3, [fp, #-16]
		intToStr(rtc_time.min, minStr, 2);
		intToStr(rtc_time.sec, secStr, 2);

		// Construir la cadena final
		int index = 0;
		while (*wday) {
 c105210:	e51b3010 	ldr	r3, [fp, #-16]
 c105214:	e5d33000 	ldrb	r3, [r3]
 c105218:	e3530000 	cmp	r3, #0
 c10521c:	1affffef 	bne	c1051e0 <rtc_stringDate+0x244>
			date[index++] = *wday++;
		}
		date[index++] = ',';
 c105220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105224:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105228:	e0823003 	add	r3, r2, r3
 c10522c:	e3a0202c 	mov	r2, #44	; 0x2c
 c105230:	e5c32000 	strb	r2, [r3]
 c105234:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105238:	e2833001 	add	r3, r3, #1
 c10523c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = dayStr[0];
 c105240:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105244:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105248:	e0823003 	add	r3, r2, r3
 c10524c:	e55b201c 	ldrb	r2, [fp, #-28]	; 0xffffffe4
 c105250:	e5c32000 	strb	r2, [r3]
 c105254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105258:	e2833001 	add	r3, r3, #1
 c10525c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = dayStr[1];
 c105260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105264:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105268:	e0823003 	add	r3, r2, r3
 c10526c:	e55b201b 	ldrb	r2, [fp, #-27]	; 0xffffffe5
 c105270:	e5c32000 	strb	r2, [r3]
 c105274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105278:	e2833001 	add	r3, r3, #1
 c10527c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = '/';
 c105280:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105284:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105288:	e0823003 	add	r3, r2, r3
 c10528c:	e3a0202f 	mov	r2, #47	; 0x2f
 c105290:	e5c32000 	strb	r2, [r3]
 c105294:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105298:	e2833001 	add	r3, r3, #1
 c10529c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = monStr[0];
 c1052a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1052a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1052a8:	e0823003 	add	r3, r2, r3
 c1052ac:	e55b2020 	ldrb	r2, [fp, #-32]	; 0xffffffe0
 c1052b0:	e5c32000 	strb	r2, [r3]
 c1052b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1052b8:	e2833001 	add	r3, r3, #1
 c1052bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = monStr[1];
 c1052c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1052c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1052c8:	e0823003 	add	r3, r2, r3
 c1052cc:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
 c1052d0:	e5c32000 	strb	r2, [r3]
 c1052d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1052d8:	e2833001 	add	r3, r3, #1
 c1052dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = '/';
 c1052e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1052e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1052e8:	e0823003 	add	r3, r2, r3
 c1052ec:	e3a0202f 	mov	r2, #47	; 0x2f
 c1052f0:	e5c32000 	strb	r2, [r3]
 c1052f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1052f8:	e2833001 	add	r3, r3, #1
 c1052fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = yearStr[0];
 c105300:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105304:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105308:	e0823003 	add	r3, r2, r3
 c10530c:	e55b2024 	ldrb	r2, [fp, #-36]	; 0xffffffdc
 c105310:	e5c32000 	strb	r2, [r3]
 c105314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105318:	e2833001 	add	r3, r3, #1
 c10531c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = yearStr[1];
 c105320:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105324:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105328:	e0823003 	add	r3, r2, r3
 c10532c:	e55b2023 	ldrb	r2, [fp, #-35]	; 0xffffffdd
 c105330:	e5c32000 	strb	r2, [r3]
 c105334:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105338:	e2833001 	add	r3, r3, #1
 c10533c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = ' ';
 c105340:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105344:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105348:	e0823003 	add	r3, r2, r3
 c10534c:	e3a02020 	mov	r2, #32
 c105350:	e5c32000 	strb	r2, [r3]
 c105354:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105358:	e2833001 	add	r3, r3, #1
 c10535c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = hourStr[0];
 c105360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105364:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105368:	e0823003 	add	r3, r2, r3
 c10536c:	e55b2028 	ldrb	r2, [fp, #-40]	; 0xffffffd8
 c105370:	e5c32000 	strb	r2, [r3]
 c105374:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105378:	e2833001 	add	r3, r3, #1
 c10537c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = hourStr[1];
 c105380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105384:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105388:	e0823003 	add	r3, r2, r3
 c10538c:	e55b2027 	ldrb	r2, [fp, #-39]	; 0xffffffd9
 c105390:	e5c32000 	strb	r2, [r3]
 c105394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105398:	e2833001 	add	r3, r3, #1
 c10539c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = ':';
 c1053a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1053a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1053a8:	e0823003 	add	r3, r2, r3
 c1053ac:	e3a0203a 	mov	r2, #58	; 0x3a
 c1053b0:	e5c32000 	strb	r2, [r3]
 c1053b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1053b8:	e2833001 	add	r3, r3, #1
 c1053bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = minStr[0];
 c1053c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1053c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1053c8:	e0823003 	add	r3, r2, r3
 c1053cc:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
 c1053d0:	e5c32000 	strb	r2, [r3]
 c1053d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1053d8:	e2833001 	add	r3, r3, #1
 c1053dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = minStr[1];
 c1053e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1053e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1053e8:	e0823003 	add	r3, r2, r3
 c1053ec:	e55b202b 	ldrb	r2, [fp, #-43]	; 0xffffffd5
 c1053f0:	e5c32000 	strb	r2, [r3]
 c1053f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1053f8:	e2833001 	add	r3, r3, #1
 c1053fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = ':';
 c105400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105404:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105408:	e0823003 	add	r3, r2, r3
 c10540c:	e3a0203a 	mov	r2, #58	; 0x3a
 c105410:	e5c32000 	strb	r2, [r3]
 c105414:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105418:	e2833001 	add	r3, r3, #1
 c10541c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = secStr[0];
 c105420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105424:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105428:	e0823003 	add	r3, r2, r3
 c10542c:	e55b2030 	ldrb	r2, [fp, #-48]	; 0xffffffd0
 c105430:	e5c32000 	strb	r2, [r3]
 c105434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105438:	e2833001 	add	r3, r3, #1
 c10543c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = secStr[1];
 c105440:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105444:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105448:	e0823003 	add	r3, r2, r3
 c10544c:	e55b202f 	ldrb	r2, [fp, #-47]	; 0xffffffd1
 c105450:	e5c32000 	strb	r2, [r3]
 c105454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105458:	e2833001 	add	r3, r3, #1
 c10545c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		date[index++] = '/0';

 c105460:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
	return date;
 c105464:	e1a00003 	mov	r0, r3
 c105468:	e24bd00c 	sub	sp, fp, #12
 c10546c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105470:	e12fff1e 	bx	lr
 c105474:	0c108dec 	.word	0x0c108dec
 c105478:	0c108df0 	.word	0x0c108df0
 c10547c:	0c108df4 	.word	0x0c108df4
 c105480:	0c108df8 	.word	0x0c108df8
 c105484:	0c108dfc 	.word	0x0c108dfc
 c105488:	0c108e00 	.word	0x0c108e00
 c10548c:	0c108e04 	.word	0x0c108e04
 c105490:	0c108e08 	.word	0x0c108e08
 c105494:	51eb851f 	.word	0x51eb851f

0c105498 <segs_init>:
static const uint8 hex2segs[16] = {0x12, 0x9f, 0x31,0x15,0x9c,0x54,0x50,0x1f,0x10,0x1c,0x18,0xd0,0x72,0x91,0x70,0x78};

static uint8 state;

void segs_init( void )
{
 c105498:	e1a0c00d 	mov	ip, sp
 c10549c:	e92dd800 	push	{fp, ip, lr, pc}
 c1054a0:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c1054a4:	eb000002 	bl	c1054b4 <segs_off>
}
 c1054a8:	e24bd00c 	sub	sp, fp, #12
 c1054ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1054b0:	e12fff1e 	bx	lr

0c1054b4 <segs_off>:

void segs_off( void )
{
 c1054b4:	e1a0c00d 	mov	ip, sp
 c1054b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1054bc:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c1054c0:	e59f3020 	ldr	r3, [pc, #32]	; c1054e8 <segs_off+0x34>
 c1054c4:	e3e02000 	mvn	r2, #0
 c1054c8:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c1054cc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1054d0:	e59f2010 	ldr	r2, [pc, #16]	; c1054e8 <segs_off+0x34>
 c1054d4:	e5d22000 	ldrb	r2, [r2]
 c1054d8:	e5c32000 	strb	r2, [r3]
}
 c1054dc:	e24bd00c 	sub	sp, fp, #12
 c1054e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1054e4:	e12fff1e 	bx	lr
 c1054e8:	0c10a59d 	.word	0x0c10a59d

0c1054ec <segs_putchar>:

void segs_putchar( uint8 n )
{
 c1054ec:	e1a0c00d 	mov	ip, sp
 c1054f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1054f4:	e24cb004 	sub	fp, ip, #4
 c1054f8:	e24dd008 	sub	sp, sp, #8
 c1054fc:	e1a03000 	mov	r3, r0
 c105500:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c105504:	e55b300d 	ldrb	r3, [fp, #-13]
 c105508:	e203300f 	and	r3, r3, #15
 c10550c:	e20320ff 	and	r2, r3, #255	; 0xff
 c105510:	e59f3024 	ldr	r3, [pc, #36]	; c10553c <segs_putchar+0x50>
 c105514:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c105518:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10551c:	e59f2018 	ldr	r2, [pc, #24]	; c10553c <segs_putchar+0x50>
 c105520:	e5d22000 	ldrb	r2, [r2]
 c105524:	e59f1014 	ldr	r1, [pc, #20]	; c105540 <segs_putchar+0x54>
 c105528:	e7d12002 	ldrb	r2, [r1, r2]
 c10552c:	e5c32000 	strb	r2, [r3]
};
 c105530:	e24bd00c 	sub	sp, fp, #12
 c105534:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105538:	e12fff1e 	bx	lr
 c10553c:	0c10a59d 	.word	0x0c10a59d
 c105540:	0c108e0c 	.word	0x0c108e0c

0c105544 <segs_status>:

uint8 segs_status( void )
{
 c105544:	e1a0c00d 	mov	ip, sp
 c105548:	e92dd800 	push	{fp, ip, lr, pc}
 c10554c:	e24cb004 	sub	fp, ip, #4
    return state;
 c105550:	e59f3010 	ldr	r3, [pc, #16]	; c105568 <segs_status+0x24>
 c105554:	e5d33000 	ldrb	r3, [r3]
};
 c105558:	e1a00003 	mov	r0, r3
 c10555c:	e24bd00c 	sub	sp, fp, #12
 c105560:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105564:	e12fff1e 	bx	lr
 c105568:	0c10a59d 	.word	0x0c10a59d

0c10556c <segs_putsos>:

void segs_putsos(uint8 n)
{
 c10556c:	e1a0c00d 	mov	ip, sp
 c105570:	e92dd800 	push	{fp, ip, lr, pc}
 c105574:	e24cb004 	sub	fp, ip, #4
 c105578:	e24dd010 	sub	sp, sp, #16
 c10557c:	e1a03000 	mov	r3, r0
 c105580:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint8 sos2segs[2] ={0x12, 0x54 };
 c105584:	e59f303c 	ldr	r3, [pc, #60]	; c1055c8 <segs_putsos+0x5c>
 c105588:	e1d330b0 	ldrh	r3, [r3]
 c10558c:	e14b31b0 	strh	r3, [fp, #-16]
	state = 0x12 & 0x0f;
 c105590:	e59f3034 	ldr	r3, [pc, #52]	; c1055cc <segs_putsos+0x60>
 c105594:	e3a02002 	mov	r2, #2
 c105598:	e5c32000 	strb	r2, [r3]
	SEGS = sos2segs[n];
 c10559c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1055a0:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
 c1055a4:	e3e02003 	mvn	r2, #3
 c1055a8:	e24b000c 	sub	r0, fp, #12
 c1055ac:	e0801001 	add	r1, r0, r1
 c1055b0:	e0812002 	add	r2, r1, r2
 c1055b4:	e5d22000 	ldrb	r2, [r2]
 c1055b8:	e5c32000 	strb	r2, [r3]
}
 c1055bc:	e24bd00c 	sub	sp, fp, #12
 c1055c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1055c4:	e12fff1e 	bx	lr
 c1055c8:	0c108e1c 	.word	0x0c108e1c
 c1055cc:	0c10a59d 	.word	0x0c10a59d

0c1055d0 <sys_init>:
void isr_RTC_dummy( void )       __attribute__ ((interrupt ("IRQ")));

void isr_USB_dummy( void )       __attribute__ ((interrupt ("IRQ")));

void sys_init( void )
{
 c1055d0:	e1a0c00d 	mov	ip, sp
 c1055d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1055d8:	e24cb004 	sub	fp, ip, #4
 c1055dc:	e24dd008 	sub	sp, sp, #8
    uint8 mode;

    WTCON  = 0;             // deshabilita el watchdog    
 c1055e0:	e59f30fc 	ldr	r3, [pc, #252]	; c1056e4 <sys_init+0x114>
 c1055e4:	e3a02000 	mov	r2, #0
 c1055e8:	e5832000 	str	r2, [r3]
    INTMSK = ~0;            // enmascara todas las interrupciones
 c1055ec:	e59f30f4 	ldr	r3, [pc, #244]	; c1056e8 <sys_init+0x118>
 c1055f0:	e3e02000 	mvn	r2, #0
 c1055f4:	e5832000 	str	r2, [r3]
    
    GET_OPMODE( &mode );    // lee el modo de ejecución del procesador
 c1055f8:	e10f0000 	mrs	r0, CPSR
 c1055fc:	e200001f 	and	r0, r0, #31
 c105600:	e54b000d 	strb	r0, [fp, #-13]
    if( mode != SVCMODE )
 c105604:	e55b300d 	ldrb	r3, [fp, #-13]
 c105608:	e3530013 	cmp	r3, #19
 c10560c:	0a000000 	beq	c105614 <sys_init+0x44>
        sys_recovery();     // si no es SVC (por una reejecución de la aplicación tras una excepción sin reset HW previo) recupera el modo SVC y restaura las pilas del sistema
 c105610:	eb0002be 	bl	c106110 <sys_recovery>

    // Configuracion del gestor de reloj
    LOCKTIME = 0xFFF;        // estabilizacion del PLL = 512 us
 c105614:	e59f30d0 	ldr	r3, [pc, #208]	; c1056ec <sys_init+0x11c>
 c105618:	e59f20d0 	ldr	r2, [pc, #208]	; c1056f0 <sys_init+0x120>
 c10561c:	e5832000 	str	r2, [r3]
    PLLCON   = 0x38021;       // MCLK = 64MHz
 c105620:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c105624:	e59f20c8 	ldr	r2, [pc, #200]	; c1056f4 <sys_init+0x124>
 c105628:	e5832000 	str	r2, [r3]
    CLKSLOW  = 0x8;       // MCLK_SLOW = 500 KHz
 c10562c:	e59f30c4 	ldr	r3, [pc, #196]	; c1056f8 <sys_init+0x128>
 c105630:	e3a02008 	mov	r2, #8
 c105634:	e5832000 	str	r2, [r3]
    CLKCON   = 0x7FF8;         // modo NORMAL y reloj distribuido a todos los controladores
 c105638:	e59f30bc 	ldr	r3, [pc, #188]	; c1056fc <sys_init+0x12c>
 c10563c:	e59f20bc 	ldr	r2, [pc, #188]	; c105700 <sys_init+0x130>
 c105640:	e5832000 	str	r2, [r3]

    // Configuracion del arbitro de bus   
    SBUSCON  =0x8000001B;         // prioridad fija por defecto LCD > ZDMA > BDMA > IRQ
 c105644:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c105648:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c10564c:	e5832000 	str	r2, [r3]
    
    // Configuracion de cache   
    SYSCFG =0x0;           // deshabilitada
 c105650:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c105654:	e3a02000 	mov	r2, #0
 c105658:	e5832000 	str	r2, [r3]

    // Configuacion del controlador de interrupciones    
    I_PMST = 0x1F1B;           // prioridades fijas por defecto
 c10565c:	e59f30a0 	ldr	r3, [pc, #160]	; c105704 <sys_init+0x134>
 c105660:	e59f20a0 	ldr	r2, [pc, #160]	; c105708 <sys_init+0x138>
 c105664:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1B1B1B1B;
 c105668:	e59f309c 	ldr	r3, [pc, #156]	; c10570c <sys_init+0x13c>
 c10566c:	e59f209c 	ldr	r2, [pc, #156]	; c105710 <sys_init+0x140>
 c105670:	e5832000 	str	r2, [r3]
    INTMOD = 0x0;           // todas las interrupciones en modo IRQ
 c105674:	e59f3098 	ldr	r3, [pc, #152]	; c105714 <sys_init+0x144>
 c105678:	e3a02000 	mov	r2, #0
 c10567c:	e5832000 	str	r2, [r3]
    install_dummy_isr();    // instala rutinas de tratamiento por defecto para todas las interrupciones
 c105680:	eb0001e7 	bl	c105e24 <install_dummy_isr>
    EXTINTPND = 0x01d20054;        // borra las interrupciones externas pendientes por linea EINT7..4
 c105684:	e59f308c 	ldr	r3, [pc, #140]	; c105718 <sys_init+0x148>
 c105688:	e59f2088 	ldr	r2, [pc, #136]	; c105718 <sys_init+0x148>
 c10568c:	e5832000 	str	r2, [r3]
    I_ISPC = 0x01e00024;           // borra todas las interrupciones pendientes   ESTO ES ASI??
 c105690:	e59f3084 	ldr	r3, [pc, #132]	; c10571c <sys_init+0x14c>
 c105694:	e59f2080 	ldr	r2, [pc, #128]	; c10571c <sys_init+0x14c>
 c105698:	e5832000 	str	r2, [r3]
    INTCON = 0x1;           // IRQ vectorizadas, linea IRQ activada, linea FIQ desactivada
 c10569c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c1056a0:	e3a02001 	mov	r2, #1
 c1056a4:	e5832000 	str	r2, [r3]
    SET_IRQFLAG( 0 );       // Habilita IRQ en el procesador
 c1056a8:	e10f0000 	mrs	r0, CPSR
 c1056ac:	e3c00080 	bic	r0, r0, #128	; 0x80
 c1056b0:	e3800000 	orr	r0, r0, #0
 c1056b4:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG( 1 );       // Deshabilita FIQ en el procesador
 c1056b8:	e10f0000 	mrs	r0, CPSR
 c1056bc:	e3c00040 	bic	r0, r0, #64	; 0x40
 c1056c0:	e3800040 	orr	r0, r0, #64	; 0x40
 c1056c4:	e121f000 	msr	CPSR_c, r0

    // Configuracion de puertos
    port_init();
 c1056c8:	eb000014 	bl	c105720 <port_init>
    
    // Configuracion de dispositivos
    segs_init();
 c1056cc:	ebffff71 	bl	c105498 <segs_init>
    uart0_init();
 c1056d0:	eb0007a5 	bl	c10756c <uart0_init>

    show_sys_info();
 c1056d4:	eb000278 	bl	c1060bc <show_sys_info>
}
 c1056d8:	e24bd00c 	sub	sp, fp, #12
 c1056dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1056e0:	e12fff1e 	bx	lr
 c1056e4:	01d30000 	.word	0x01d30000
 c1056e8:	01e0000c 	.word	0x01e0000c
 c1056ec:	01d8000c 	.word	0x01d8000c
 c1056f0:	00000fff 	.word	0x00000fff
 c1056f4:	00038021 	.word	0x00038021
 c1056f8:	01d80008 	.word	0x01d80008
 c1056fc:	01d80004 	.word	0x01d80004
 c105700:	00007ff8 	.word	0x00007ff8
 c105704:	01e00014 	.word	0x01e00014
 c105708:	00001f1b 	.word	0x00001f1b
 c10570c:	01e00010 	.word	0x01e00010
 c105710:	1b1b1b1b 	.word	0x1b1b1b1b
 c105714:	01e00008 	.word	0x01e00008
 c105718:	01d20054 	.word	0x01d20054
 c10571c:	01e00024 	.word	0x01e00024

0c105720 <port_init>:

static void port_init( void )
{
 c105720:	e1a0c00d 	mov	ip, sp
 c105724:	e92dd800 	push	{fp, ip, lr, pc}
 c105728:	e24cb004 	sub	fp, ip, #4
    PDATA = ~0;
 c10572c:	e59f3100 	ldr	r3, [pc, #256]	; c105834 <port_init+0x114>
 c105730:	e3e02000 	mvn	r2, #0
 c105734:	e5832000 	str	r2, [r3]
    PCONA = 0xFE;
 c105738:	e59f30f8 	ldr	r3, [pc, #248]	; c105838 <port_init+0x118>
 c10573c:	e3a020fe 	mov	r2, #254	; 0xfe
 c105740:	e5832000 	str	r2, [r3]

    PDATB = ~0;
 c105744:	e59f30f0 	ldr	r3, [pc, #240]	; c10583c <port_init+0x11c>
 c105748:	e3e02000 	mvn	r2, #0
 c10574c:	e5832000 	str	r2, [r3]
    PCONB = 0x14F;
 c105750:	e59f30e8 	ldr	r3, [pc, #232]	; c105840 <port_init+0x120>
 c105754:	e59f20e8 	ldr	r2, [pc, #232]	; c105844 <port_init+0x124>
 c105758:	e5832000 	str	r2, [r3]

    PDATC = ~0;
 c10575c:	e59f30e4 	ldr	r3, [pc, #228]	; c105848 <port_init+0x128>
 c105760:	e3e02000 	mvn	r2, #0
 c105764:	e5832000 	str	r2, [r3]
    PCONC = 0x5FF555FF;
 c105768:	e59f30dc 	ldr	r3, [pc, #220]	; c10584c <port_init+0x12c>
 c10576c:	e59f20dc 	ldr	r2, [pc, #220]	; c105850 <port_init+0x130>
 c105770:	e5832000 	str	r2, [r3]
    PUPC  = 0x94FB;
 c105774:	e59f30d8 	ldr	r3, [pc, #216]	; c105854 <port_init+0x134>
 c105778:	e59f20d8 	ldr	r2, [pc, #216]	; c105858 <port_init+0x138>
 c10577c:	e5832000 	str	r2, [r3]

    PDATD = ~0;
 c105780:	e59f30d4 	ldr	r3, [pc, #212]	; c10585c <port_init+0x13c>
 c105784:	e3e02000 	mvn	r2, #0
 c105788:	e5832000 	str	r2, [r3]
    PCOND = 0xAAAA;
 c10578c:	e59f30cc 	ldr	r3, [pc, #204]	; c105860 <port_init+0x140>
 c105790:	e59f20cc 	ldr	r2, [pc, #204]	; c105864 <port_init+0x144>
 c105794:	e5832000 	str	r2, [r3]
    PUPD  = 0xFF;
 c105798:	e59f30c8 	ldr	r3, [pc, #200]	; c105868 <port_init+0x148>
 c10579c:	e3a020ff 	mov	r2, #255	; 0xff
 c1057a0:	e5832000 	str	r2, [r3]
    
    PDATE = ~0;
 c1057a4:	e59f30c0 	ldr	r3, [pc, #192]	; c10586c <port_init+0x14c>
 c1057a8:	e3e02000 	mvn	r2, #0
 c1057ac:	e5832000 	str	r2, [r3]
    PCONE = 0x255A9;
 c1057b0:	e59f30b8 	ldr	r3, [pc, #184]	; c105870 <port_init+0x150>
 c1057b4:	e59f20b8 	ldr	r2, [pc, #184]	; c105874 <port_init+0x154>
 c1057b8:	e5832000 	str	r2, [r3]
    PUPE  = 0xFB;
 c1057bc:	e59f30b4 	ldr	r3, [pc, #180]	; c105878 <port_init+0x158>
 c1057c0:	e3a020fb 	mov	r2, #251	; 0xfb
 c1057c4:	e5832000 	str	r2, [r3]

    PDATF = ~0;
 c1057c8:	e59f30ac 	ldr	r3, [pc, #172]	; c10587c <port_init+0x15c>
 c1057cc:	e3e02000 	mvn	r2, #0
 c1057d0:	e5832000 	str	r2, [r3]
    PCONF = 0x251A;
 c1057d4:	e59f30a4 	ldr	r3, [pc, #164]	; c105880 <port_init+0x160>
 c1057d8:	e59f20a4 	ldr	r2, [pc, #164]	; c105884 <port_init+0x164>
 c1057dc:	e5832000 	str	r2, [r3]
    PUPF  = 0x74;
 c1057e0:	e59f30a0 	ldr	r3, [pc, #160]	; c105888 <port_init+0x168>
 c1057e4:	e3a02074 	mov	r2, #116	; 0x74
 c1057e8:	e5832000 	str	r2, [r3]
    
    PDATG = ~0;
 c1057ec:	e59f3098 	ldr	r3, [pc, #152]	; c10588c <port_init+0x16c>
 c1057f0:	e3e02000 	mvn	r2, #0
 c1057f4:	e5832000 	str	r2, [r3]
    PCONG = 0xF5FF;
 c1057f8:	e59f3090 	ldr	r3, [pc, #144]	; c105890 <port_init+0x170>
 c1057fc:	e59f2090 	ldr	r2, [pc, #144]	; c105894 <port_init+0x174>
 c105800:	e5832000 	str	r2, [r3]
    PUPG  = 0x30;
 c105804:	e59f308c 	ldr	r3, [pc, #140]	; c105898 <port_init+0x178>
 c105808:	e3a02030 	mov	r2, #48	; 0x30
 c10580c:	e5832000 	str	r2, [r3]

    SPUCR = 0x7;
 c105810:	e59f3084 	ldr	r3, [pc, #132]	; c10589c <port_init+0x17c>
 c105814:	e3a02007 	mov	r2, #7
 c105818:	e5832000 	str	r2, [r3]
    
    EXTINT = 0x22000220;
 c10581c:	e59f307c 	ldr	r3, [pc, #124]	; c1058a0 <port_init+0x180>
 c105820:	e59f207c 	ldr	r2, [pc, #124]	; c1058a4 <port_init+0x184>
 c105824:	e5832000 	str	r2, [r3]
}
 c105828:	e24bd00c 	sub	sp, fp, #12
 c10582c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105830:	e12fff1e 	bx	lr
 c105834:	01d20004 	.word	0x01d20004
 c105838:	01d20000 	.word	0x01d20000
 c10583c:	01d2000c 	.word	0x01d2000c
 c105840:	01d20008 	.word	0x01d20008
 c105844:	0000014f 	.word	0x0000014f
 c105848:	01d20014 	.word	0x01d20014
 c10584c:	01d20010 	.word	0x01d20010
 c105850:	5ff555ff 	.word	0x5ff555ff
 c105854:	01d20018 	.word	0x01d20018
 c105858:	000094fb 	.word	0x000094fb
 c10585c:	01d20020 	.word	0x01d20020
 c105860:	01d2001c 	.word	0x01d2001c
 c105864:	0000aaaa 	.word	0x0000aaaa
 c105868:	01d20024 	.word	0x01d20024
 c10586c:	01d2002c 	.word	0x01d2002c
 c105870:	01d20028 	.word	0x01d20028
 c105874:	000255a9 	.word	0x000255a9
 c105878:	01d20030 	.word	0x01d20030
 c10587c:	01d20038 	.word	0x01d20038
 c105880:	01d20034 	.word	0x01d20034
 c105884:	0000251a 	.word	0x0000251a
 c105888:	01d2003c 	.word	0x01d2003c
 c10588c:	01d20044 	.word	0x01d20044
 c105890:	01d20040 	.word	0x01d20040
 c105894:	0000f5ff 	.word	0x0000f5ff
 c105898:	01d20048 	.word	0x01d20048
 c10589c:	01d2004c 	.word	0x01d2004c
 c1058a0:	01d20050 	.word	0x01d20050
 c1058a4:	22000220 	.word	0x22000220

0c1058a8 <isr_SWI_dummy>:
void isr_KEYPAD_dummy( void )__attribute__ ((interrupt ("IRQ")));

void isr_USB_dummy( void )__attribute__ ((interrupt ("IRQ")));

void isr_SWI_dummy( void )
{
 c1058a8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1058ac:	e1a0c00d 	mov	ip, sp
 c1058b0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1058b4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy" );
 c1058b8:	e59f0010 	ldr	r0, [pc, #16]	; c1058d0 <isr_SWI_dummy+0x28>
 c1058bc:	eb000769 	bl	c107668 <uart0_puts>
	SEGS = 0x75;
 c1058c0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1058c4:	e3a02075 	mov	r2, #117	; 0x75
 c1058c8:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1058cc:	eafffffe 	b	c1058cc <isr_SWI_dummy+0x24>
 c1058d0:	0c108e20 	.word	0x0c108e20

0c1058d4 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void )
{
 c1058d4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1058d8:	e1a0c00d 	mov	ip, sp
 c1058dc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1058e0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy" );
 c1058e4:	e59f0010 	ldr	r0, [pc, #16]	; c1058fc <isr_UNDEF_dummy+0x28>
 c1058e8:	eb00075e 	bl	c107668 <uart0_puts>
	SEGS = 0x75;
 c1058ec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1058f0:	e3a02075 	mov	r2, #117	; 0x75
 c1058f4:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1058f8:	eafffffe 	b	c1058f8 <isr_UNDEF_dummy+0x24>
 c1058fc:	0c108e4c 	.word	0x0c108e4c

0c105900 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void )
{
 c105900:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105904:	e1a0c00d 	mov	ip, sp
 c105908:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10590c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy" );
 c105910:	e59f0010 	ldr	r0, [pc, #16]	; c105928 <isr_IRQ_dummy+0x28>
 c105914:	eb000753 	bl	c107668 <uart0_puts>
	SEGS = 0x75;
 c105918:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10591c:	e3a02075 	mov	r2, #117	; 0x75
 c105920:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c105924:	eafffffe 	b	c105924 <isr_IRQ_dummy+0x24>
 c105928:	0c108e7c 	.word	0x0c108e7c

0c10592c <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void )
{
 c10592c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105930:	e1a0c00d 	mov	ip, sp
 c105934:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105938:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy" );
 c10593c:	e59f0010 	ldr	r0, [pc, #16]	; c105954 <isr_FIQ_dummy+0x28>
 c105940:	eb000748 	bl	c107668 <uart0_puts>
	SEGS = 0x75;
 c105944:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105948:	e3a02075 	mov	r2, #117	; 0x75
 c10594c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105950:	eafffffe 	b	c105950 <isr_FIQ_dummy+0x24>
 c105954:	0c108ea8 	.word	0x0c108ea8

0c105958 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void )
{
 c105958:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10595c:	e1a0c00d 	mov	ip, sp
 c105960:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105964:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy" );
 c105968:	e59f0010 	ldr	r0, [pc, #16]	; c105980 <isr_PABORT_dummy+0x28>
 c10596c:	eb00073d 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105970:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105974:	e3a02075 	mov	r2, #117	; 0x75
 c105978:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10597c:	eafffffe 	b	c10597c <isr_PABORT_dummy+0x24>
 c105980:	0c108ed4 	.word	0x0c108ed4

0c105984 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void )
{
 c105984:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105988:	e1a0c00d 	mov	ip, sp
 c10598c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105990:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy" );
 c105994:	e59f0010 	ldr	r0, [pc, #16]	; c1059ac <isr_DABORT_dummy+0x28>
 c105998:	eb000732 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c10599c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1059a0:	e3a02075 	mov	r2, #117	; 0x75
 c1059a4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1059a8:	eafffffe 	b	c1059a8 <isr_DABORT_dummy+0x24>
 c1059ac:	0c108f04 	.word	0x0c108f04

0c1059b0 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void )
{
 c1059b0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1059b4:	e1a0c00d 	mov	ip, sp
 c1059b8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1059bc:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy" );
 c1059c0:	e59f0010 	ldr	r0, [pc, #16]	; c1059d8 <isr_ADC_dummy+0x28>
 c1059c4:	eb000727 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c1059c8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1059cc:	e3a02075 	mov	r2, #117	; 0x75
 c1059d0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c1059d4:	eafffffe 	b	c1059d4 <isr_ADC_dummy+0x24>
 c1059d8:	0c108f34 	.word	0x0c108f34

0c1059dc <isr_RTC_dummy>:
}

void isr_RTC_dummy( void )
{
 c1059dc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1059e0:	e1a0c00d 	mov	ip, sp
 c1059e4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1059e8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy" );
 c1059ec:	e59f0010 	ldr	r0, [pc, #16]	; c105a04 <isr_RTC_dummy+0x28>
 c1059f0:	eb00071c 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c1059f4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1059f8:	e3a02075 	mov	r2, #117	; 0x75
 c1059fc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105a00:	eafffffe 	b	c105a00 <isr_RTC_dummy+0x24>
 c105a04:	0c108f60 	.word	0x0c108f60

0c105a08 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void )
{
 c105a08:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105a0c:	e1a0c00d 	mov	ip, sp
 c105a10:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105a14:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy" );
 c105a18:	e59f0010 	ldr	r0, [pc, #16]	; c105a30 <isr_UTXD1_dummy+0x28>
 c105a1c:	eb000711 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105a20:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105a24:	e3a02075 	mov	r2, #117	; 0x75
 c105a28:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105a2c:	eafffffe 	b	c105a2c <isr_UTXD1_dummy+0x24>
 c105a30:	0c108f8c 	.word	0x0c108f8c

0c105a34 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void )
{
 c105a34:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105a38:	e1a0c00d 	mov	ip, sp
 c105a3c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105a40:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy" );
 c105a44:	e59f0010 	ldr	r0, [pc, #16]	; c105a5c <isr_UTXD0_dummy+0x28>
 c105a48:	eb000706 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105a4c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105a50:	e3a02075 	mov	r2, #117	; 0x75
 c105a54:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105a58:	eafffffe 	b	c105a58 <isr_UTXD0_dummy+0x24>
 c105a5c:	0c108fbc 	.word	0x0c108fbc

0c105a60 <isr_SIO_dummy>:
}

void isr_SIO_dummy( void )
{
 c105a60:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105a64:	e1a0c00d 	mov	ip, sp
 c105a68:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105a6c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy" );
 c105a70:	e59f0010 	ldr	r0, [pc, #16]	; c105a88 <isr_SIO_dummy+0x28>
 c105a74:	eb0006fb 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105a78:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105a7c:	e3a02075 	mov	r2, #117	; 0x75
 c105a80:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105a84:	eafffffe 	b	c105a84 <isr_SIO_dummy+0x24>
 c105a88:	0c108fec 	.word	0x0c108fec

0c105a8c <isr_IIC_dummy>:
}

void isr_IIC_dummy( void )
{
 c105a8c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105a90:	e1a0c00d 	mov	ip, sp
 c105a94:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105a98:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy" );
 c105a9c:	e59f0010 	ldr	r0, [pc, #16]	; c105ab4 <isr_IIC_dummy+0x28>
 c105aa0:	eb0006f0 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105aa4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105aa8:	e3a02075 	mov	r2, #117	; 0x75
 c105aac:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105ab0:	eafffffe 	b	c105ab0 <isr_IIC_dummy+0x24>
 c105ab4:	0c109018 	.word	0x0c109018

0c105ab8 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void )
{
 c105ab8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105abc:	e1a0c00d 	mov	ip, sp
 c105ac0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105ac4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy" );
 c105ac8:	e59f0010 	ldr	r0, [pc, #16]	; c105ae0 <isr_URXD1_dummy+0x28>
 c105acc:	eb0006e5 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105ad0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105ad4:	e3a02075 	mov	r2, #117	; 0x75
 c105ad8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105adc:	eafffffe 	b	c105adc <isr_URXD1_dummy+0x24>
 c105ae0:	0c109044 	.word	0x0c109044

0c105ae4 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void )
{
 c105ae4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105ae8:	e1a0c00d 	mov	ip, sp
 c105aec:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105af0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy" );
 c105af4:	e59f0010 	ldr	r0, [pc, #16]	; c105b0c <isr_URXD0_dummy+0x28>
 c105af8:	eb0006da 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105afc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105b00:	e3a02075 	mov	r2, #117	; 0x75
 c105b04:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105b08:	eafffffe 	b	c105b08 <isr_URXD0_dummy+0x24>
 c105b0c:	0c109074 	.word	0x0c109074

0c105b10 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void )
{
 c105b10:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105b14:	e1a0c00d 	mov	ip, sp
 c105b18:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105b1c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy" );
 c105b20:	e59f0010 	ldr	r0, [pc, #16]	; c105b38 <isr_TIMER5_dummy+0x28>
 c105b24:	eb0006cf 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105b28:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105b2c:	e3a02075 	mov	r2, #117	; 0x75
 c105b30:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105b34:	eafffffe 	b	c105b34 <isr_TIMER5_dummy+0x24>
 c105b38:	0c1090a4 	.word	0x0c1090a4

0c105b3c <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void )
{
 c105b3c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105b40:	e1a0c00d 	mov	ip, sp
 c105b44:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105b48:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy" );
 c105b4c:	e59f0010 	ldr	r0, [pc, #16]	; c105b64 <isr_TIMER4_dummy+0x28>
 c105b50:	eb0006c4 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105b54:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105b58:	e3a02075 	mov	r2, #117	; 0x75
 c105b5c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105b60:	eafffffe 	b	c105b60 <isr_TIMER4_dummy+0x24>
 c105b64:	0c1090d4 	.word	0x0c1090d4

0c105b68 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void )
{
 c105b68:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105b6c:	e1a0c00d 	mov	ip, sp
 c105b70:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105b74:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy" );
 c105b78:	e59f0010 	ldr	r0, [pc, #16]	; c105b90 <isr_TIMER3_dummy+0x28>
 c105b7c:	eb0006b9 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105b80:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105b84:	e3a02075 	mov	r2, #117	; 0x75
 c105b88:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105b8c:	eafffffe 	b	c105b8c <isr_TIMER3_dummy+0x24>
 c105b90:	0c109104 	.word	0x0c109104

0c105b94 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void )
{
 c105b94:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105b98:	e1a0c00d 	mov	ip, sp
 c105b9c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105ba0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy" );
 c105ba4:	e59f0010 	ldr	r0, [pc, #16]	; c105bbc <isr_TIMER2_dummy+0x28>
 c105ba8:	eb0006ae 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105bac:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105bb0:	e3a02075 	mov	r2, #117	; 0x75
 c105bb4:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105bb8:	eafffffe 	b	c105bb8 <isr_TIMER2_dummy+0x24>
 c105bbc:	0c109134 	.word	0x0c109134

0c105bc0 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void )
{
 c105bc0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105bc4:	e1a0c00d 	mov	ip, sp
 c105bc8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105bcc:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy" );
 c105bd0:	e59f0010 	ldr	r0, [pc, #16]	; c105be8 <isr_TIMER1_dummy+0x28>
 c105bd4:	eb0006a3 	bl	c107668 <uart0_puts>
	SEGS = 0x75;
 c105bd8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105bdc:	e3a02075 	mov	r2, #117	; 0x75
 c105be0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105be4:	eafffffe 	b	c105be4 <isr_TIMER1_dummy+0x24>
 c105be8:	0c109164 	.word	0x0c109164

0c105bec <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void )
{
 c105bec:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105bf0:	e1a0c00d 	mov	ip, sp
 c105bf4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105bf8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy" );
 c105bfc:	e59f0010 	ldr	r0, [pc, #16]	; c105c14 <isr_TIMER0_dummy+0x28>
 c105c00:	eb000698 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105c04:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105c08:	e3a02075 	mov	r2, #117	; 0x75
 c105c0c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105c10:	eafffffe 	b	c105c10 <isr_TIMER0_dummy+0x24>
 c105c14:	0c109194 	.word	0x0c109194

0c105c18 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void )
{
 c105c18:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105c1c:	e1a0c00d 	mov	ip, sp
 c105c20:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105c24:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy" );
 c105c28:	e59f0010 	ldr	r0, [pc, #16]	; c105c40 <isr_UERR01_dummy+0x28>
 c105c2c:	eb00068d 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105c30:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105c34:	e3a02075 	mov	r2, #117	; 0x75
 c105c38:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105c3c:	eafffffe 	b	c105c3c <isr_UERR01_dummy+0x24>
 c105c40:	0c1091c4 	.word	0x0c1091c4

0c105c44 <isr_WDT_dummy>:
}

void isr_WDT_dummy( void )
{
 c105c44:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105c48:	e1a0c00d 	mov	ip, sp
 c105c4c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105c50:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy" );
 c105c54:	e59f0010 	ldr	r0, [pc, #16]	; c105c6c <isr_WDT_dummy+0x28>
 c105c58:	eb000682 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105c5c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105c60:	e3a02075 	mov	r2, #117	; 0x75
 c105c64:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c105c68:	eafffffe 	b	c105c68 <isr_WDT_dummy+0x24>
 c105c6c:	0c1091f4 	.word	0x0c1091f4

0c105c70 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void )
{
 c105c70:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105c74:	e1a0c00d 	mov	ip, sp
 c105c78:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105c7c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy" );
 c105c80:	e59f0010 	ldr	r0, [pc, #16]	; c105c98 <isr_BDMA1_dummy+0x28>
 c105c84:	eb000677 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105c88:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105c8c:	e3a02075 	mov	r2, #117	; 0x75
 c105c90:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105c94:	eafffffe 	b	c105c94 <isr_BDMA1_dummy+0x24>
 c105c98:	0c109220 	.word	0x0c109220

0c105c9c <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void )
{
 c105c9c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105ca0:	e1a0c00d 	mov	ip, sp
 c105ca4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105ca8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy" );
 c105cac:	e59f0010 	ldr	r0, [pc, #16]	; c105cc4 <isr_BDMA0_dummy+0x28>
 c105cb0:	eb00066c 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105cb4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105cb8:	e3a02075 	mov	r2, #117	; 0x75
 c105cbc:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105cc0:	eafffffe 	b	c105cc0 <isr_BDMA0_dummy+0x24>
 c105cc4:	0c109250 	.word	0x0c109250

0c105cc8 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void )
{
 c105cc8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105ccc:	e1a0c00d 	mov	ip, sp
 c105cd0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105cd4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy" );
 c105cd8:	e59f0010 	ldr	r0, [pc, #16]	; c105cf0 <isr_ZDMA1_dummy+0x28>
 c105cdc:	eb000661 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105ce0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105ce4:	e3a02075 	mov	r2, #117	; 0x75
 c105ce8:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105cec:	eafffffe 	b	c105cec <isr_ZDMA1_dummy+0x24>
 c105cf0:	0c109280 	.word	0x0c109280

0c105cf4 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void )
{
 c105cf4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105cf8:	e1a0c00d 	mov	ip, sp
 c105cfc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105d00:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy" );
 c105d04:	e59f0010 	ldr	r0, [pc, #16]	; c105d1c <isr_ZDMA0_dummy+0x28>
 c105d08:	eb000656 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105d0c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105d10:	e3a02075 	mov	r2, #117	; 0x75
 c105d14:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105d18:	eafffffe 	b	c105d18 <isr_ZDMA0_dummy+0x24>
 c105d1c:	0c1092b0 	.word	0x0c1092b0

0c105d20 <isr_TICK_dummy>:
}

void isr_TICK_dummy( void )
{
 c105d20:	e1a0c00d 	mov	ip, sp
 c105d24:	e92dd800 	push	{fp, ip, lr, pc}
 c105d28:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c105d2c:	e59f0010 	ldr	r0, [pc, #16]	; c105d44 <isr_TICK_dummy+0x24>
 c105d30:	eb00064c 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105d34:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105d38:	e3a02075 	mov	r2, #117	; 0x75
 c105d3c:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105d40:	eafffffe 	b	c105d40 <isr_TICK_dummy+0x20>
 c105d44:	0c1092e0 	.word	0x0c1092e0

0c105d48 <isr_PB_dummy>:
}

void isr_PB_dummy( void )
{
 c105d48:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105d4c:	e1a0c00d 	mov	ip, sp
 c105d50:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105d54:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PB_dummy" );
 c105d58:	e59f0010 	ldr	r0, [pc, #16]	; c105d70 <isr_PB_dummy+0x28>
 c105d5c:	eb000641 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105d60:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105d64:	e3a02075 	mov	r2, #117	; 0x75
 c105d68:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105d6c:	eafffffe 	b	c105d6c <isr_PB_dummy+0x24>
 c105d70:	0c109310 	.word	0x0c109310

0c105d74 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void )
{
 c105d74:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105d78:	e1a0c00d 	mov	ip, sp
 c105d7c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105d80:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy" );
 c105d84:	e59f0010 	ldr	r0, [pc, #16]	; c105d9c <isr_ETHERNET_dummy+0x28>
 c105d88:	eb000636 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105d8c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105d90:	e3a02075 	mov	r2, #117	; 0x75
 c105d94:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105d98:	eafffffe 	b	c105d98 <isr_ETHERNET_dummy+0x24>
 c105d9c:	0c10933c 	.word	0x0c10933c

0c105da0 <isr_TS_dummy>:
}

void isr_TS_dummy( void )
{
 c105da0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105da4:	e1a0c00d 	mov	ip, sp
 c105da8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105dac:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TS_dummy" );
 c105db0:	e59f0010 	ldr	r0, [pc, #16]	; c105dc8 <isr_TS_dummy+0x28>
 c105db4:	eb00062b 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105db8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105dbc:	e3a02075 	mov	r2, #117	; 0x75
 c105dc0:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105dc4:	eafffffe 	b	c105dc4 <isr_TS_dummy+0x24>
 c105dc8:	0c109370 	.word	0x0c109370

0c105dcc <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void )
{
 c105dcc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105dd0:	e1a0c00d 	mov	ip, sp
 c105dd4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105dd8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy" );
 c105ddc:	e59f0010 	ldr	r0, [pc, #16]	; c105df4 <isr_KEYPAD_dummy+0x28>
 c105de0:	eb000620 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105de4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105de8:	e3a02075 	mov	r2, #117	; 0x75
 c105dec:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105df0:	eafffffe 	b	c105df0 <isr_KEYPAD_dummy+0x24>
 c105df4:	0c10939c 	.word	0x0c10939c

0c105df8 <isr_USB_dummy>:
}

void isr_USB_dummy( void )
{
 c105df8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c105dfc:	e1a0c00d 	mov	ip, sp
 c105e00:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c105e04:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_USB_dummy" );
 c105e08:	e59f0010 	ldr	r0, [pc, #16]	; c105e20 <isr_USB_dummy+0x28>
 c105e0c:	eb000615 	bl	c107668 <uart0_puts>
    SEGS = 0x75;
 c105e10:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c105e14:	e3a02075 	mov	r2, #117	; 0x75
 c105e18:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c105e1c:	eafffffe 	b	c105e1c <isr_USB_dummy+0x24>
 c105e20:	0c1093cc 	.word	0x0c1093cc

0c105e24 <install_dummy_isr>:
}


static inline void install_dummy_isr( void )
{
 c105e24:	e1a0c00d 	mov	ip, sp
 c105e28:	e92dd800 	push	{fp, ip, lr, pc}
 c105e2c:	e24cb004 	sub	fp, ip, #4

    pISR_TICK = (uint32) isr_TICK_dummy;
 c105e30:	e59f3184 	ldr	r3, [pc, #388]	; c105fbc <install_dummy_isr+0x198>
 c105e34:	e59f2184 	ldr	r2, [pc, #388]	; c105fc0 <install_dummy_isr+0x19c>
 c105e38:	e5832000 	str	r2, [r3]
    pISR_SWI = (uint32) isr_SWI_dummy;
 c105e3c:	e59f3180 	ldr	r3, [pc, #384]	; c105fc4 <install_dummy_isr+0x1a0>
 c105e40:	e59f2180 	ldr	r2, [pc, #384]	; c105fc8 <install_dummy_isr+0x1a4>
 c105e44:	e5832000 	str	r2, [r3]
    pISR_UNDEF = (uint32) isr_UNDEF_dummy;
 c105e48:	e59f317c 	ldr	r3, [pc, #380]	; c105fcc <install_dummy_isr+0x1a8>
 c105e4c:	e59f217c 	ldr	r2, [pc, #380]	; c105fd0 <install_dummy_isr+0x1ac>
 c105e50:	e5832000 	str	r2, [r3]
    pISR_IRQ = (uint32) isr_IRQ_dummy;
 c105e54:	e59f3178 	ldr	r3, [pc, #376]	; c105fd4 <install_dummy_isr+0x1b0>
 c105e58:	e59f2178 	ldr	r2, [pc, #376]	; c105fd8 <install_dummy_isr+0x1b4>
 c105e5c:	e5832000 	str	r2, [r3]
    pISR_FIQ = (uint32) isr_FIQ_dummy;
 c105e60:	e59f3174 	ldr	r3, [pc, #372]	; c105fdc <install_dummy_isr+0x1b8>
 c105e64:	e59f2174 	ldr	r2, [pc, #372]	; c105fe0 <install_dummy_isr+0x1bc>
 c105e68:	e5832000 	str	r2, [r3]
    pISR_PABORT = (uint32) isr_PABORT_dummy;
 c105e6c:	e59f3170 	ldr	r3, [pc, #368]	; c105fe4 <install_dummy_isr+0x1c0>
 c105e70:	e59f2170 	ldr	r2, [pc, #368]	; c105fe8 <install_dummy_isr+0x1c4>
 c105e74:	e5832000 	str	r2, [r3]
    pISR_DABORT = (uint32) isr_DABORT_dummy;
 c105e78:	e59f316c 	ldr	r3, [pc, #364]	; c105fec <install_dummy_isr+0x1c8>
 c105e7c:	e59f216c 	ldr	r2, [pc, #364]	; c105ff0 <install_dummy_isr+0x1cc>
 c105e80:	e5832000 	str	r2, [r3]
    pISR_ADC = (uint32) isr_ADC_dummy;
 c105e84:	e59f3168 	ldr	r3, [pc, #360]	; c105ff4 <install_dummy_isr+0x1d0>
 c105e88:	e59f2168 	ldr	r2, [pc, #360]	; c105ff8 <install_dummy_isr+0x1d4>
 c105e8c:	e5832000 	str	r2, [r3]
    pISR_RTC = (uint32) isr_RTC_dummy;
 c105e90:	e59f3164 	ldr	r3, [pc, #356]	; c105ffc <install_dummy_isr+0x1d8>
 c105e94:	e59f2164 	ldr	r2, [pc, #356]	; c106000 <install_dummy_isr+0x1dc>
 c105e98:	e5832000 	str	r2, [r3]
    pISR_UTXD1 = (uint32) isr_UTXD1_dummy;
 c105e9c:	e59f3160 	ldr	r3, [pc, #352]	; c106004 <install_dummy_isr+0x1e0>
 c105ea0:	e59f2160 	ldr	r2, [pc, #352]	; c106008 <install_dummy_isr+0x1e4>
 c105ea4:	e5832000 	str	r2, [r3]
    pISR_UTXD0 = (uint32) isr_UTXD0_dummy;
 c105ea8:	e59f315c 	ldr	r3, [pc, #348]	; c10600c <install_dummy_isr+0x1e8>
 c105eac:	e59f215c 	ldr	r2, [pc, #348]	; c106010 <install_dummy_isr+0x1ec>
 c105eb0:	e5832000 	str	r2, [r3]
    pISR_SIO = (uint32) isr_SIO_dummy;
 c105eb4:	e59f3158 	ldr	r3, [pc, #344]	; c106014 <install_dummy_isr+0x1f0>
 c105eb8:	e59f2158 	ldr	r2, [pc, #344]	; c106018 <install_dummy_isr+0x1f4>
 c105ebc:	e5832000 	str	r2, [r3]
    pISR_IIC = (uint32) isr_IIC_dummy;
 c105ec0:	e59f3154 	ldr	r3, [pc, #340]	; c10601c <install_dummy_isr+0x1f8>
 c105ec4:	e59f2154 	ldr	r2, [pc, #340]	; c106020 <install_dummy_isr+0x1fc>
 c105ec8:	e5832000 	str	r2, [r3]
    pISR_URXD1 = (uint32) isr_URXD1_dummy;
 c105ecc:	e59f3150 	ldr	r3, [pc, #336]	; c106024 <install_dummy_isr+0x200>
 c105ed0:	e59f2150 	ldr	r2, [pc, #336]	; c106028 <install_dummy_isr+0x204>
 c105ed4:	e5832000 	str	r2, [r3]
    pISR_URXD0 = (uint32) isr_URXD0_dummy;
 c105ed8:	e59f314c 	ldr	r3, [pc, #332]	; c10602c <install_dummy_isr+0x208>
 c105edc:	e59f214c 	ldr	r2, [pc, #332]	; c106030 <install_dummy_isr+0x20c>
 c105ee0:	e5832000 	str	r2, [r3]
    pISR_TIMER5 = (uint32) isr_TIMER5_dummy;
 c105ee4:	e59f3148 	ldr	r3, [pc, #328]	; c106034 <install_dummy_isr+0x210>
 c105ee8:	e59f2148 	ldr	r2, [pc, #328]	; c106038 <install_dummy_isr+0x214>
 c105eec:	e5832000 	str	r2, [r3]
    pISR_TIMER4 = (uint32) isr_TIMER4_dummy;
 c105ef0:	e59f3144 	ldr	r3, [pc, #324]	; c10603c <install_dummy_isr+0x218>
 c105ef4:	e59f2144 	ldr	r2, [pc, #324]	; c106040 <install_dummy_isr+0x21c>
 c105ef8:	e5832000 	str	r2, [r3]
    pISR_TIMER3 = (uint32) isr_TIMER3_dummy;
 c105efc:	e59f3140 	ldr	r3, [pc, #320]	; c106044 <install_dummy_isr+0x220>
 c105f00:	e59f2140 	ldr	r2, [pc, #320]	; c106048 <install_dummy_isr+0x224>
 c105f04:	e5832000 	str	r2, [r3]
    pISR_TIMER2 = (uint32) isr_TIMER2_dummy;
 c105f08:	e59f313c 	ldr	r3, [pc, #316]	; c10604c <install_dummy_isr+0x228>
 c105f0c:	e59f213c 	ldr	r2, [pc, #316]	; c106050 <install_dummy_isr+0x22c>
 c105f10:	e5832000 	str	r2, [r3]
    pISR_TIMER1 = (uint32) isr_TIMER1_dummy;
 c105f14:	e59f3138 	ldr	r3, [pc, #312]	; c106054 <install_dummy_isr+0x230>
 c105f18:	e59f2138 	ldr	r2, [pc, #312]	; c106058 <install_dummy_isr+0x234>
 c105f1c:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c105f20:	e59f3134 	ldr	r3, [pc, #308]	; c10605c <install_dummy_isr+0x238>
 c105f24:	e59f2134 	ldr	r2, [pc, #308]	; c106060 <install_dummy_isr+0x23c>
 c105f28:	e5832000 	str	r2, [r3]
    pISR_UERR01 = (uint32) isr_UERR01_dummy;
 c105f2c:	e59f3130 	ldr	r3, [pc, #304]	; c106064 <install_dummy_isr+0x240>
 c105f30:	e59f2130 	ldr	r2, [pc, #304]	; c106068 <install_dummy_isr+0x244>
 c105f34:	e5832000 	str	r2, [r3]
    pISR_WDT = (uint32) isr_WDT_dummy;
 c105f38:	e59f312c 	ldr	r3, [pc, #300]	; c10606c <install_dummy_isr+0x248>
 c105f3c:	e59f212c 	ldr	r2, [pc, #300]	; c106070 <install_dummy_isr+0x24c>
 c105f40:	e5832000 	str	r2, [r3]
    pISR_BDMA1 = (uint32) isr_BDMA1_dummy;
 c105f44:	e59f3128 	ldr	r3, [pc, #296]	; c106074 <install_dummy_isr+0x250>
 c105f48:	e59f2128 	ldr	r2, [pc, #296]	; c106078 <install_dummy_isr+0x254>
 c105f4c:	e5832000 	str	r2, [r3]
    pISR_BDMA0 = (uint32) isr_BDMA0_dummy;
 c105f50:	e59f3124 	ldr	r3, [pc, #292]	; c10607c <install_dummy_isr+0x258>
 c105f54:	e59f2124 	ldr	r2, [pc, #292]	; c106080 <install_dummy_isr+0x25c>
 c105f58:	e5832000 	str	r2, [r3]
    pISR_ZDMA1 = (uint32) isr_ZDMA1_dummy;
 c105f5c:	e59f3120 	ldr	r3, [pc, #288]	; c106084 <install_dummy_isr+0x260>
 c105f60:	e59f2120 	ldr	r2, [pc, #288]	; c106088 <install_dummy_isr+0x264>
 c105f64:	e5832000 	str	r2, [r3]
    pISR_ZDMA0 = (uint32) isr_ZDMA0_dummy;
 c105f68:	e59f311c 	ldr	r3, [pc, #284]	; c10608c <install_dummy_isr+0x268>
 c105f6c:	e59f211c 	ldr	r2, [pc, #284]	; c106090 <install_dummy_isr+0x26c>
 c105f70:	e5832000 	str	r2, [r3]
    pISR_PB = (uint32) isr_PB_dummy;
 c105f74:	e59f3118 	ldr	r3, [pc, #280]	; c106094 <install_dummy_isr+0x270>
 c105f78:	e59f2118 	ldr	r2, [pc, #280]	; c106098 <install_dummy_isr+0x274>
 c105f7c:	e5832000 	str	r2, [r3]
    pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c105f80:	e59f3114 	ldr	r3, [pc, #276]	; c10609c <install_dummy_isr+0x278>
 c105f84:	e59f2114 	ldr	r2, [pc, #276]	; c1060a0 <install_dummy_isr+0x27c>
 c105f88:	e5832000 	str	r2, [r3]
    pISR_TS = (uint32) isr_TS_dummy;
 c105f8c:	e59f3110 	ldr	r3, [pc, #272]	; c1060a4 <install_dummy_isr+0x280>
 c105f90:	e59f2110 	ldr	r2, [pc, #272]	; c1060a8 <install_dummy_isr+0x284>
 c105f94:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c105f98:	e59f310c 	ldr	r3, [pc, #268]	; c1060ac <install_dummy_isr+0x288>
 c105f9c:	e59f210c 	ldr	r2, [pc, #268]	; c1060b0 <install_dummy_isr+0x28c>
 c105fa0:	e5832000 	str	r2, [r3]
    pISR_USB = (uint32) isr_USB_dummy;
 c105fa4:	e59f3108 	ldr	r3, [pc, #264]	; c1060b4 <install_dummy_isr+0x290>
 c105fa8:	e59f2108 	ldr	r2, [pc, #264]	; c1060b8 <install_dummy_isr+0x294>
 c105fac:	e5832000 	str	r2, [r3]
}
 c105fb0:	e24bd00c 	sub	sp, fp, #12
 c105fb4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105fb8:	e12fff1e 	bx	lr
 c105fbc:	0c7fff70 	.word	0x0c7fff70
 c105fc0:	0c105d20 	.word	0x0c105d20
 c105fc4:	0c7fff08 	.word	0x0c7fff08
 c105fc8:	0c1058a8 	.word	0x0c1058a8
 c105fcc:	0c7fff04 	.word	0x0c7fff04
 c105fd0:	0c1058d4 	.word	0x0c1058d4
 c105fd4:	0c7fff18 	.word	0x0c7fff18
 c105fd8:	0c105900 	.word	0x0c105900
 c105fdc:	0c7fff1c 	.word	0x0c7fff1c
 c105fe0:	0c10592c 	.word	0x0c10592c
 c105fe4:	0c7fff0c 	.word	0x0c7fff0c
 c105fe8:	0c105958 	.word	0x0c105958
 c105fec:	0c7fff10 	.word	0x0c7fff10
 c105ff0:	0c105984 	.word	0x0c105984
 c105ff4:	0c7fff20 	.word	0x0c7fff20
 c105ff8:	0c1059b0 	.word	0x0c1059b0
 c105ffc:	0c7fff24 	.word	0x0c7fff24
 c106000:	0c1059dc 	.word	0x0c1059dc
 c106004:	0c7fff28 	.word	0x0c7fff28
 c106008:	0c105a08 	.word	0x0c105a08
 c10600c:	0c7fff2c 	.word	0x0c7fff2c
 c106010:	0c105a34 	.word	0x0c105a34
 c106014:	0c7fff30 	.word	0x0c7fff30
 c106018:	0c105a60 	.word	0x0c105a60
 c10601c:	0c7fff34 	.word	0x0c7fff34
 c106020:	0c105a8c 	.word	0x0c105a8c
 c106024:	0c7fff38 	.word	0x0c7fff38
 c106028:	0c105ab8 	.word	0x0c105ab8
 c10602c:	0c7fff3c 	.word	0x0c7fff3c
 c106030:	0c105ae4 	.word	0x0c105ae4
 c106034:	0c7fff40 	.word	0x0c7fff40
 c106038:	0c105b10 	.word	0x0c105b10
 c10603c:	0c7fff44 	.word	0x0c7fff44
 c106040:	0c105b3c 	.word	0x0c105b3c
 c106044:	0c7fff48 	.word	0x0c7fff48
 c106048:	0c105b68 	.word	0x0c105b68
 c10604c:	0c7fff4c 	.word	0x0c7fff4c
 c106050:	0c105b94 	.word	0x0c105b94
 c106054:	0c7fff50 	.word	0x0c7fff50
 c106058:	0c105bc0 	.word	0x0c105bc0
 c10605c:	0c7fff54 	.word	0x0c7fff54
 c106060:	0c105bec 	.word	0x0c105bec
 c106064:	0c7fff58 	.word	0x0c7fff58
 c106068:	0c105c18 	.word	0x0c105c18
 c10606c:	0c7fff5c 	.word	0x0c7fff5c
 c106070:	0c105c44 	.word	0x0c105c44
 c106074:	0c7fff60 	.word	0x0c7fff60
 c106078:	0c105c70 	.word	0x0c105c70
 c10607c:	0c7fff64 	.word	0x0c7fff64
 c106080:	0c105c9c 	.word	0x0c105c9c
 c106084:	0c7fff68 	.word	0x0c7fff68
 c106088:	0c105cc8 	.word	0x0c105cc8
 c10608c:	0c7fff6c 	.word	0x0c7fff6c
 c106090:	0c105cf4 	.word	0x0c105cf4
 c106094:	0c7fff74 	.word	0x0c7fff74
 c106098:	0c105d48 	.word	0x0c105d48
 c10609c:	0c7fff78 	.word	0x0c7fff78
 c1060a0:	0c105d74 	.word	0x0c105d74
 c1060a4:	0c7fff7c 	.word	0x0c7fff7c
 c1060a8:	0c105da0 	.word	0x0c105da0
 c1060ac:	0c7fff80 	.word	0x0c7fff80
 c1060b0:	0c105dcc 	.word	0x0c105dcc
 c1060b4:	0c7fff84 	.word	0x0c7fff84
 c1060b8:	0c105df8 	.word	0x0c105df8

0c1060bc <show_sys_info>:


static inline void show_sys_info( void )
{
 c1060bc:	e1a0c00d 	mov	ip, sp
 c1060c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1060c4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "Autoria: Guillermo Lemonnier y Lucas  .\n fundadores del equipo cigarro. \n Informatica UCM 11/10/2024" );
 c1060c8:	e59f000c 	ldr	r0, [pc, #12]	; c1060dc <show_sys_info+0x20>
 c1060cc:	eb000565 	bl	c107668 <uart0_puts>
}
 c1060d0:	e24bd00c 	sub	sp, fp, #12
 c1060d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1060d8:	e12fff1e 	bx	lr
 c1060dc:	0c1093f8 	.word	0x0c1093f8

0c1060e0 <sleep>:

inline void sleep( void )
{
 c1060e0:	e1a0c00d 	mov	ip, sp
 c1060e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1060e8:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c1060ec:	e59f3018 	ldr	r3, [pc, #24]	; c10610c <sleep+0x2c>
 c1060f0:	e59f2014 	ldr	r2, [pc, #20]	; c10610c <sleep+0x2c>
 c1060f4:	e5922000 	ldr	r2, [r2]
 c1060f8:	e3822004 	orr	r2, r2, #4
 c1060fc:	e5832000 	str	r2, [r3]
}
 c106100:	e24bd00c 	sub	sp, fp, #12
 c106104:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106108:	e12fff1e 	bx	lr
 c10610c:	01d80004 	.word	0x01d80004

0c106110 <sys_recovery>:

static void sys_recovery( void ) // NO TOCAR
{
 c106110:	e1a0c00d 	mov	ip, sp
 c106114:	e92dd800 	push	{fp, ip, lr, pc}
 c106118:	e24cb004 	sub	fp, ip, #4
 c10611c:	e24dd018 	sub	sp, sp, #24
    uint8 mode;
    uint32 sp, fp;
    uint32 *addrSrc, *addrDst;
    uint32 diffStacks;
    
    asm volatile ( "str sp, %0" : "=m" (sp) : : );    // lee el puntero a la cima de la pila de excepción (SP) 
 c106120:	e50bd01c 	str	sp, [fp, #-28]	; 0xffffffe4
    asm volatile ( "str fp, %0" : "=m" (fp) : : );    // lee el puntero al marco de activación (FP) de sys_recovery() en la pila de excepción
 c106124:	e50bb020 	str	fp, [fp, #-32]	; 0xffffffe0
    
    GET_OPMODE( &mode );    // lee el modo de ejecución del procesador
 c106128:	e10f0000 	mrs	r0, CPSR
 c10612c:	e200001f 	and	r0, r0, #31
 c106130:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
    switch( mode )
 c106134:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c106138:	e2433011 	sub	r3, r3, #17
 c10613c:	e353000a 	cmp	r3, #10
 c106140:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c106144:	ea00001e 	b	c1061c4 <sys_recovery+0xb4>
 c106148:	0c106188 	.word	0x0c106188
 c10614c:	0c106174 	.word	0x0c106174
 c106150:	0c1061c4 	.word	0x0c1061c4
 c106154:	0c1061c4 	.word	0x0c1061c4
 c106158:	0c1061c4 	.word	0x0c1061c4
 c10615c:	0c1061c4 	.word	0x0c1061c4
 c106160:	0c10619c 	.word	0x0c10619c
 c106164:	0c1061c4 	.word	0x0c1061c4
 c106168:	0c1061c4 	.word	0x0c1061c4
 c10616c:	0c1061c4 	.word	0x0c1061c4
 c106170:	0c1061b0 	.word	0x0c1061b0
    {
        case IRQMODE:
            diffStacks = IRQSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila IRQ y la SVC
 c106174:	e3a03c03 	mov	r3, #768	; 0x300
 c106178:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)IRQSTACK;         // base de la pila IRQ
 c10617c:	e59f3198 	ldr	r3, [pc, #408]	; c10631c <sys_recovery+0x20c>
 c106180:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c106184:	ea00000f 	b	c1061c8 <sys_recovery+0xb8>
        case FIQMODE:
            diffStacks = FIQSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila FIQ y la SVC
 c106188:	e3a03b01 	mov	r3, #1024	; 0x400
 c10618c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)FIQSTACK;         // base de la pila FIQ
 c106190:	e59f3188 	ldr	r3, [pc, #392]	; c106320 <sys_recovery+0x210>
 c106194:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c106198:	ea00000a 	b	c1061c8 <sys_recovery+0xb8>
        case ABTMODE:
            diffStacks = ABTSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila ABT y la SVC
 c10619c:	e3a03c02 	mov	r3, #512	; 0x200
 c1061a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)ABTSTACK;         // base de la pila ABT
 c1061a4:	e59f3178 	ldr	r3, [pc, #376]	; c106324 <sys_recovery+0x214>
 c1061a8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c1061ac:	ea000005 	b	c1061c8 <sys_recovery+0xb8>
        case UNDMODE:
            diffStacks = UNDSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila UND y la SVC
 c1061b0:	e3a03c01 	mov	r3, #256	; 0x100
 c1061b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)UNDSTACK;         // base de la pila UND
 c1061b8:	e59f3168 	ldr	r3, [pc, #360]	; c106328 <sys_recovery+0x218>
 c1061bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;         
 c1061c0:	ea000000 	b	c1061c8 <sys_recovery+0xb8>
        case USRMODE:
            // Habría que hacer algo análogo a lo anterior y además para volver a modo SVC dado que no es válido SET_OPMODE( SVCMODE ), es necesario esto:
            // pISR_SWI = (uint32) isr_SWI;
            // SWI( 0 );  
        default:
            while( 1 );                           // aquí no debería llegarse
 c1061c4:	eafffffe 	b	c1061c4 <sys_recovery+0xb4>
            break;
    }    
        
    asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );    // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento     
 c1061c8:	e51bd024 	ldr	sp, [fp, #-36]	; 0xffffffdc
        
    for( addrDst = (uint32 *)SVCSTACK; addrSrc > (uint32 *)sp; )    // copia el contenido completo de la pila excepción en la pila SVC
 c1061cc:	e59f3158 	ldr	r3, [pc, #344]	; c10632c <sys_recovery+0x21c>
 c1061d0:	e50b3010 	str	r3, [fp, #-16]
 c1061d4:	ea000009 	b	c106200 <sys_recovery+0xf0>
        *(--addrDst) = *(--addrSrc);
 c1061d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1061dc:	e2433004 	sub	r3, r3, #4
 c1061e0:	e50b3010 	str	r3, [fp, #-16]
 c1061e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1061e8:	e2433004 	sub	r3, r3, #4
 c1061ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
 c1061f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1061f4:	e5932000 	ldr	r2, [r3]
 c1061f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1061fc:	e5832000 	str	r2, [r3]
            break;
    }    
        
    asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );    // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento     
        
    for( addrDst = (uint32 *)SVCSTACK; addrSrc > (uint32 *)sp; )    // copia el contenido completo de la pila excepción en la pila SVC
 c106200:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c106204:	e1a02003 	mov	r2, r3
 c106208:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10620c:	e1520003 	cmp	r2, r3
 c106210:	3afffff0 	bcc	c1061d8 <sys_recovery+0xc8>
        *(--addrDst) = *(--addrSrc);

    addrDst = (uint32 *)(fp-diffStacks);   // carga el puntero al marco de activación de sys_recovery() en la pila SVC
 c106214:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c106218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10621c:	e0633002 	rsb	r3, r3, r2
 c106220:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el PC apilado
 c106224:	e51b3010 	ldr	r3, [fp, #-16]
 c106228:	e2433004 	sub	r3, r3, #4
 c10622c:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el LR apilado
 c106230:	e51b3010 	ldr	r3, [fp, #-16]
 c106234:	e2433004 	sub	r3, r3, #4
 c106238:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza SP apilado para que apunte a la pila SVC
 c10623c:	e51b3010 	ldr	r3, [fp, #-16]
 c106240:	e5932000 	ldr	r2, [r3]
 c106244:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106248:	e0632002 	rsb	r2, r3, r2
 c10624c:	e51b3010 	ldr	r3, [fp, #-16]
 c106250:	e5832000 	str	r2, [r3]
    addrDst--;                             // salta el SP apilado
 c106254:	e51b3010 	ldr	r3, [fp, #-16]
 c106258:	e2433004 	sub	r3, r3, #4
 c10625c:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza el FP apilado para que apunte a la pila SVC
 c106260:	e51b3010 	ldr	r3, [fp, #-16]
 c106264:	e5932000 	ldr	r2, [r3]
 c106268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10626c:	e0632002 	rsb	r2, r3, r2
 c106270:	e51b3010 	ldr	r3, [fp, #-16]
 c106274:	e5832000 	str	r2, [r3]
    
    addrDst = (uint32 *)(*addrDst);        // carga el puntero al marco de activación de sys_init()
 c106278:	e51b3010 	ldr	r3, [fp, #-16]
 c10627c:	e5933000 	ldr	r3, [r3]
 c106280:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el PC apilado
 c106284:	e51b3010 	ldr	r3, [fp, #-16]
 c106288:	e2433004 	sub	r3, r3, #4
 c10628c:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el LR apilado
 c106290:	e51b3010 	ldr	r3, [fp, #-16]
 c106294:	e2433004 	sub	r3, r3, #4
 c106298:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza SP apilado para que apunte a la pila SVC
 c10629c:	e51b3010 	ldr	r3, [fp, #-16]
 c1062a0:	e5932000 	ldr	r2, [r3]
 c1062a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1062a8:	e0632002 	rsb	r2, r3, r2
 c1062ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1062b0:	e5832000 	str	r2, [r3]
    addrDst--;                             // salta el SP apilado
 c1062b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1062b8:	e2433004 	sub	r3, r3, #4
 c1062bc:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza el FP apilado para que apunte a la pila SVC
 c1062c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1062c4:	e5932000 	ldr	r2, [r3]
 c1062c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1062cc:	e0632002 	rsb	r2, r3, r2
 c1062d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1062d4:	e5832000 	str	r2, [r3]
   
    SET_OPMODE( SVCMODE );                           // cambia a modo SVC
 c1062d8:	e10f0000 	mrs	r0, CPSR
 c1062dc:	e3c0001f 	bic	r0, r0, #31
 c1062e0:	e3800013 	orr	r0, r0, #19
 c1062e4:	e121f000 	msr	CPSR_c, r0

    sp -= diffStacks;
 c1062e8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1062ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1062f0:	e0633002 	rsb	r3, r3, r2
 c1062f4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    asm volatile ( "ldr sp, %0" : : "m" (sp) : );    // actualiza SP_svc para que apunte a la cima de la pila SVC
 c1062f8:	e51bd01c 	ldr	sp, [fp, #-28]	; 0xffffffe4
    
    fp -= diffStacks;                 
 c1062fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c106300:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106304:	e0633002 	rsb	r3, r3, r2
 c106308:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    asm volatile ( "ldr fp, %0" : : "m" (fp) : );    // actualiza FP para que apunte al marco de la pila SVC, debe ser siempre la última sentencia
 c10630c:	e51bb020 	ldr	fp, [fp, #-32]	; 0xffffffe0
}
 c106310:	e24bd00c 	sub	sp, fp, #12
 c106314:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106318:	e12fff1e 	bx	lr
 c10631c:	0c7ff400 	.word	0x0c7ff400
 c106320:	0c7ff500 	.word	0x0c7ff500
 c106324:	0c7ff300 	.word	0x0c7ff300
 c106328:	0c7ff200 	.word	0x0c7ff200
 c10632c:	0c7ff100 	.word	0x0c7ff100

0c106330 <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c106330:	e1a0c00d 	mov	ip, sp
 c106334:	e92dd800 	push	{fp, ip, lr, pc}
 c106338:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0;
 c10633c:	e59f30bc 	ldr	r3, [pc, #188]	; c106400 <timers_init+0xd0>
 c106340:	e3a02000 	mov	r2, #0
 c106344:	e5832000 	str	r2, [r3]
    TCFG1 = 0;
 c106348:	e59f30b4 	ldr	r3, [pc, #180]	; c106404 <timers_init+0xd4>
 c10634c:	e3a02000 	mov	r2, #0
 c106350:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c106354:	e59f30ac 	ldr	r3, [pc, #172]	; c106408 <timers_init+0xd8>
 c106358:	e3a02000 	mov	r2, #0
 c10635c:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c106360:	e59f30a4 	ldr	r3, [pc, #164]	; c10640c <timers_init+0xdc>
 c106364:	e3a02000 	mov	r2, #0
 c106368:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c10636c:	e59f309c 	ldr	r3, [pc, #156]	; c106410 <timers_init+0xe0>
 c106370:	e3a02000 	mov	r2, #0
 c106374:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c106378:	e59f3094 	ldr	r3, [pc, #148]	; c106414 <timers_init+0xe4>
 c10637c:	e3a02000 	mov	r2, #0
 c106380:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c106384:	e59f308c 	ldr	r3, [pc, #140]	; c106418 <timers_init+0xe8>
 c106388:	e3a02000 	mov	r2, #0
 c10638c:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c106390:	e59f3084 	ldr	r3, [pc, #132]	; c10641c <timers_init+0xec>
 c106394:	e3a02000 	mov	r2, #0
 c106398:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c10639c:	e59f307c 	ldr	r3, [pc, #124]	; c106420 <timers_init+0xf0>
 c1063a0:	e3a02000 	mov	r2, #0
 c1063a4:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c1063a8:	e59f3074 	ldr	r3, [pc, #116]	; c106424 <timers_init+0xf4>
 c1063ac:	e3a02000 	mov	r2, #0
 c1063b0:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c1063b4:	e59f306c 	ldr	r3, [pc, #108]	; c106428 <timers_init+0xf8>
 c1063b8:	e3a02000 	mov	r2, #0
 c1063bc:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c1063c0:	e59f3064 	ldr	r3, [pc, #100]	; c10642c <timers_init+0xfc>
 c1063c4:	e3a02000 	mov	r2, #0
 c1063c8:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c1063cc:	e59f305c 	ldr	r3, [pc, #92]	; c106430 <timers_init+0x100>
 c1063d0:	e3a02000 	mov	r2, #0
 c1063d4:	e5832000 	str	r2, [r3]

    TCON = (1<25)|(1<<21)|(1<<17)|(1<<13)|(1<<9)|(1<<1);
 c1063d8:	e59f3054 	ldr	r3, [pc, #84]	; c106434 <timers_init+0x104>
 c1063dc:	e59f2054 	ldr	r2, [pc, #84]	; c106438 <timers_init+0x108>
 c1063e0:	e5832000 	str	r2, [r3]
    TCON = ((0<25)|(0<<21)|(0<<17)|(0<<13)|(0<<9)|(0<<1));
 c1063e4:	e59f3048 	ldr	r3, [pc, #72]	; c106434 <timers_init+0x104>
 c1063e8:	e3a02001 	mov	r2, #1
 c1063ec:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c1063f0:	eb000011 	bl	c10643c <sw_delay_init>
}
 c1063f4:	e24bd00c 	sub	sp, fp, #12
 c1063f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1063fc:	e12fff1e 	bx	lr
 c106400:	01d50000 	.word	0x01d50000
 c106404:	01d50004 	.word	0x01d50004
 c106408:	01d5000c 	.word	0x01d5000c
 c10640c:	01d50010 	.word	0x01d50010
 c106410:	01d50018 	.word	0x01d50018
 c106414:	01d5001c 	.word	0x01d5001c
 c106418:	01d50024 	.word	0x01d50024
 c10641c:	01d50028 	.word	0x01d50028
 c106420:	01d50030 	.word	0x01d50030
 c106424:	01d50034 	.word	0x01d50034
 c106428:	01d5003c 	.word	0x01d5003c
 c10642c:	01d50040 	.word	0x01d50040
 c106430:	01d50048 	.word	0x01d50048
 c106434:	01d50008 	.word	0x01d50008
 c106438:	00222203 	.word	0x00222203

0c10643c <sw_delay_init>:

static void sw_delay_init( void )
{
 c10643c:	e1a0c00d 	mov	ip, sp
 c106440:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c106444:	e24cb004 	sub	fp, ip, #4
 c106448:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c10644c:	eb0000d6 	bl	c1067ac <timer3_start>
    for( i=1000000; i; i--);
 c106450:	e59f3088 	ldr	r3, [pc, #136]	; c1064e0 <sw_delay_init+0xa4>
 c106454:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c106458:	ea000002 	b	c106468 <sw_delay_init+0x2c>
 c10645c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106460:	e2433001 	sub	r3, r3, #1
 c106464:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c106468:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10646c:	e3530000 	cmp	r3, #0
 c106470:	1afffff9 	bne	c10645c <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c106474:	eb0000f8 	bl	c10685c <timer3_stop>
 c106478:	e1a03000 	mov	r3, r0
 c10647c:	e1a02003 	mov	r2, r3
 c106480:	e1a03002 	mov	r3, r2
 c106484:	e3a04000 	mov	r4, #0
 c106488:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c10648c:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c106490:	e2800b01 	add	r0, r0, #1024	; 0x400
 c106494:	e3a01002 	mov	r1, #2
 c106498:	e1a02003 	mov	r2, r3
 c10649c:	e1a03004 	mov	r3, r4
 c1064a0:	eb0006b6 	bl	c107f80 <__aeabi_uldivmod>
 c1064a4:	e1a03000 	mov	r3, r0
 c1064a8:	e1a04001 	mov	r4, r1
 c1064ac:	e1a02003 	mov	r2, r3
 c1064b0:	e59f302c 	ldr	r3, [pc, #44]	; c1064e4 <sw_delay_init+0xa8>
 c1064b4:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c1064b8:	e59f3024 	ldr	r3, [pc, #36]	; c1064e4 <sw_delay_init+0xa8>
 c1064bc:	e5932000 	ldr	r2, [r3]
 c1064c0:	e59f3020 	ldr	r3, [pc, #32]	; c1064e8 <sw_delay_init+0xac>
 c1064c4:	e0831392 	umull	r1, r3, r2, r3
 c1064c8:	e1a02323 	lsr	r2, r3, #6
 c1064cc:	e59f3018 	ldr	r3, [pc, #24]	; c1064ec <sw_delay_init+0xb0>
 c1064d0:	e5832000 	str	r2, [r3]
};
 c1064d4:	e24bd010 	sub	sp, fp, #16
 c1064d8:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1064dc:	e12fff1e 	bx	lr
 c1064e0:	000f4240 	.word	0x000f4240
 c1064e4:	0c10a5a4 	.word	0x0c10a5a4
 c1064e8:	10624dd3 	.word	0x10624dd3
 c1064ec:	0c10a5a0 	.word	0x0c10a5a0

0c1064f0 <wait_for_1s>:

void wait_for_1s( void )
{
 c1064f0:	e1a0c00d 	mov	ip, sp
 c1064f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1064f8:	e24cb004 	sub	fp, ip, #4
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c1064fc:	e59f3098 	ldr	r3, [pc, #152]	; c10659c <wait_for_1s+0xac>
 c106500:	e59f2094 	ldr	r2, [pc, #148]	; c10659c <wait_for_1s+0xac>
 c106504:	e5922000 	ldr	r2, [r2]
 c106508:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10650c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c106510:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c106514:	e59f3084 	ldr	r3, [pc, #132]	; c1065a0 <wait_for_1s+0xb0>
 c106518:	e59f2080 	ldr	r2, [pc, #128]	; c1065a0 <wait_for_1s+0xb0>
 c10651c:	e5922000 	ldr	r2, [r2]
 c106520:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c106524:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c106528:	e5832000 	str	r2, [r3]
	TCNTB3 = 10000;
 c10652c:	e59f3070 	ldr	r3, [pc, #112]	; c1065a4 <wait_for_1s+0xb4>
 c106530:	e59f2070 	ldr	r2, [pc, #112]	; c1065a8 <wait_for_1s+0xb8>
 c106534:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c106538:	e59f306c 	ldr	r3, [pc, #108]	; c1065ac <wait_for_1s+0xbc>
 c10653c:	e59f2068 	ldr	r2, [pc, #104]	; c1065ac <wait_for_1s+0xbc>
 c106540:	e5922000 	ldr	r2, [r2]
 c106544:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c106548:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10654c:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c106550:	e59f3054 	ldr	r3, [pc, #84]	; c1065ac <wait_for_1s+0xbc>
 c106554:	e59f2050 	ldr	r2, [pc, #80]	; c1065ac <wait_for_1s+0xbc>
 c106558:	e5922000 	ldr	r2, [r2]
 c10655c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c106560:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c106564:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c106568:	e1a00000 	nop			; (mov r0, r0)
 c10656c:	e59f303c 	ldr	r3, [pc, #60]	; c1065b0 <wait_for_1s+0xc0>
 c106570:	e5933000 	ldr	r3, [r3]
 c106574:	e3530000 	cmp	r3, #0
 c106578:	0afffffb 	beq	c10656c <wait_for_1s+0x7c>
	while( TCNTO3 );
 c10657c:	e1a00000 	nop			; (mov r0, r0)
 c106580:	e59f3028 	ldr	r3, [pc, #40]	; c1065b0 <wait_for_1s+0xc0>
 c106584:	e5933000 	ldr	r3, [r3]
 c106588:	e3530000 	cmp	r3, #0
 c10658c:	1afffffb 	bne	c106580 <wait_for_1s+0x90>
}
 c106590:	e24bd00c 	sub	sp, fp, #12
 c106594:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106598:	e12fff1e 	bx	lr
 c10659c:	01d50000 	.word	0x01d50000
 c1065a0:	01d50004 	.word	0x01d50004
 c1065a4:	01d50030 	.word	0x01d50030
 c1065a8:	00002710 	.word	0x00002710
 c1065ac:	01d50008 	.word	0x01d50008
 c1065b0:	01d50038 	.word	0x01d50038

0c1065b4 <wait_for_1ms>:

void wait_for_1ms( void )
{
 c1065b4:	e1a0c00d 	mov	ip, sp
 c1065b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1065bc:	e24cb004 	sub	fp, ip, #4
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c1065c0:	e59f3098 	ldr	r3, [pc, #152]	; c106660 <wait_for_1ms+0xac>
 c1065c4:	e59f2094 	ldr	r2, [pc, #148]	; c106660 <wait_for_1ms+0xac>
 c1065c8:	e5922000 	ldr	r2, [r2]
 c1065cc:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1065d0:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c1065d4:	e5832000 	str	r2, [r3]
	    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1065d8:	e59f3084 	ldr	r3, [pc, #132]	; c106664 <wait_for_1ms+0xb0>
 c1065dc:	e59f2080 	ldr	r2, [pc, #128]	; c106664 <wait_for_1ms+0xb0>
 c1065e0:	e5922000 	ldr	r2, [r2]
 c1065e4:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1065e8:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1065ec:	e5832000 	str	r2, [r3]
	TCNTB3 = 10;
 c1065f0:	e59f3070 	ldr	r3, [pc, #112]	; c106668 <wait_for_1ms+0xb4>
 c1065f4:	e3a0200a 	mov	r2, #10
 c1065f8:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1065fc:	e59f3068 	ldr	r3, [pc, #104]	; c10666c <wait_for_1ms+0xb8>
 c106600:	e59f2064 	ldr	r2, [pc, #100]	; c10666c <wait_for_1ms+0xb8>
 c106604:	e5922000 	ldr	r2, [r2]
 c106608:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10660c:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c106610:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c106614:	e59f3050 	ldr	r3, [pc, #80]	; c10666c <wait_for_1ms+0xb8>
 c106618:	e59f204c 	ldr	r2, [pc, #76]	; c10666c <wait_for_1ms+0xb8>
 c10661c:	e5922000 	ldr	r2, [r2]
 c106620:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c106624:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c106628:	e5832000 	str	r2, [r3]
	while( !TCNTO3 );
 c10662c:	e1a00000 	nop			; (mov r0, r0)
 c106630:	e59f3038 	ldr	r3, [pc, #56]	; c106670 <wait_for_1ms+0xbc>
 c106634:	e5933000 	ldr	r3, [r3]
 c106638:	e3530000 	cmp	r3, #0
 c10663c:	0afffffb 	beq	c106630 <wait_for_1ms+0x7c>
	while( TCNTO3 );
 c106640:	e1a00000 	nop			; (mov r0, r0)
 c106644:	e59f3024 	ldr	r3, [pc, #36]	; c106670 <wait_for_1ms+0xbc>
 c106648:	e5933000 	ldr	r3, [r3]
 c10664c:	e3530000 	cmp	r3, #0
 c106650:	1afffffb 	bne	c106644 <wait_for_1ms+0x90>
}
 c106654:	e24bd00c 	sub	sp, fp, #12
 c106658:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10665c:	e12fff1e 	bx	lr
 c106660:	01d50000 	.word	0x01d50000
 c106664:	01d50004 	.word	0x01d50004
 c106668:	01d50030 	.word	0x01d50030
 c10666c:	01d50008 	.word	0x01d50008
 c106670:	01d50038 	.word	0x01d50038

0c106674 <timer3_delay_ms>:

void timer3_delay_ms( uint16 n )
{
 c106674:	e1a0c00d 	mov	ip, sp
 c106678:	e92dd800 	push	{fp, ip, lr, pc}
 c10667c:	e24cb004 	sub	fp, ip, #4
 c106680:	e24dd008 	sub	sp, sp, #8
 c106684:	e1a03000 	mov	r3, r0
 c106688:	e14b30be 	strh	r3, [fp, #-14]
    for( ; n; n-- )
 c10668c:	ea000003 	b	c1066a0 <timer3_delay_ms+0x2c>
    {
    	wait_for_1ms();
 c106690:	ebffffc7 	bl	c1065b4 <wait_for_1ms>
	while( TCNTO3 );
}

void timer3_delay_ms( uint16 n )
{
    for( ; n; n-- )
 c106694:	e15b30be 	ldrh	r3, [fp, #-14]
 c106698:	e2433001 	sub	r3, r3, #1
 c10669c:	e14b30be 	strh	r3, [fp, #-14]
 c1066a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1066a4:	e3530000 	cmp	r3, #0
 c1066a8:	1afffff8 	bne	c106690 <timer3_delay_ms+0x1c>
    {
    	wait_for_1ms();
    }
}
 c1066ac:	e24bd00c 	sub	sp, fp, #12
 c1066b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1066b4:	e12fff1e 	bx	lr

0c1066b8 <sw_delay_ms>:

void sw_delay_ms( uint16 n )
{
 c1066b8:	e1a0c00d 	mov	ip, sp
 c1066bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1066c0:	e24cb004 	sub	fp, ip, #4
 c1066c4:	e24dd010 	sub	sp, sp, #16
 c1066c8:	e1a03000 	mov	r3, r0
 c1066cc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c1066d0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1066d4:	e59f2030 	ldr	r2, [pc, #48]	; c10670c <sw_delay_ms+0x54>
 c1066d8:	e5922000 	ldr	r2, [r2]
 c1066dc:	e0030392 	mul	r3, r2, r3
 c1066e0:	e50b3010 	str	r3, [fp, #-16]
 c1066e4:	ea000002 	b	c1066f4 <sw_delay_ms+0x3c>
 c1066e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1066ec:	e2433001 	sub	r3, r3, #1
 c1066f0:	e50b3010 	str	r3, [fp, #-16]
 c1066f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1066f8:	e3530000 	cmp	r3, #0
 c1066fc:	1afffff9 	bne	c1066e8 <sw_delay_ms+0x30>
}
 c106700:	e24bd00c 	sub	sp, fp, #12
 c106704:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106708:	e12fff1e 	bx	lr
 c10670c:	0c10a5a0 	.word	0x0c10a5a0

0c106710 <timer3_delay_s>:

void timer3_delay_s( uint16 n )
{
 c106710:	e1a0c00d 	mov	ip, sp
 c106714:	e92dd800 	push	{fp, ip, lr, pc}
 c106718:	e24cb004 	sub	fp, ip, #4
 c10671c:	e24dd008 	sub	sp, sp, #8
 c106720:	e1a03000 	mov	r3, r0
 c106724:	e14b30be 	strh	r3, [fp, #-14]
	for( ; n; n-- )
 c106728:	ea000003 	b	c10673c <timer3_delay_s+0x2c>
	{
		wait_for_1s();
 c10672c:	ebffff6f 	bl	c1064f0 <wait_for_1s>
    for( i=loop_ms*n; i; i-- );
}

void timer3_delay_s( uint16 n )
{
	for( ; n; n-- )
 c106730:	e15b30be 	ldrh	r3, [fp, #-14]
 c106734:	e2433001 	sub	r3, r3, #1
 c106738:	e14b30be 	strh	r3, [fp, #-14]
 c10673c:	e15b30be 	ldrh	r3, [fp, #-14]
 c106740:	e3530000 	cmp	r3, #0
 c106744:	1afffff8 	bne	c10672c <timer3_delay_s+0x1c>
	{
		wait_for_1s();
	}
}
 c106748:	e24bd00c 	sub	sp, fp, #12
 c10674c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106750:	e12fff1e 	bx	lr

0c106754 <sw_delay_s>:

void sw_delay_s( uint16 n )
{
 c106754:	e1a0c00d 	mov	ip, sp
 c106758:	e92dd800 	push	{fp, ip, lr, pc}
 c10675c:	e24cb004 	sub	fp, ip, #4
 c106760:	e24dd010 	sub	sp, sp, #16
 c106764:	e1a03000 	mov	r3, r0
 c106768:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c10676c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c106770:	e59f2030 	ldr	r2, [pc, #48]	; c1067a8 <sw_delay_s+0x54>
 c106774:	e5922000 	ldr	r2, [r2]
 c106778:	e0030392 	mul	r3, r2, r3
 c10677c:	e50b3010 	str	r3, [fp, #-16]
 c106780:	ea000002 	b	c106790 <sw_delay_s+0x3c>
 c106784:	e51b3010 	ldr	r3, [fp, #-16]
 c106788:	e2433001 	sub	r3, r3, #1
 c10678c:	e50b3010 	str	r3, [fp, #-16]
 c106790:	e51b3010 	ldr	r3, [fp, #-16]
 c106794:	e3530000 	cmp	r3, #0
 c106798:	1afffff9 	bne	c106784 <sw_delay_s+0x30>
}
 c10679c:	e24bd00c 	sub	sp, fp, #12
 c1067a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1067a4:	e12fff1e 	bx	lr
 c1067a8:	0c10a5a4 	.word	0x0c10a5a4

0c1067ac <timer3_start>:

void timer3_start( void ) 
{
 c1067ac:	e1a0c00d 	mov	ip, sp
 c1067b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1067b4:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c1067b8:	e59f3084 	ldr	r3, [pc, #132]	; c106844 <timer3_start+0x98>
 c1067bc:	e59f2080 	ldr	r2, [pc, #128]	; c106844 <timer3_start+0x98>
 c1067c0:	e5922000 	ldr	r2, [r2]
 c1067c4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1067c8:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c1067cc:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1067d0:	e59f3070 	ldr	r3, [pc, #112]	; c106848 <timer3_start+0x9c>
 c1067d4:	e59f206c 	ldr	r2, [pc, #108]	; c106848 <timer3_start+0x9c>
 c1067d8:	e5922000 	ldr	r2, [r2]
 c1067dc:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1067e0:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1067e4:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; 
 c1067e8:	e59f305c 	ldr	r3, [pc, #92]	; c10684c <timer3_start+0xa0>
 c1067ec:	e59f205c 	ldr	r2, [pc, #92]	; c106850 <timer3_start+0xa4>
 c1067f0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1067f4:	e59f3058 	ldr	r3, [pc, #88]	; c106854 <timer3_start+0xa8>
 c1067f8:	e59f2054 	ldr	r2, [pc, #84]	; c106854 <timer3_start+0xa8>
 c1067fc:	e5922000 	ldr	r2, [r2]
 c106800:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c106804:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c106808:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c10680c:	e59f3040 	ldr	r3, [pc, #64]	; c106854 <timer3_start+0xa8>
 c106810:	e59f203c 	ldr	r2, [pc, #60]	; c106854 <timer3_start+0xa8>
 c106814:	e5922000 	ldr	r2, [r2]
 c106818:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10681c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c106820:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c106824:	e1a00000 	nop			; (mov r0, r0)
 c106828:	e59f3028 	ldr	r3, [pc, #40]	; c106858 <timer3_start+0xac>
 c10682c:	e5933000 	ldr	r3, [r3]
 c106830:	e3530000 	cmp	r3, #0
 c106834:	0afffffb 	beq	c106828 <timer3_start+0x7c>
}
 c106838:	e24bd00c 	sub	sp, fp, #12
 c10683c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106840:	e12fff1e 	bx	lr
 c106844:	01d50000 	.word	0x01d50000
 c106848:	01d50004 	.word	0x01d50004
 c10684c:	01d50030 	.word	0x01d50030
 c106850:	0000ffff 	.word	0x0000ffff
 c106854:	01d50008 	.word	0x01d50008
 c106858:	01d50038 	.word	0x01d50038

0c10685c <timer3_stop>:

uint16 timer3_stop( void )
{
 c10685c:	e1a0c00d 	mov	ip, sp
 c106860:	e92dd800 	push	{fp, ip, lr, pc}
 c106864:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c106868:	e59f3038 	ldr	r3, [pc, #56]	; c1068a8 <timer3_stop+0x4c>
 c10686c:	e59f2034 	ldr	r2, [pc, #52]	; c1068a8 <timer3_stop+0x4c>
 c106870:	e5922000 	ldr	r2, [r2]
 c106874:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c106878:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;
 c10687c:	e59f3028 	ldr	r3, [pc, #40]	; c1068ac <timer3_stop+0x50>
 c106880:	e5933000 	ldr	r3, [r3]
 c106884:	e1a03803 	lsl	r3, r3, #16
 c106888:	e1a03823 	lsr	r3, r3, #16
 c10688c:	e1e03003 	mvn	r3, r3
 c106890:	e1a03803 	lsl	r3, r3, #16
 c106894:	e1a03823 	lsr	r3, r3, #16
}
 c106898:	e1a00003 	mov	r0, r3
 c10689c:	e24bd00c 	sub	sp, fp, #12
 c1068a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1068a4:	e12fff1e 	bx	lr
 c1068a8:	01d50008 	.word	0x01d50008
 c1068ac:	01d50038 	.word	0x01d50038

0c1068b0 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c1068b0:	e1a0c00d 	mov	ip, sp
 c1068b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1068b8:	e24cb004 	sub	fp, ip, #4
 c1068bc:	e24dd008 	sub	sp, sp, #8
 c1068c0:	e1a03000 	mov	r3, r0
 c1068c4:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);         //0.1 ms
 c1068c8:	e59f3084 	ldr	r3, [pc, #132]	; c106954 <timer3_start_timeout+0xa4>
 c1068cc:	e59f2080 	ldr	r2, [pc, #128]	; c106954 <timer3_start_timeout+0xa4>
 c1068d0:	e5922000 	ldr	r2, [r2]
 c1068d4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1068d8:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c1068dc:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1068e0:	e59f3070 	ldr	r3, [pc, #112]	; c106958 <timer3_start_timeout+0xa8>
 c1068e4:	e59f206c 	ldr	r2, [pc, #108]	; c106958 <timer3_start_timeout+0xa8>
 c1068e8:	e5922000 	ldr	r2, [r2]
 c1068ec:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1068f0:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1068f4:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; 
 c1068f8:	e59f305c 	ldr	r3, [pc, #92]	; c10695c <timer3_start_timeout+0xac>
 c1068fc:	e15b20be 	ldrh	r2, [fp, #-14]
 c106900:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c106904:	e59f3054 	ldr	r3, [pc, #84]	; c106960 <timer3_start_timeout+0xb0>
 c106908:	e59f2050 	ldr	r2, [pc, #80]	; c106960 <timer3_start_timeout+0xb0>
 c10690c:	e5922000 	ldr	r2, [r2]
 c106910:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c106914:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c106918:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c10691c:	e59f303c 	ldr	r3, [pc, #60]	; c106960 <timer3_start_timeout+0xb0>
 c106920:	e59f2038 	ldr	r2, [pc, #56]	; c106960 <timer3_start_timeout+0xb0>
 c106924:	e5922000 	ldr	r2, [r2]
 c106928:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10692c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c106930:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c106934:	e1a00000 	nop			; (mov r0, r0)
 c106938:	e59f3024 	ldr	r3, [pc, #36]	; c106964 <timer3_start_timeout+0xb4>
 c10693c:	e5933000 	ldr	r3, [r3]
 c106940:	e3530000 	cmp	r3, #0
 c106944:	0afffffb 	beq	c106938 <timer3_start_timeout+0x88>
}
 c106948:	e24bd00c 	sub	sp, fp, #12
 c10694c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106950:	e12fff1e 	bx	lr
 c106954:	01d50000 	.word	0x01d50000
 c106958:	01d50004 	.word	0x01d50004
 c10695c:	01d50030 	.word	0x01d50030
 c106960:	01d50008 	.word	0x01d50008
 c106964:	01d50038 	.word	0x01d50038

0c106968 <timer3_timeout>:

uint16 timer3_timeout( )
{
 c106968:	e1a0c00d 	mov	ip, sp
 c10696c:	e92dd800 	push	{fp, ip, lr, pc}
 c106970:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c106974:	e59f3024 	ldr	r3, [pc, #36]	; c1069a0 <timer3_timeout+0x38>
 c106978:	e5933000 	ldr	r3, [r3]
 c10697c:	e3530000 	cmp	r3, #0
 c106980:	13a03000 	movne	r3, #0
 c106984:	03a03001 	moveq	r3, #1
 c106988:	e1a03803 	lsl	r3, r3, #16
 c10698c:	e1a03823 	lsr	r3, r3, #16
}    
 c106990:	e1a00003 	mov	r0, r3
 c106994:	e24bd00c 	sub	sp, fp, #12
 c106998:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10699c:	e12fff1e 	bx	lr
 c1069a0:	01d50038 	.word	0x01d50038

0c1069a4 <timer0_open_tick>:

void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c1069a4:	e1a0c00d 	mov	ip, sp
 c1069a8:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1069ac:	e24cb004 	sub	fp, ip, #4
 c1069b0:	e24dd00c 	sub	sp, sp, #12
 c1069b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1069b8:	e1a03001 	mov	r3, r1
 c1069bc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    pISR_TIMER0 = (uint32) isr;
 c1069c0:	e59f31fc 	ldr	r3, [pc, #508]	; c106bc4 <timer0_open_tick+0x220>
 c1069c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1069c8:	e5832000 	str	r2, [r3]
    I_ISPC      = I_ISPC | (BIT_TIMER0) ;
 c1069cc:	e59f31f4 	ldr	r3, [pc, #500]	; c106bc8 <timer0_open_tick+0x224>
 c1069d0:	e59f21f0 	ldr	r2, [pc, #496]	; c106bc8 <timer0_open_tick+0x224>
 c1069d4:	e5922000 	ldr	r2, [r2]
 c1069d8:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c1069dc:	e5832000 	str	r2, [r3]
    INTMSK     &= ~((BIT_TIMER0)|(BIT_GLOBAL));
 c1069e0:	e59f21e4 	ldr	r2, [pc, #484]	; c106bcc <timer0_open_tick+0x228>
 c1069e4:	e59f31e0 	ldr	r3, [pc, #480]	; c106bcc <timer0_open_tick+0x228>
 c1069e8:	e5933000 	ldr	r3, [r3]
 c1069ec:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c1069f0:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c1069f4:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) {  //25 microS
 c1069f8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1069fc:	e3530000 	cmp	r3, #0
 c106a00:	0a000018 	beq	c106a68 <timer0_open_tick+0xc4>
 c106a04:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106a08:	e353000a 	cmp	r3, #10
 c106a0c:	8a000015 	bhi	c106a68 <timer0_open_tick+0xc4>
        TCFG0  = (TCFG0 & ~(0xff)) | (49);
 c106a10:	e59f31b8 	ldr	r3, [pc, #440]	; c106bd0 <timer0_open_tick+0x22c>
 c106a14:	e59f21b4 	ldr	r2, [pc, #436]	; c106bd0 <timer0_open_tick+0x22c>
 c106a18:	e5922000 	ldr	r2, [r2]
 c106a1c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c106a20:	e3822031 	orr	r2, r2, #49	; 0x31
 c106a24:	e5832000 	str	r2, [r3]
    	TCFG1 = (TCFG1 & ~(0xf)) | (4 );
 c106a28:	e59f31a4 	ldr	r3, [pc, #420]	; c106bd4 <timer0_open_tick+0x230>
 c106a2c:	e59f21a0 	ldr	r2, [pc, #416]	; c106bd4 <timer0_open_tick+0x230>
 c106a30:	e5922000 	ldr	r2, [r2]
 c106a34:	e3c2200f 	bic	r2, r2, #15
 c106a38:	e3822004 	orr	r2, r2, #4
 c106a3c:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c106a40:	e59f4190 	ldr	r4, [pc, #400]	; c106bd8 <timer0_open_tick+0x234>
 c106a44:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106a48:	e59f018c 	ldr	r0, [pc, #396]	; c106bdc <timer0_open_tick+0x238>
 c106a4c:	e1a01003 	mov	r1, r3
 c106a50:	eb0004b2 	bl	c107d20 <__aeabi_uidiv>
 c106a54:	e1a03000 	mov	r3, r0
 c106a58:	e1a03803 	lsl	r3, r3, #16
 c106a5c:	e1a03823 	lsr	r3, r3, #16
 c106a60:	e5843000 	str	r3, [r4]
 c106a64:	ea000047 	b	c106b88 <timer0_open_tick+0x1e4>
    } else if( tps > 10 && tps <= 100 ) { //2,5 microS
 c106a68:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106a6c:	e353000a 	cmp	r3, #10
 c106a70:	9a000016 	bls	c106ad0 <timer0_open_tick+0x12c>
 c106a74:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106a78:	e3530064 	cmp	r3, #100	; 0x64
 c106a7c:	8a000013 	bhi	c106ad0 <timer0_open_tick+0x12c>
        TCFG0  = (TCFG0 & ~(0xff)) | (10);
 c106a80:	e59f3148 	ldr	r3, [pc, #328]	; c106bd0 <timer0_open_tick+0x22c>
 c106a84:	e59f2144 	ldr	r2, [pc, #324]	; c106bd0 <timer0_open_tick+0x22c>
 c106a88:	e5922000 	ldr	r2, [r2]
 c106a8c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c106a90:	e382200a 	orr	r2, r2, #10
 c106a94:	e5832000 	str	r2, [r3]
    	TCFG1 = (TCFG1 & ~(0xf)) | (2);
 c106a98:	e59f3134 	ldr	r3, [pc, #308]	; c106bd4 <timer0_open_tick+0x230>
 c106a9c:	e59f2130 	ldr	r2, [pc, #304]	; c106bd4 <timer0_open_tick+0x230>
 c106aa0:	e5922000 	ldr	r2, [r2]
 c106aa4:	e3c2200f 	bic	r2, r2, #15
 c106aa8:	e3822002 	orr	r2, r2, #2
 c106aac:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c106ab0:	e59f4120 	ldr	r4, [pc, #288]	; c106bd8 <timer0_open_tick+0x234>
 c106ab4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106ab8:	e59f0120 	ldr	r0, [pc, #288]	; c106be0 <timer0_open_tick+0x23c>
 c106abc:	e1a01003 	mov	r1, r3
 c106ac0:	eb000496 	bl	c107d20 <__aeabi_uidiv>
 c106ac4:	e1a03000 	mov	r3, r0
 c106ac8:	e5843000 	str	r3, [r4]
 c106acc:	ea00002d 	b	c106b88 <timer0_open_tick+0x1e4>
    } else if( tps > 100 && tps <= 1000 ) { //0,25 microS
 c106ad0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106ad4:	e3530064 	cmp	r3, #100	; 0x64
 c106ad8:	9a000016 	bls	c106b38 <timer0_open_tick+0x194>
 c106adc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106ae0:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c106ae4:	8a000013 	bhi	c106b38 <timer0_open_tick+0x194>
        TCFG0  = (TCFG0 & ~(0xff)) | (1);
 c106ae8:	e59f30e0 	ldr	r3, [pc, #224]	; c106bd0 <timer0_open_tick+0x22c>
 c106aec:	e59f20dc 	ldr	r2, [pc, #220]	; c106bd0 <timer0_open_tick+0x22c>
 c106af0:	e5922000 	ldr	r2, [r2]
 c106af4:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c106af8:	e3822001 	orr	r2, r2, #1
 c106afc:	e5832000 	str	r2, [r3]
    	TCFG1 = (TCFG1 & ~(0xf)) | (2);
 c106b00:	e59f30cc 	ldr	r3, [pc, #204]	; c106bd4 <timer0_open_tick+0x230>
 c106b04:	e59f20c8 	ldr	r2, [pc, #200]	; c106bd4 <timer0_open_tick+0x230>
 c106b08:	e5922000 	ldr	r2, [r2]
 c106b0c:	e3c2200f 	bic	r2, r2, #15
 c106b10:	e3822002 	orr	r2, r2, #2
 c106b14:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c106b18:	e59f40b8 	ldr	r4, [pc, #184]	; c106bd8 <timer0_open_tick+0x234>
 c106b1c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106b20:	e59f00bc 	ldr	r0, [pc, #188]	; c106be4 <timer0_open_tick+0x240>
 c106b24:	e1a01003 	mov	r1, r3
 c106b28:	eb00047c 	bl	c107d20 <__aeabi_uidiv>
 c106b2c:	e1a03000 	mov	r3, r0
 c106b30:	e5843000 	str	r3, [r4]
 c106b34:	ea000013 	b	c106b88 <timer0_open_tick+0x1e4>
    } else if ( tps > 1000 ) { //31.25 ns
 c106b38:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106b3c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c106b40:	9a000010 	bls	c106b88 <timer0_open_tick+0x1e4>
        TCFG0  = (TCFG0 & ~(0xff));
 c106b44:	e59f3084 	ldr	r3, [pc, #132]	; c106bd0 <timer0_open_tick+0x22c>
 c106b48:	e59f2080 	ldr	r2, [pc, #128]	; c106bd0 <timer0_open_tick+0x22c>
 c106b4c:	e5922000 	ldr	r2, [r2]
 c106b50:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c106b54:	e5832000 	str	r2, [r3]
    	TCFG1 = (TCFG1 & ~(0xf));
 c106b58:	e59f3074 	ldr	r3, [pc, #116]	; c106bd4 <timer0_open_tick+0x230>
 c106b5c:	e59f2070 	ldr	r2, [pc, #112]	; c106bd4 <timer0_open_tick+0x230>
 c106b60:	e5922000 	ldr	r2, [r2]
 c106b64:	e3c2200f 	bic	r2, r2, #15
 c106b68:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c106b6c:	e59f4064 	ldr	r4, [pc, #100]	; c106bd8 <timer0_open_tick+0x234>
 c106b70:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c106b74:	e59f006c 	ldr	r0, [pc, #108]	; c106be8 <timer0_open_tick+0x244>
 c106b78:	e1a01003 	mov	r1, r3
 c106b7c:	eb000467 	bl	c107d20 <__aeabi_uidiv>
 c106b80:	e1a03000 	mov	r3, r0
 c106b84:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON & ~(0x3)) | (1<<1)|(1<<3);
 c106b88:	e59f305c 	ldr	r3, [pc, #92]	; c106bec <timer0_open_tick+0x248>
 c106b8c:	e59f2058 	ldr	r2, [pc, #88]	; c106bec <timer0_open_tick+0x248>
 c106b90:	e5922000 	ldr	r2, [r2]
 c106b94:	e3c2200b 	bic	r2, r2, #11
 c106b98:	e382200a 	orr	r2, r2, #10
 c106b9c:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0x3)) | (1<<0)|(1<<3);
 c106ba0:	e59f3044 	ldr	r3, [pc, #68]	; c106bec <timer0_open_tick+0x248>
 c106ba4:	e59f2040 	ldr	r2, [pc, #64]	; c106bec <timer0_open_tick+0x248>
 c106ba8:	e5922000 	ldr	r2, [r2]
 c106bac:	e3c2200b 	bic	r2, r2, #11
 c106bb0:	e3822009 	orr	r2, r2, #9
 c106bb4:	e5832000 	str	r2, [r3]
}
 c106bb8:	e24bd010 	sub	sp, fp, #16
 c106bbc:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c106bc0:	e12fff1e 	bx	lr
 c106bc4:	0c7fff54 	.word	0x0c7fff54
 c106bc8:	01e00024 	.word	0x01e00024
 c106bcc:	01e0000c 	.word	0x01e0000c
 c106bd0:	01d50000 	.word	0x01d50000
 c106bd4:	01d50004 	.word	0x01d50004
 c106bd8:	01d5000c 	.word	0x01d5000c
 c106bdc:	00009c40 	.word	0x00009c40
 c106be0:	00061a80 	.word	0x00061a80
 c106be4:	003d0900 	.word	0x003d0900
 c106be8:	01e84800 	.word	0x01e84800
 c106bec:	01d50008 	.word	0x01d50008

0c106bf0 <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c106bf0:	e1a0c00d 	mov	ip, sp
 c106bf4:	e92dd800 	push	{fp, ip, lr, pc}
 c106bf8:	e24cb004 	sub	fp, ip, #4
 c106bfc:	e24dd008 	sub	sp, sp, #8
 c106c00:	e50b0010 	str	r0, [fp, #-16]
 c106c04:	e1a03002 	mov	r3, r2
 c106c08:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c106c0c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
	pISR_TIMER0 = (uint32) isr;
 c106c10:	e59f30d0 	ldr	r3, [pc, #208]	; c106ce8 <timer0_open_ms+0xf8>
 c106c14:	e51b2010 	ldr	r2, [fp, #-16]
 c106c18:	e5832000 	str	r2, [r3]
	I_ISPC      = I_ISPC | (BIT_TIMER0) ;
 c106c1c:	e59f30c8 	ldr	r3, [pc, #200]	; c106cec <timer0_open_ms+0xfc>
 c106c20:	e59f20c4 	ldr	r2, [pc, #196]	; c106cec <timer0_open_ms+0xfc>
 c106c24:	e5922000 	ldr	r2, [r2]
 c106c28:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c106c2c:	e5832000 	str	r2, [r3]
	INTMSK     &= ~((BIT_TIMER0)|(BIT_GLOBAL));
 c106c30:	e59f20b8 	ldr	r2, [pc, #184]	; c106cf0 <timer0_open_ms+0x100>
 c106c34:	e59f30b4 	ldr	r3, [pc, #180]	; c106cf0 <timer0_open_ms+0x100>
 c106c38:	e5933000 	ldr	r3, [r3]
 c106c3c:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c106c40:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c106c44:	e5823000 	str	r3, [r2]

    TCFG0 = (TCFG0 & ~(0xff)) | (199);  //0.1 microS
 c106c48:	e59f30a4 	ldr	r3, [pc, #164]	; c106cf4 <timer0_open_ms+0x104>
 c106c4c:	e59f20a0 	ldr	r2, [pc, #160]	; c106cf4 <timer0_open_ms+0x104>
 c106c50:	e5922000 	ldr	r2, [r2]
 c106c54:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c106c58:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c106c5c:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf)) | (4);
 c106c60:	e59f3090 	ldr	r3, [pc, #144]	; c106cf8 <timer0_open_ms+0x108>
 c106c64:	e59f208c 	ldr	r2, [pc, #140]	; c106cf8 <timer0_open_ms+0x108>
 c106c68:	e5922000 	ldr	r2, [r2]
 c106c6c:	e3c2200f 	bic	r2, r2, #15
 c106c70:	e3822004 	orr	r2, r2, #4
 c106c74:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c106c78:	e59f107c 	ldr	r1, [pc, #124]	; c106cfc <timer0_open_ms+0x10c>
 c106c7c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c106c80:	e1a03002 	mov	r3, r2
 c106c84:	e1a03103 	lsl	r3, r3, #2
 c106c88:	e0833002 	add	r3, r3, r2
 c106c8c:	e1a03083 	lsl	r3, r3, #1
 c106c90:	e5813000 	str	r3, [r1]

    TCON = (TCON & ~(0xf)) | (1<<1)| mode<<3;
 c106c94:	e59f3064 	ldr	r3, [pc, #100]	; c106d00 <timer0_open_ms+0x110>
 c106c98:	e59f2060 	ldr	r2, [pc, #96]	; c106d00 <timer0_open_ms+0x110>
 c106c9c:	e5922000 	ldr	r2, [r2]
 c106ca0:	e3c2100f 	bic	r1, r2, #15
 c106ca4:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c106ca8:	e1a02182 	lsl	r2, r2, #3
 c106cac:	e1812002 	orr	r2, r1, r2
 c106cb0:	e3822002 	orr	r2, r2, #2
 c106cb4:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf)) | (1<<0)| mode<<3;
 c106cb8:	e59f3040 	ldr	r3, [pc, #64]	; c106d00 <timer0_open_ms+0x110>
 c106cbc:	e59f203c 	ldr	r2, [pc, #60]	; c106d00 <timer0_open_ms+0x110>
 c106cc0:	e5922000 	ldr	r2, [r2]
 c106cc4:	e3c2100f 	bic	r1, r2, #15
 c106cc8:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c106ccc:	e1a02182 	lsl	r2, r2, #3
 c106cd0:	e1812002 	orr	r2, r1, r2
 c106cd4:	e3822001 	orr	r2, r2, #1
 c106cd8:	e5832000 	str	r2, [r3]
}
 c106cdc:	e24bd00c 	sub	sp, fp, #12
 c106ce0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106ce4:	e12fff1e 	bx	lr
 c106ce8:	0c7fff54 	.word	0x0c7fff54
 c106cec:	01e00024 	.word	0x01e00024
 c106cf0:	01e0000c 	.word	0x01e0000c
 c106cf4:	01d50000 	.word	0x01d50000
 c106cf8:	01d50004 	.word	0x01d50004
 c106cfc:	01d5000c 	.word	0x01d5000c
 c106d00:	01d50008 	.word	0x01d50008

0c106d04 <timer0_close>:




void timer0_close( void )
{
 c106d04:	e1a0c00d 	mov	ip, sp
 c106d08:	e92dd800 	push	{fp, ip, lr, pc}
 c106d0c:	e24cb004 	sub	fp, ip, #4
    TCNTB0 = 0x0;
 c106d10:	e59f306c 	ldr	r3, [pc, #108]	; c106d84 <timer0_close+0x80>
 c106d14:	e3a02000 	mov	r2, #0
 c106d18:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c106d1c:	e59f3064 	ldr	r3, [pc, #100]	; c106d88 <timer0_close+0x84>
 c106d20:	e3a02000 	mov	r2, #0
 c106d24:	e5832000 	str	r2, [r3]

    TCON = (TCON & ~(0x11)) | (1<<1);
 c106d28:	e59f305c 	ldr	r3, [pc, #92]	; c106d8c <timer0_close+0x88>
 c106d2c:	e59f2058 	ldr	r2, [pc, #88]	; c106d8c <timer0_close+0x88>
 c106d30:	e5922000 	ldr	r2, [r2]
 c106d34:	e3c22013 	bic	r2, r2, #19
 c106d38:	e3822002 	orr	r2, r2, #2
 c106d3c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0x11)) | (1<<0);
 c106d40:	e59f3044 	ldr	r3, [pc, #68]	; c106d8c <timer0_close+0x88>
 c106d44:	e59f2040 	ldr	r2, [pc, #64]	; c106d8c <timer0_close+0x88>
 c106d48:	e5922000 	ldr	r2, [r2]
 c106d4c:	e3c22011 	bic	r2, r2, #17
 c106d50:	e3822001 	orr	r2, r2, #1
 c106d54:	e5832000 	str	r2, [r3]
    
    INTMSK     |= (BIT_TIMER0);
 c106d58:	e59f3030 	ldr	r3, [pc, #48]	; c106d90 <timer0_close+0x8c>
 c106d5c:	e59f202c 	ldr	r2, [pc, #44]	; c106d90 <timer0_close+0x8c>
 c106d60:	e5922000 	ldr	r2, [r2]
 c106d64:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c106d68:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c106d6c:	e59f3020 	ldr	r3, [pc, #32]	; c106d94 <timer0_close+0x90>
 c106d70:	e59f2020 	ldr	r2, [pc, #32]	; c106d98 <timer0_close+0x94>
 c106d74:	e5832000 	str	r2, [r3]
}
 c106d78:	e24bd00c 	sub	sp, fp, #12
 c106d7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106d80:	e12fff1e 	bx	lr
 c106d84:	01d5000c 	.word	0x01d5000c
 c106d88:	01d50010 	.word	0x01d50010
 c106d8c:	01d50008 	.word	0x01d50008
 c106d90:	01e0000c 	.word	0x01e0000c
 c106d94:	0c7fff54 	.word	0x0c7fff54
 c106d98:	0c105bec 	.word	0x0c105bec

0c106d9c <ts_init>:
static void ts_scan( uint16 *Vx, uint16 *Vy );
static void ts_calibrate( void );
static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );

void ts_init( void )
{
 c106d9c:	e1a0c00d 	mov	ip, sp
 c106da0:	e92dd800 	push	{fp, ip, lr, pc}
 c106da4:	e24cb004 	sub	fp, ip, #4
    timers_init();  
 c106da8:	ebfffd60 	bl	c106330 <timers_init>
    lcd_init();
 c106dac:	ebffefe4 	bl	c102d44 <lcd_init>
    adc_init();
 c106db0:	eb00033e 	bl	c107ab0 <adc_init>
    PDATE = (1 << 4) | (1 << 5) | (0 << 6) | (1 << 7);
 c106db4:	e59f3024 	ldr	r3, [pc, #36]	; c106de0 <ts_init+0x44>
 c106db8:	e3a020b0 	mov	r2, #176	; 0xb0
 c106dbc:	e5832000 	str	r2, [r3]
    sw_delay_ms( 1 );
 c106dc0:	e3a00001 	mov	r0, #1
 c106dc4:	ebfffe3b 	bl	c1066b8 <sw_delay_ms>
    ts_on();
 c106dc8:	eb000005 	bl	c106de4 <ts_on>
    ts_calibrate();
 c106dcc:	eb000033 	bl	c106ea0 <ts_calibrate>
    ts_off();
 c106dd0:	eb00000e 	bl	c106e10 <ts_off>
}
 c106dd4:	e24bd00c 	sub	sp, fp, #12
 c106dd8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106ddc:	e12fff1e 	bx	lr
 c106de0:	01d2002c 	.word	0x01d2002c

0c106de4 <ts_on>:

void ts_on( void )
{
 c106de4:	e1a0c00d 	mov	ip, sp
 c106de8:	e92dd800 	push	{fp, ip, lr, pc}
 c106dec:	e24cb004 	sub	fp, ip, #4
    adc_on();
 c106df0:	eb000339 	bl	c107adc <adc_on>
    state = ON;
 c106df4:	e59f3010 	ldr	r3, [pc, #16]	; c106e0c <ts_on+0x28>
 c106df8:	e3a02001 	mov	r2, #1
 c106dfc:	e5c32000 	strb	r2, [r3]
}
 c106e00:	e24bd00c 	sub	sp, fp, #12
 c106e04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106e08:	e12fff1e 	bx	lr
 c106e0c:	0c10a5b0 	.word	0x0c10a5b0

0c106e10 <ts_off>:

void ts_off( void )
{
 c106e10:	e1a0c00d 	mov	ip, sp
 c106e14:	e92dd800 	push	{fp, ip, lr, pc}
 c106e18:	e24cb004 	sub	fp, ip, #4
    adc_off();
 c106e1c:	eb00033f 	bl	c107b20 <adc_off>
    state = OFF;
 c106e20:	e59f3010 	ldr	r3, [pc, #16]	; c106e38 <ts_off+0x28>
 c106e24:	e3a02000 	mov	r2, #0
 c106e28:	e5c32000 	strb	r2, [r3]
}
 c106e2c:	e24bd00c 	sub	sp, fp, #12
 c106e30:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106e34:	e12fff1e 	bx	lr
 c106e38:	0c10a5b0 	.word	0x0c10a5b0

0c106e3c <ts_status>:

uint8 ts_status( void )
{
 c106e3c:	e1a0c00d 	mov	ip, sp
 c106e40:	e92dd800 	push	{fp, ip, lr, pc}
 c106e44:	e24cb004 	sub	fp, ip, #4
    return state;
 c106e48:	e59f3010 	ldr	r3, [pc, #16]	; c106e60 <ts_status+0x24>
 c106e4c:	e5d33000 	ldrb	r3, [r3]
}
 c106e50:	e1a00003 	mov	r0, r3
 c106e54:	e24bd00c 	sub	sp, fp, #12
 c106e58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106e5c:	e12fff1e 	bx	lr
 c106e60:	0c10a5b0 	.word	0x0c10a5b0

0c106e64 <ts_pressed>:

uint8 ts_pressed( void )
{
 c106e64:	e1a0c00d 	mov	ip, sp
 c106e68:	e92dd800 	push	{fp, ip, lr, pc}
 c106e6c:	e24cb004 	sub	fp, ip, #4
    return (PDATG & (1 << 2)) ? 0 : 1;
 c106e70:	e59f3024 	ldr	r3, [pc, #36]	; c106e9c <ts_pressed+0x38>
 c106e74:	e5933000 	ldr	r3, [r3]
 c106e78:	e2033004 	and	r3, r3, #4
 c106e7c:	e3530000 	cmp	r3, #0
 c106e80:	13a03000 	movne	r3, #0
 c106e84:	03a03001 	moveq	r3, #1
 c106e88:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c106e8c:	e1a00003 	mov	r0, r3
 c106e90:	e24bd00c 	sub	sp, fp, #12
 c106e94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106e98:	e12fff1e 	bx	lr
 c106e9c:	01d20044 	.word	0x01d20044

0c106ea0 <ts_calibrate>:

static void ts_calibrate( void )
{
 c106ea0:	e1a0c00d 	mov	ip, sp
 c106ea4:	e92dd800 	push	{fp, ip, lr, pc}
 c106ea8:	e24cb004 	sub	fp, ip, #4
 c106eac:	e24dd010 	sub	sp, sp, #16
    uint16 x, y;
    
    lcd_on();
 c106eb0:	ebfff004 	bl	c102ec8 <lcd_on>
    do {    
        // BORRAR PANTALLA
        lcd_clear();
 c106eb4:	ebfff02b 	bl	c102f68 <lcd_clear>
        // MOSTRAR MENSAJE DE CALIBRACION
        lcd_puts(10,80,BLACK,"SOFTWARE DE CALIBRACION DE TOUCHSCREEN\n");
 c106eb8:	e3a0000a 	mov	r0, #10
 c106ebc:	e3a01050 	mov	r1, #80	; 0x50
 c106ec0:	e3a0200f 	mov	r2, #15
 c106ec4:	e59f31c0 	ldr	r3, [pc, #448]	; c10708c <ts_calibrate+0x1ec>
 c106ec8:	ebfff25e 	bl	c103848 <lcd_puts>
		lcd_puts(30,105,BLACK,"hecho por Lucas 'a secas' Arranz\n");
 c106ecc:	e3a0001e 	mov	r0, #30
 c106ed0:	e3a01069 	mov	r1, #105	; 0x69
 c106ed4:	e3a0200f 	mov	r2, #15
 c106ed8:	e59f31b0 	ldr	r3, [pc, #432]	; c107090 <ts_calibrate+0x1f0>
 c106edc:	ebfff259 	bl	c103848 <lcd_puts>
		lcd_puts(115,125,BLACK,"INTEGRAMENTE\n");
 c106ee0:	e3a00073 	mov	r0, #115	; 0x73
 c106ee4:	e3a0107d 	mov	r1, #125	; 0x7d
 c106ee8:	e3a0200f 	mov	r2, #15
 c106eec:	e59f31a0 	ldr	r3, [pc, #416]	; c107094 <ts_calibrate+0x1f4>
 c106ef0:	ebfff254 	bl	c103848 <lcd_puts>
        sw_delay_s(2);
 c106ef4:	e3a00002 	mov	r0, #2
 c106ef8:	ebfffe15 	bl	c106754 <sw_delay_s>
        //PINTA CUADRADO 5X5 PX EN (0,0) Y SOLICITA PRESIONAR TOUCHSCREEN
        lcd_clear();
 c106efc:	ebfff019 	bl	c102f68 <lcd_clear>
        lcd_puts(64, 128, BLACK, "Presione en el cuadrado");
 c106f00:	e3a00040 	mov	r0, #64	; 0x40
 c106f04:	e3a01080 	mov	r1, #128	; 0x80
 c106f08:	e3a0200f 	mov	r2, #15
 c106f0c:	e59f3184 	ldr	r3, [pc, #388]	; c107098 <ts_calibrate+0x1f8>
 c106f10:	ebfff24c 	bl	c103848 <lcd_puts>
        lcd_draw_box(0, 0, 5, 5, BLACK, 1);
 c106f14:	e3a0300f 	mov	r3, #15
 c106f18:	e58d3000 	str	r3, [sp]
 c106f1c:	e3a03001 	mov	r3, #1
 c106f20:	e58d3004 	str	r3, [sp, #4]
 c106f24:	e3a00000 	mov	r0, #0
 c106f28:	e3a01000 	mov	r1, #0
 c106f2c:	e3a02005 	mov	r2, #5
 c106f30:	e3a03005 	mov	r3, #5
 c106f34:	ebfff0e3 	bl	c1032c8 <lcd_draw_box>

        while(!ts_pressed()); // ESPERAMOS PRESION DE TOUCHSCREEN
 c106f38:	e1a00000 	nop			; (mov r0, r0)
 c106f3c:	ebffffc8 	bl	c106e64 <ts_pressed>
 c106f40:	e1a03000 	mov	r3, r0
 c106f44:	e3530000 	cmp	r3, #0
 c106f48:	0afffffb 	beq	c106f3c <ts_calibrate+0x9c>
        sw_delay_ms( TS_DOWN_DELAY );
 c106f4c:	e3a0001e 	mov	r0, #30
 c106f50:	ebfffdd8 	bl	c1066b8 <sw_delay_ms>
        ts_scan( &Vxmin, &Vymax );
 c106f54:	e59f0140 	ldr	r0, [pc, #320]	; c10709c <ts_calibrate+0x1fc>
 c106f58:	e59f1140 	ldr	r1, [pc, #320]	; c1070a0 <ts_calibrate+0x200>
 c106f5c:	eb0000d5 	bl	c1072b8 <ts_scan>
        while( ts_pressed() ); // ESPERAMOS DEPRESION DE TOUCHSCREEN
 c106f60:	e1a00000 	nop			; (mov r0, r0)
 c106f64:	ebffffbe 	bl	c106e64 <ts_pressed>
 c106f68:	e1a03000 	mov	r3, r0
 c106f6c:	e3530000 	cmp	r3, #0
 c106f70:	1afffffb 	bne	c106f64 <ts_calibrate+0xc4>
        sw_delay_ms( TS_UP_DELAY );
 c106f74:	e3a00064 	mov	r0, #100	; 0x64
 c106f78:	ebfffdce 	bl	c1066b8 <sw_delay_ms>

        //PINTA CUADRADO 5X5 PX EN (319,239) Y SOLICITA PRESIONAR TOUCHSCREEN
        lcd_clear();
 c106f7c:	ebffeff9 	bl	c102f68 <lcd_clear>
        lcd_puts(64, 128, BLACK, "Presione en el cuadrado");
 c106f80:	e3a00040 	mov	r0, #64	; 0x40
 c106f84:	e3a01080 	mov	r1, #128	; 0x80
 c106f88:	e3a0200f 	mov	r2, #15
 c106f8c:	e59f3104 	ldr	r3, [pc, #260]	; c107098 <ts_calibrate+0x1f8>
 c106f90:	ebfff22c 	bl	c103848 <lcd_puts>
        lcd_draw_box(319-5, 239-5, 319, 239, BLACK, 1);
 c106f94:	e3a0300f 	mov	r3, #15
 c106f98:	e58d3000 	str	r3, [sp]
 c106f9c:	e3a03001 	mov	r3, #1
 c106fa0:	e58d3004 	str	r3, [sp, #4]
 c106fa4:	e59f00f8 	ldr	r0, [pc, #248]	; c1070a4 <ts_calibrate+0x204>
 c106fa8:	e3a010ea 	mov	r1, #234	; 0xea
 c106fac:	e59f20f4 	ldr	r2, [pc, #244]	; c1070a8 <ts_calibrate+0x208>
 c106fb0:	e3a030ef 	mov	r3, #239	; 0xef
 c106fb4:	ebfff0c3 	bl	c1032c8 <lcd_draw_box>
           
        while(!ts_pressed()); // ESPERAMOS PRESION DE TOUCHSCREEN
 c106fb8:	e1a00000 	nop			; (mov r0, r0)
 c106fbc:	ebffffa8 	bl	c106e64 <ts_pressed>
 c106fc0:	e1a03000 	mov	r3, r0
 c106fc4:	e3530000 	cmp	r3, #0
 c106fc8:	0afffffb 	beq	c106fbc <ts_calibrate+0x11c>
        sw_delay_ms( TS_DOWN_DELAY );
 c106fcc:	e3a0001e 	mov	r0, #30
 c106fd0:	ebfffdb8 	bl	c1066b8 <sw_delay_ms>
        ts_scan( &Vxmax, &Vymin );
 c106fd4:	e59f00d0 	ldr	r0, [pc, #208]	; c1070ac <ts_calibrate+0x20c>
 c106fd8:	e59f10d0 	ldr	r1, [pc, #208]	; c1070b0 <ts_calibrate+0x210>
 c106fdc:	eb0000b5 	bl	c1072b8 <ts_scan>
        while( ts_pressed() ); // ESPERAMOS DEPRESION DE TOUCHSCREEN
 c106fe0:	e1a00000 	nop			; (mov r0, r0)
 c106fe4:	ebffff9e 	bl	c106e64 <ts_pressed>
 c106fe8:	e1a03000 	mov	r3, r0
 c106fec:	e3530000 	cmp	r3, #0
 c106ff0:	1afffffb 	bne	c106fe4 <ts_calibrate+0x144>
        sw_delay_ms( TS_UP_DELAY );
 c106ff4:	e3a00064 	mov	r0, #100	; 0x64
 c106ff8:	ebfffdae 	bl	c1066b8 <sw_delay_ms>
    
        //PINTA CUADRADO 5X5 PX EN (160,120) Y SOLICITA PRESIONAR TOUCHSCREEN
        lcd_clear();
 c106ffc:	ebffefd9 	bl	c102f68 <lcd_clear>
        lcd_puts(80, 128, BLACK, "Presione en el cuadrado");
 c107000:	e3a00050 	mov	r0, #80	; 0x50
 c107004:	e3a01080 	mov	r1, #128	; 0x80
 c107008:	e3a0200f 	mov	r2, #15
 c10700c:	e59f3084 	ldr	r3, [pc, #132]	; c107098 <ts_calibrate+0x1f8>
 c107010:	ebfff20c 	bl	c103848 <lcd_puts>
        lcd_draw_box(158, 118, 163, 123, BLACK, 1);
 c107014:	e3a0300f 	mov	r3, #15
 c107018:	e58d3000 	str	r3, [sp]
 c10701c:	e3a03001 	mov	r3, #1
 c107020:	e58d3004 	str	r3, [sp, #4]
 c107024:	e3a0009e 	mov	r0, #158	; 0x9e
 c107028:	e3a01076 	mov	r1, #118	; 0x76
 c10702c:	e3a020a3 	mov	r2, #163	; 0xa3
 c107030:	e3a0307b 	mov	r3, #123	; 0x7b
 c107034:	ebfff0a3 	bl	c1032c8 <lcd_draw_box>

        ts_getpos( &x, &y );
 c107038:	e24b200e 	sub	r2, fp, #14
 c10703c:	e24b3010 	sub	r3, fp, #16
 c107040:	e1a00002 	mov	r0, r2
 c107044:	e1a01003 	mov	r1, r3
 c107048:	eb000019 	bl	c1070b4 <ts_getpos>

    } while( (x > LCD_WIDTH/2+PX_ERROR) || (x < LCD_WIDTH/2-PX_ERROR) || (y > LCD_HEIGHT/2+PX_ERROR) || (y < LCD_HEIGHT/2-PX_ERROR) );
 c10704c:	e15b30be 	ldrh	r3, [fp, #-14]
 c107050:	e35300a5 	cmp	r3, #165	; 0xa5
 c107054:	8affff96 	bhi	c106eb4 <ts_calibrate+0x14>
 c107058:	e15b30be 	ldrh	r3, [fp, #-14]
 c10705c:	e353009a 	cmp	r3, #154	; 0x9a
 c107060:	9affff93 	bls	c106eb4 <ts_calibrate+0x14>
 c107064:	e15b31b0 	ldrh	r3, [fp, #-16]
 c107068:	e353007d 	cmp	r3, #125	; 0x7d
 c10706c:	8affff90 	bhi	c106eb4 <ts_calibrate+0x14>
 c107070:	e15b31b0 	ldrh	r3, [fp, #-16]
 c107074:	e3530072 	cmp	r3, #114	; 0x72
 c107078:	9affff8d 	bls	c106eb4 <ts_calibrate+0x14>
    lcd_clear();
 c10707c:	ebffefb9 	bl	c102f68 <lcd_clear>
}
 c107080:	e24bd00c 	sub	sp, fp, #12
 c107084:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107088:	e12fff1e 	bx	lr
 c10708c:	0c109460 	.word	0x0c109460
 c107090:	0c109488 	.word	0x0c109488
 c107094:	0c1094ac 	.word	0x0c1094ac
 c107098:	0c1094bc 	.word	0x0c1094bc
 c10709c:	0c10a5a8 	.word	0x0c10a5a8
 c1070a0:	0c10a5ae 	.word	0x0c10a5ae
 c1070a4:	0000013a 	.word	0x0000013a
 c1070a8:	0000013f 	.word	0x0000013f
 c1070ac:	0c10a5aa 	.word	0x0c10a5aa
 c1070b0:	0c10a5ac 	.word	0x0c10a5ac

0c1070b4 <ts_getpos>:

void ts_getpos( uint16 *x, uint16 *y )
{
 c1070b4:	e1a0c00d 	mov	ip, sp
 c1070b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1070bc:	e24cb004 	sub	fp, ip, #4
 c1070c0:	e24dd010 	sub	sp, sp, #16
 c1070c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1070c8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint16 Vx, Vy;
    while ( !ts_pressed() );
 c1070cc:	e1a00000 	nop			; (mov r0, r0)
 c1070d0:	ebffff63 	bl	c106e64 <ts_pressed>
 c1070d4:	e1a03000 	mov	r3, r0
 c1070d8:	e3530000 	cmp	r3, #0
 c1070dc:	0afffffb 	beq	c1070d0 <ts_getpos+0x1c>
    sw_delay_ms( TS_DOWN_DELAY );
 c1070e0:	e3a0001e 	mov	r0, #30
 c1070e4:	ebfffd73 	bl	c1066b8 <sw_delay_ms>
    ts_scan( &Vx, &Vy );
 c1070e8:	e24b200e 	sub	r2, fp, #14
 c1070ec:	e24b3010 	sub	r3, fp, #16
 c1070f0:	e1a00002 	mov	r0, r2
 c1070f4:	e1a01003 	mov	r1, r3
 c1070f8:	eb00006e 	bl	c1072b8 <ts_scan>
    while ( ts_pressed() );
 c1070fc:	e1a00000 	nop			; (mov r0, r0)
 c107100:	ebffff57 	bl	c106e64 <ts_pressed>
 c107104:	e1a03000 	mov	r3, r0
 c107108:	e3530000 	cmp	r3, #0
 c10710c:	1afffffb 	bne	c107100 <ts_getpos+0x4c>
    sw_delay_ms( TS_UP_DELAY );
 c107110:	e3a00064 	mov	r0, #100	; 0x64
 c107114:	ebfffd67 	bl	c1066b8 <sw_delay_ms>
    ts_sample2coord( Vx, Vy, x, y );
 c107118:	e15b20be 	ldrh	r2, [fp, #-14]
 c10711c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c107120:	e1a00002 	mov	r0, r2
 c107124:	e1a01003 	mov	r1, r3
 c107128:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10712c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c107130:	eb000081 	bl	c10733c <ts_sample2coord>
}
 c107134:	e24bd00c 	sub	sp, fp, #12
 c107138:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10713c:	e12fff1e 	bx	lr

0c107140 <ts_getpostime>:

void ts_getpostime( uint16 *x, uint16 *y, uint16 *ms )
{
 c107140:	e1a0c00d 	mov	ip, sp
 c107144:	e92dd800 	push	{fp, ip, lr, pc}
 c107148:	e24cb004 	sub	fp, ip, #4
 c10714c:	e24dd018 	sub	sp, sp, #24
 c107150:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c107154:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c107158:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    uint16 Vx, Vy;
    while ( !ts_pressed() );
 c10715c:	e1a00000 	nop			; (mov r0, r0)
 c107160:	ebffff3f 	bl	c106e64 <ts_pressed>
 c107164:	e1a03000 	mov	r3, r0
 c107168:	e3530000 	cmp	r3, #0
 c10716c:	0afffffb 	beq	c107160 <ts_getpostime+0x20>
    timer3_start();
 c107170:	ebfffd8d 	bl	c1067ac <timer3_start>
    sw_delay_ms( TS_DOWN_DELAY );
 c107174:	e3a0001e 	mov	r0, #30
 c107178:	ebfffd4e 	bl	c1066b8 <sw_delay_ms>
    ts_scan( &Vx, &Vy );
 c10717c:	e24b200e 	sub	r2, fp, #14
 c107180:	e24b3010 	sub	r3, fp, #16
 c107184:	e1a00002 	mov	r0, r2
 c107188:	e1a01003 	mov	r1, r3
 c10718c:	eb000049 	bl	c1072b8 <ts_scan>

    while ( ts_pressed() );
 c107190:	e1a00000 	nop			; (mov r0, r0)
 c107194:	ebffff32 	bl	c106e64 <ts_pressed>
 c107198:	e1a03000 	mov	r3, r0
 c10719c:	e3530000 	cmp	r3, #0
 c1071a0:	1afffffb 	bne	c107194 <ts_getpostime+0x54>
    *ms = timer3_stop() / 10;
 c1071a4:	ebfffdac 	bl	c10685c <timer3_stop>
 c1071a8:	e1a03000 	mov	r3, r0
 c1071ac:	e1a02003 	mov	r2, r3
 c1071b0:	e59f3044 	ldr	r3, [pc, #68]	; c1071fc <ts_getpostime+0xbc>
 c1071b4:	e0831392 	umull	r1, r3, r2, r3
 c1071b8:	e1a031a3 	lsr	r3, r3, #3
 c1071bc:	e1a03803 	lsl	r3, r3, #16
 c1071c0:	e1a02823 	lsr	r2, r3, #16
 c1071c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1071c8:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( TS_UP_DELAY );
 c1071cc:	e3a00064 	mov	r0, #100	; 0x64
 c1071d0:	ebfffd38 	bl	c1066b8 <sw_delay_ms>
    ts_sample2coord( Vx, Vy, x, y );
 c1071d4:	e15b20be 	ldrh	r2, [fp, #-14]
 c1071d8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1071dc:	e1a00002 	mov	r0, r2
 c1071e0:	e1a01003 	mov	r1, r3
 c1071e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1071e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1071ec:	eb000052 	bl	c10733c <ts_sample2coord>
}
 c1071f0:	e24bd00c 	sub	sp, fp, #12
 c1071f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1071f8:	e12fff1e 	bx	lr
 c1071fc:	cccccccd 	.word	0xcccccccd

0c107200 <ts_timeout_getpos>:

uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
{
 c107200:	e1a0c00d 	mov	ip, sp
 c107204:	e92dd800 	push	{fp, ip, lr, pc}
 c107208:	e24cb004 	sub	fp, ip, #4
 c10720c:	e24dd018 	sub	sp, sp, #24
 c107210:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c107214:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c107218:	e1a03002 	mov	r3, r2
 c10721c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    uint16 Vx, Vy;
    timer3_start();
 c107220:	ebfffd61 	bl	c1067ac <timer3_start>
    while ( !ts_pressed() )
 c107224:	ea000005 	b	c107240 <ts_timeout_getpos+0x40>
    {
        if (timer3_timeout())
 c107228:	ebfffdce 	bl	c106968 <timer3_timeout>
 c10722c:	e1a03000 	mov	r3, r0
 c107230:	e3530000 	cmp	r3, #0
 c107234:	0a000001 	beq	c107240 <ts_timeout_getpos+0x40>
            return TS_TIMEOUT;
 c107238:	e3a030fe 	mov	r3, #254	; 0xfe
 c10723c:	ea000019 	b	c1072a8 <ts_timeout_getpos+0xa8>

uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
{
    uint16 Vx, Vy;
    timer3_start();
    while ( !ts_pressed() )
 c107240:	ebffff07 	bl	c106e64 <ts_pressed>
 c107244:	e1a03000 	mov	r3, r0
 c107248:	e3530000 	cmp	r3, #0
 c10724c:	0afffff5 	beq	c107228 <ts_timeout_getpos+0x28>
    {
        if (timer3_timeout())
            return TS_TIMEOUT;
    }
    sw_delay_ms( TS_DOWN_DELAY );
 c107250:	e3a0001e 	mov	r0, #30
 c107254:	ebfffd17 	bl	c1066b8 <sw_delay_ms>
    ts_scan( &Vx, &Vy );
 c107258:	e24b200e 	sub	r2, fp, #14
 c10725c:	e24b3010 	sub	r3, fp, #16
 c107260:	e1a00002 	mov	r0, r2
 c107264:	e1a01003 	mov	r1, r3
 c107268:	eb000012 	bl	c1072b8 <ts_scan>
    while ( ts_pressed() );
 c10726c:	e1a00000 	nop			; (mov r0, r0)
 c107270:	ebfffefb 	bl	c106e64 <ts_pressed>
 c107274:	e1a03000 	mov	r3, r0
 c107278:	e3530000 	cmp	r3, #0
 c10727c:	1afffffb 	bne	c107270 <ts_timeout_getpos+0x70>
    sw_delay_ms( TS_UP_DELAY );
 c107280:	e3a00064 	mov	r0, #100	; 0x64
 c107284:	ebfffd0b 	bl	c1066b8 <sw_delay_ms>
    ts_sample2coord( Vx, Vy, x, y );
 c107288:	e15b20be 	ldrh	r2, [fp, #-14]
 c10728c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c107290:	e1a00002 	mov	r0, r2
 c107294:	e1a01003 	mov	r1, r3
 c107298:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10729c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1072a0:	eb000025 	bl	c10733c <ts_sample2coord>
    return TS_OK;
 c1072a4:	e3a03001 	mov	r3, #1
}
 c1072a8:	e1a00003 	mov	r0, r3
 c1072ac:	e24bd00c 	sub	sp, fp, #12
 c1072b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1072b4:	e12fff1e 	bx	lr

0c1072b8 <ts_scan>:

static void ts_scan( uint16 *Vx, uint16 *Vy )
{
 c1072b8:	e1a0c00d 	mov	ip, sp
 c1072bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1072c0:	e24cb004 	sub	fp, ip, #4
 c1072c4:	e24dd008 	sub	sp, sp, #8
 c1072c8:	e50b0010 	str	r0, [fp, #-16]
 c1072cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    PDATE = (0 << 4) | (1 << 5) | (1 << 6) | (0 << 7); // X- tierra, X+ VDD, resto abiertos
 c1072d0:	e59f3060 	ldr	r3, [pc, #96]	; c107338 <ts_scan+0x80>
 c1072d4:	e3a02060 	mov	r2, #96	; 0x60
 c1072d8:	e5832000 	str	r2, [r3]
    *Vx = adc_getSample(1);
 c1072dc:	e3a00001 	mov	r0, #1
 c1072e0:	eb000227 	bl	c107b84 <adc_getSample>
 c1072e4:	e1a03000 	mov	r3, r0
 c1072e8:	e1a02003 	mov	r2, r3
 c1072ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1072f0:	e1c320b0 	strh	r2, [r3]
    
    PDATE = (1 << 4) | (0 << 5) | (0 << 6) | (1 << 7); // Y- tierra, Y+ VDD, resto abiertos
 c1072f4:	e59f303c 	ldr	r3, [pc, #60]	; c107338 <ts_scan+0x80>
 c1072f8:	e3a02090 	mov	r2, #144	; 0x90
 c1072fc:	e5832000 	str	r2, [r3]
    *Vy = adc_getSample(0);
 c107300:	e3a00000 	mov	r0, #0
 c107304:	eb00021e 	bl	c107b84 <adc_getSample>
 c107308:	e1a03000 	mov	r3, r0
 c10730c:	e1a02003 	mov	r2, r3
 c107310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c107314:	e1c320b0 	strh	r2, [r3]
    
    PDATE = (1 << 4) | (1 << 5) | (0 << 6) | (1 << 7); // Y- tierra, resto abiertos
 c107318:	e59f3018 	ldr	r3, [pc, #24]	; c107338 <ts_scan+0x80>
 c10731c:	e3a020b0 	mov	r2, #176	; 0xb0
 c107320:	e5832000 	str	r2, [r3]
    sw_delay_ms( 1 );
 c107324:	e3a00001 	mov	r0, #1
 c107328:	ebfffce2 	bl	c1066b8 <sw_delay_ms>
}
 c10732c:	e24bd00c 	sub	sp, fp, #12
 c107330:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107334:	e12fff1e 	bx	lr
 c107338:	01d2002c 	.word	0x01d2002c

0c10733c <ts_sample2coord>:

static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
{
 c10733c:	e1a0c00d 	mov	ip, sp
 c107340:	e92dd800 	push	{fp, ip, lr, pc}
 c107344:	e24cb004 	sub	fp, ip, #4
 c107348:	e24dd010 	sub	sp, sp, #16
 c10734c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 c107350:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c107354:	e14b00be 	strh	r0, [fp, #-14]
 c107358:	e14b11b0 	strh	r1, [fp, #-16]
    if( Vx < Vxmin )
 c10735c:	e59f3150 	ldr	r3, [pc, #336]	; c1074b4 <ts_sample2coord+0x178>
 c107360:	e1d330b0 	ldrh	r3, [r3]
 c107364:	e15b20be 	ldrh	r2, [fp, #-14]
 c107368:	e1520003 	cmp	r2, r3
 c10736c:	2a000003 	bcs	c107380 <ts_sample2coord+0x44>
        *x = 0;
 c107370:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c107374:	e3a02000 	mov	r2, #0
 c107378:	e1c320b0 	strh	r2, [r3]
 c10737c:	ea00001f 	b	c107400 <ts_sample2coord+0xc4>
    else if( Vx > Vxmax )
 c107380:	e59f3130 	ldr	r3, [pc, #304]	; c1074b8 <ts_sample2coord+0x17c>
 c107384:	e1d330b0 	ldrh	r3, [r3]
 c107388:	e15b20be 	ldrh	r2, [fp, #-14]
 c10738c:	e1520003 	cmp	r2, r3
 c107390:	9a000003 	bls	c1073a4 <ts_sample2coord+0x68>
        *x = LCD_WIDTH-1;
 c107394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c107398:	e59f211c 	ldr	r2, [pc, #284]	; c1074bc <ts_sample2coord+0x180>
 c10739c:	e1c320b0 	strh	r2, [r3]
 c1073a0:	ea000016 	b	c107400 <ts_sample2coord+0xc4>
    else 
        *x = LCD_WIDTH*(Vx-Vxmin) / (Vxmax-Vxmin);
 c1073a4:	e15b20be 	ldrh	r2, [fp, #-14]
 c1073a8:	e59f3104 	ldr	r3, [pc, #260]	; c1074b4 <ts_sample2coord+0x178>
 c1073ac:	e1d330b0 	ldrh	r3, [r3]
 c1073b0:	e0632002 	rsb	r2, r3, r2
 c1073b4:	e1a03002 	mov	r3, r2
 c1073b8:	e1a03103 	lsl	r3, r3, #2
 c1073bc:	e0833002 	add	r3, r3, r2
 c1073c0:	e1a03303 	lsl	r3, r3, #6
 c1073c4:	e1a02003 	mov	r2, r3
 c1073c8:	e59f30e8 	ldr	r3, [pc, #232]	; c1074b8 <ts_sample2coord+0x17c>
 c1073cc:	e1d330b0 	ldrh	r3, [r3]
 c1073d0:	e1a01003 	mov	r1, r3
 c1073d4:	e59f30d8 	ldr	r3, [pc, #216]	; c1074b4 <ts_sample2coord+0x178>
 c1073d8:	e1d330b0 	ldrh	r3, [r3]
 c1073dc:	e0633001 	rsb	r3, r3, r1
 c1073e0:	e1a00002 	mov	r0, r2
 c1073e4:	e1a01003 	mov	r1, r3
 c1073e8:	eb000291 	bl	c107e34 <__aeabi_idiv>
 c1073ec:	e1a03000 	mov	r3, r0
 c1073f0:	e1a03803 	lsl	r3, r3, #16
 c1073f4:	e1a02823 	lsr	r2, r3, #16
 c1073f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1073fc:	e1c320b0 	strh	r2, [r3]

    if( Vy < Vymin )
 c107400:	e59f30b8 	ldr	r3, [pc, #184]	; c1074c0 <ts_sample2coord+0x184>
 c107404:	e1d330b0 	ldrh	r3, [r3]
 c107408:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10740c:	e1520003 	cmp	r2, r3
 c107410:	2a000003 	bcs	c107424 <ts_sample2coord+0xe8>
        *y = LCD_HEIGHT-1;
 c107414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107418:	e3a020ef 	mov	r2, #239	; 0xef
 c10741c:	e1c320b0 	strh	r2, [r3]
 c107420:	ea000020 	b	c1074a8 <ts_sample2coord+0x16c>
    else if( Vy > Vymax )
 c107424:	e59f3098 	ldr	r3, [pc, #152]	; c1074c4 <ts_sample2coord+0x188>
 c107428:	e1d330b0 	ldrh	r3, [r3]
 c10742c:	e15b21b0 	ldrh	r2, [fp, #-16]
 c107430:	e1520003 	cmp	r2, r3
 c107434:	9a000003 	bls	c107448 <ts_sample2coord+0x10c>
        *y = 0;
 c107438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10743c:	e3a02000 	mov	r2, #0
 c107440:	e1c320b0 	strh	r2, [r3]
 c107444:	ea000017 	b	c1074a8 <ts_sample2coord+0x16c>
    else
        *y = LCD_HEIGHT*(Vymax - Vy) / (Vymax-Vymin);
 c107448:	e59f3074 	ldr	r3, [pc, #116]	; c1074c4 <ts_sample2coord+0x188>
 c10744c:	e1d330b0 	ldrh	r3, [r3]
 c107450:	e1a02003 	mov	r2, r3
 c107454:	e15b31b0 	ldrh	r3, [fp, #-16]
 c107458:	e0632002 	rsb	r2, r3, r2
 c10745c:	e1a03002 	mov	r3, r2
 c107460:	e1a03203 	lsl	r3, r3, #4
 c107464:	e0623003 	rsb	r3, r2, r3
 c107468:	e1a03203 	lsl	r3, r3, #4
 c10746c:	e1a02003 	mov	r2, r3
 c107470:	e59f304c 	ldr	r3, [pc, #76]	; c1074c4 <ts_sample2coord+0x188>
 c107474:	e1d330b0 	ldrh	r3, [r3]
 c107478:	e1a01003 	mov	r1, r3
 c10747c:	e59f303c 	ldr	r3, [pc, #60]	; c1074c0 <ts_sample2coord+0x184>
 c107480:	e1d330b0 	ldrh	r3, [r3]
 c107484:	e0633001 	rsb	r3, r3, r1
 c107488:	e1a00002 	mov	r0, r2
 c10748c:	e1a01003 	mov	r1, r3
 c107490:	eb000267 	bl	c107e34 <__aeabi_idiv>
 c107494:	e1a03000 	mov	r3, r0
 c107498:	e1a03803 	lsl	r3, r3, #16
 c10749c:	e1a02823 	lsr	r2, r3, #16
 c1074a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1074a4:	e1c320b0 	strh	r2, [r3]
}
 c1074a8:	e24bd00c 	sub	sp, fp, #12
 c1074ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1074b0:	e12fff1e 	bx	lr
 c1074b4:	0c10a5a8 	.word	0x0c10a5a8
 c1074b8:	0c10a5aa 	.word	0x0c10a5aa
 c1074bc:	0000013f 	.word	0x0000013f
 c1074c0:	0c10a5ac 	.word	0x0c10a5ac
 c1074c4:	0c10a5ae 	.word	0x0c10a5ae

0c1074c8 <ts_open>:

void ts_open( void (*isr)(void) )
{
 c1074c8:	e1a0c00d 	mov	ip, sp
 c1074cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1074d0:	e24cb004 	sub	fp, ip, #4
 c1074d4:	e24dd008 	sub	sp, sp, #8
 c1074d8:	e50b0010 	str	r0, [fp, #-16]
    pISR_TS = (uint32)isr;
 c1074dc:	e59f3038 	ldr	r3, [pc, #56]	; c10751c <ts_open+0x54>
 c1074e0:	e51b2010 	ldr	r2, [fp, #-16]
 c1074e4:	e5832000 	str	r2, [r3]
    INTPND &= ~(BIT_EINT2);
 c1074e8:	e59f3030 	ldr	r3, [pc, #48]	; c107520 <ts_open+0x58>
 c1074ec:	e59f202c 	ldr	r2, [pc, #44]	; c107520 <ts_open+0x58>
 c1074f0:	e5922000 	ldr	r2, [r2]
 c1074f4:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
 c1074f8:	e5832000 	str	r2, [r3]
    INTMSK &= ~(BIT_GLOBAL | BIT_EINT2);
 c1074fc:	e59f3020 	ldr	r3, [pc, #32]	; c107524 <ts_open+0x5c>
 c107500:	e59f201c 	ldr	r2, [pc, #28]	; c107524 <ts_open+0x5c>
 c107504:	e5922000 	ldr	r2, [r2]
 c107508:	e3c22512 	bic	r2, r2, #75497472	; 0x4800000
 c10750c:	e5832000 	str	r2, [r3]
}
 c107510:	e24bd00c 	sub	sp, fp, #12
 c107514:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107518:	e12fff1e 	bx	lr
 c10751c:	0c7fff7c 	.word	0x0c7fff7c
 c107520:	01e00004 	.word	0x01e00004
 c107524:	01e0000c 	.word	0x01e0000c

0c107528 <ts_close>:

void ts_close( void )
{
 c107528:	e1a0c00d 	mov	ip, sp
 c10752c:	e92dd800 	push	{fp, ip, lr, pc}
 c107530:	e24cb004 	sub	fp, ip, #4
    INTMSK |= BIT_EINT2;
 c107534:	e59f3024 	ldr	r3, [pc, #36]	; c107560 <ts_close+0x38>
 c107538:	e59f2020 	ldr	r2, [pc, #32]	; c107560 <ts_close+0x38>
 c10753c:	e5922000 	ldr	r2, [r2]
 c107540:	e3822502 	orr	r2, r2, #8388608	; 0x800000
 c107544:	e5832000 	str	r2, [r3]
    pISR_TS = (uint32)isr_TS_dummy;
 c107548:	e59f3014 	ldr	r3, [pc, #20]	; c107564 <ts_close+0x3c>
 c10754c:	e59f2014 	ldr	r2, [pc, #20]	; c107568 <ts_close+0x40>
 c107550:	e5832000 	str	r2, [r3]
}
 c107554:	e24bd00c 	sub	sp, fp, #12
 c107558:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10755c:	e12fff1e 	bx	lr
 c107560:	01e0000c 	.word	0x01e0000c
 c107564:	0c7fff7c 	.word	0x0c7fff7c
 c107568:	0c105da0 	.word	0x0c105da0

0c10756c <uart0_init>:

#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c10756c:	e1a0c00d 	mov	ip, sp
 c107570:	e92dd800 	push	{fp, ip, lr, pc}
 c107574:	e24cb004 	sub	fp, ip, #4
    UFCON0 = 0x1;
 c107578:	e59f3040 	ldr	r3, [pc, #64]	; c1075c0 <uart0_init+0x54>
 c10757c:	e3a02001 	mov	r2, #1
 c107580:	e5832000 	str	r2, [r3]
    UMCON0 = 0x0;
 c107584:	e59f3038 	ldr	r3, [pc, #56]	; c1075c4 <uart0_init+0x58>
 c107588:	e3a02000 	mov	r2, #0
 c10758c:	e5832000 	str	r2, [r3]
    ULCON0 = 0x3;
 c107590:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c107594:	e3a02003 	mov	r2, #3
 c107598:	e5832000 	str	r2, [r3]
    UBRDIV0 = 0x22;
 c10759c:	e59f3024 	ldr	r3, [pc, #36]	; c1075c8 <uart0_init+0x5c>
 c1075a0:	e3a02022 	mov	r2, #34	; 0x22
 c1075a4:	e5832000 	str	r2, [r3]
    UCON0 = 0x5;
 c1075a8:	e59f301c 	ldr	r3, [pc, #28]	; c1075cc <uart0_init+0x60>
 c1075ac:	e3a02005 	mov	r2, #5
 c1075b0:	e5832000 	str	r2, [r3]
}
 c1075b4:	e24bd00c 	sub	sp, fp, #12
 c1075b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1075bc:	e12fff1e 	bx	lr
 c1075c0:	01d00008 	.word	0x01d00008
 c1075c4:	01d0000c 	.word	0x01d0000c
 c1075c8:	01d00028 	.word	0x01d00028
 c1075cc:	01d00004 	.word	0x01d00004

0c1075d0 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c1075d0:	e1a0c00d 	mov	ip, sp
 c1075d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1075d8:	e24cb004 	sub	fp, ip, #4
 c1075dc:	e24dd008 	sub	sp, sp, #8
 c1075e0:	e1a03000 	mov	r3, r0
 c1075e4:	e54b300d 	strb	r3, [fp, #-13]
	while(UFSTAT0 & (1<<9));
 c1075e8:	e1a00000 	nop			; (mov r0, r0)
 c1075ec:	e59f3024 	ldr	r3, [pc, #36]	; c107618 <uart0_putchar+0x48>
 c1075f0:	e5933000 	ldr	r3, [r3]
 c1075f4:	e2033c02 	and	r3, r3, #512	; 0x200
 c1075f8:	e3530000 	cmp	r3, #0
 c1075fc:	1afffffa 	bne	c1075ec <uart0_putchar+0x1c>
    UTXH0 = ch;
 c107600:	e59f3014 	ldr	r3, [pc, #20]	; c10761c <uart0_putchar+0x4c>
 c107604:	e55b200d 	ldrb	r2, [fp, #-13]
 c107608:	e5832000 	str	r2, [r3]
}
 c10760c:	e24bd00c 	sub	sp, fp, #12
 c107610:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107614:	e12fff1e 	bx	lr
 c107618:	01d00018 	.word	0x01d00018
 c10761c:	01d00020 	.word	0x01d00020

0c107620 <uart0_getchar>:

char uart0_getchar( void )
{
 c107620:	e1a0c00d 	mov	ip, sp
 c107624:	e92dd800 	push	{fp, ip, lr, pc}
 c107628:	e24cb004 	sub	fp, ip, #4
    while((UFSTAT0 & 0xF) == 0);
 c10762c:	e1a00000 	nop			; (mov r0, r0)
 c107630:	e59f3028 	ldr	r3, [pc, #40]	; c107660 <uart0_getchar+0x40>
 c107634:	e5933000 	ldr	r3, [r3]
 c107638:	e203300f 	and	r3, r3, #15
 c10763c:	e3530000 	cmp	r3, #0
 c107640:	0afffffa 	beq	c107630 <uart0_getchar+0x10>
    return URXH0;
 c107644:	e59f3018 	ldr	r3, [pc, #24]	; c107664 <uart0_getchar+0x44>
 c107648:	e5933000 	ldr	r3, [r3]
 c10764c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c107650:	e1a00003 	mov	r0, r3
 c107654:	e24bd00c 	sub	sp, fp, #12
 c107658:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10765c:	e12fff1e 	bx	lr
 c107660:	01d00018 	.word	0x01d00018
 c107664:	01d00024 	.word	0x01d00024

0c107668 <uart0_puts>:

void uart0_puts( char *s )
{
 c107668:	e1a0c00d 	mov	ip, sp
 c10766c:	e92dd800 	push	{fp, ip, lr, pc}
 c107670:	e24cb004 	sub	fp, ip, #4
 c107674:	e24dd010 	sub	sp, sp, #16
 c107678:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i=0;
 c10767c:	e3a03000 	mov	r3, #0
 c107680:	e50b3010 	str	r3, [fp, #-16]
    while(s[i] != '\0'){
 c107684:	ea000008 	b	c1076ac <uart0_puts+0x44>
    	uart0_putchar(s[i++]);
 c107688:	e51b3010 	ldr	r3, [fp, #-16]
 c10768c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c107690:	e0823003 	add	r3, r2, r3
 c107694:	e5d33000 	ldrb	r3, [r3]
 c107698:	e51b2010 	ldr	r2, [fp, #-16]
 c10769c:	e2822001 	add	r2, r2, #1
 c1076a0:	e50b2010 	str	r2, [fp, #-16]
 c1076a4:	e1a00003 	mov	r0, r3
 c1076a8:	ebffffc8 	bl	c1075d0 <uart0_putchar>
}

void uart0_puts( char *s )
{
	int i=0;
    while(s[i] != '\0'){
 c1076ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1076b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1076b4:	e0823003 	add	r3, r2, r3
 c1076b8:	e5d33000 	ldrb	r3, [r3]
 c1076bc:	e3530000 	cmp	r3, #0
 c1076c0:	1afffff0 	bne	c107688 <uart0_puts+0x20>
    	uart0_putchar(s[i++]);
    }
}
 c1076c4:	e24bd00c 	sub	sp, fp, #12
 c1076c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1076cc:	e12fff1e 	bx	lr

0c1076d0 <uart0_putint>:

void uart0_putint( int32 i )
{
 c1076d0:	e1a0c00d 	mov	ip, sp
 c1076d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1076d8:	e24cb004 	sub	fp, ip, #4
 c1076dc:	e24dd020 	sub	sp, sp, #32
 c1076e0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
	char buf[11 + 1];
	char *p = buf + 11;
 c1076e4:	e24b3020 	sub	r3, fp, #32
 c1076e8:	e283300b 	add	r3, r3, #11
 c1076ec:	e50b3010 	str	r3, [fp, #-16]
	uint8 c;
	boolean neg = (i<0);
 c1076f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1076f4:	e1a03fa3 	lsr	r3, r3, #31
 c1076f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	*p = '\0';
 c1076fc:	e51b3010 	ldr	r3, [fp, #-16]
 c107700:	e3a02000 	mov	r2, #0
 c107704:	e5c32000 	strb	r2, [r3]

	if(neg) i *= -1;
 c107708:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10770c:	e3530000 	cmp	r3, #0
 c107710:	0a000002 	beq	c107720 <uart0_putint+0x50>
 c107714:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c107718:	e2633000 	rsb	r3, r3, #0
 c10771c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	if(i == 0)*--p = '0';
 c107720:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c107724:	e3530000 	cmp	r3, #0
 c107728:	1a000022 	bne	c1077b8 <uart0_putint+0xe8>
 c10772c:	e51b3010 	ldr	r3, [fp, #-16]
 c107730:	e2433001 	sub	r3, r3, #1
 c107734:	e50b3010 	str	r3, [fp, #-16]
 c107738:	e51b3010 	ldr	r3, [fp, #-16]
 c10773c:	e3a02030 	mov	r2, #48	; 0x30
 c107740:	e5c32000 	strb	r2, [r3]
	while(i> 0){
 c107744:	ea00001b 	b	c1077b8 <uart0_putint+0xe8>
		c = i % 10;
 c107748:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c10774c:	e59f30a8 	ldr	r3, [pc, #168]	; c1077fc <uart0_putint+0x12c>
 c107750:	e0c32391 	smull	r2, r3, r1, r3
 c107754:	e1a02143 	asr	r2, r3, #2
 c107758:	e1a03fc1 	asr	r3, r1, #31
 c10775c:	e0632002 	rsb	r2, r3, r2
 c107760:	e1a03002 	mov	r3, r2
 c107764:	e1a03103 	lsl	r3, r3, #2
 c107768:	e0833002 	add	r3, r3, r2
 c10776c:	e1a03083 	lsl	r3, r3, #1
 c107770:	e0632001 	rsb	r2, r3, r1
 c107774:	e1a03002 	mov	r3, r2
 c107778:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		i = i / 10;
 c10777c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c107780:	e59f2074 	ldr	r2, [pc, #116]	; c1077fc <uart0_putint+0x12c>
 c107784:	e0c21293 	smull	r1, r2, r3, r2
 c107788:	e1a02142 	asr	r2, r2, #2
 c10778c:	e1a03fc3 	asr	r3, r3, #31
 c107790:	e0633002 	rsb	r3, r3, r2
 c107794:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		*--p = '0' + c;
 c107798:	e51b3010 	ldr	r3, [fp, #-16]
 c10779c:	e2433001 	sub	r3, r3, #1
 c1077a0:	e50b3010 	str	r3, [fp, #-16]
 c1077a4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c1077a8:	e2833030 	add	r3, r3, #48	; 0x30
 c1077ac:	e20320ff 	and	r2, r3, #255	; 0xff
 c1077b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1077b4:	e5c32000 	strb	r2, [r3]
	boolean neg = (i<0);
	*p = '\0';

	if(neg) i *= -1;
	if(i == 0)*--p = '0';
	while(i> 0){
 c1077b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1077bc:	e3530000 	cmp	r3, #0
 c1077c0:	caffffe0 	bgt	c107748 <uart0_putint+0x78>
		c = i % 10;
		i = i / 10;
		*--p = '0' + c;
	}

	if(neg) *--p = '-';
 c1077c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1077c8:	e3530000 	cmp	r3, #0
 c1077cc:	0a000005 	beq	c1077e8 <uart0_putint+0x118>
 c1077d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1077d4:	e2433001 	sub	r3, r3, #1
 c1077d8:	e50b3010 	str	r3, [fp, #-16]
 c1077dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1077e0:	e3a0202d 	mov	r2, #45	; 0x2d
 c1077e4:	e5c32000 	strb	r2, [r3]
	uart0_puts( p );
 c1077e8:	e51b0010 	ldr	r0, [fp, #-16]
 c1077ec:	ebffff9d 	bl	c107668 <uart0_puts>
}
 c1077f0:	e24bd00c 	sub	sp, fp, #12
 c1077f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1077f8:	e12fff1e 	bx	lr
 c1077fc:	66666667 	.word	0x66666667

0c107800 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c107800:	e1a0c00d 	mov	ip, sp
 c107804:	e92dd800 	push	{fp, ip, lr, pc}
 c107808:	e24cb004 	sub	fp, ip, #4
 c10780c:	e24dd018 	sub	sp, sp, #24
 c107810:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c107814:	e24b301c 	sub	r3, fp, #28
 c107818:	e2833008 	add	r3, r3, #8
 c10781c:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c107820:	e51b3010 	ldr	r3, [fp, #-16]
 c107824:	e3a02000 	mov	r2, #0
 c107828:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10782c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107830:	e20330ff 	and	r3, r3, #255	; 0xff
 c107834:	e203300f 	and	r3, r3, #15
 c107838:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10783c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107840:	e3530009 	cmp	r3, #9
 c107844:	8a000008 	bhi	c10786c <uart0_puthex+0x6c>
            *--p = '0' + c;
 c107848:	e51b3010 	ldr	r3, [fp, #-16]
 c10784c:	e2433001 	sub	r3, r3, #1
 c107850:	e50b3010 	str	r3, [fp, #-16]
 c107854:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107858:	e2833030 	add	r3, r3, #48	; 0x30
 c10785c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107860:	e51b3010 	ldr	r3, [fp, #-16]
 c107864:	e5c32000 	strb	r2, [r3]
 c107868:	ea000007 	b	c10788c <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c10786c:	e51b3010 	ldr	r3, [fp, #-16]
 c107870:	e2433001 	sub	r3, r3, #1
 c107874:	e50b3010 	str	r3, [fp, #-16]
 c107878:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10787c:	e2833057 	add	r3, r3, #87	; 0x57
 c107880:	e20320ff 	and	r2, r3, #255	; 0xff
 c107884:	e51b3010 	ldr	r3, [fp, #-16]
 c107888:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10788c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107890:	e1a03223 	lsr	r3, r3, #4
 c107894:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c107898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10789c:	e3530000 	cmp	r3, #0
 c1078a0:	1affffe1 	bne	c10782c <uart0_puthex+0x2c>

    uart0_puts( p );
 c1078a4:	e51b0010 	ldr	r0, [fp, #-16]
 c1078a8:	ebffff6e 	bl	c107668 <uart0_puts>
}
 c1078ac:	e24bd00c 	sub	sp, fp, #12
 c1078b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1078b4:	e12fff1e 	bx	lr

0c1078b8 <uart0_gets>:

void uart0_gets( char *s )
{
 c1078b8:	e1a0c00d 	mov	ip, sp
 c1078bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1078c0:	e24cb004 	sub	fp, ip, #4
 c1078c4:	e24dd008 	sub	sp, sp, #8
 c1078c8:	e50b0010 	str	r0, [fp, #-16]
    while((*s++ = uart0_getchar()) != '\n');
 c1078cc:	e1a00000 	nop			; (mov r0, r0)
 c1078d0:	ebffff52 	bl	c107620 <uart0_getchar>
 c1078d4:	e1a03000 	mov	r3, r0
 c1078d8:	e1a02003 	mov	r2, r3
 c1078dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1078e0:	e5c32000 	strb	r2, [r3]
 c1078e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1078e8:	e5d33000 	ldrb	r3, [r3]
 c1078ec:	e353000a 	cmp	r3, #10
 c1078f0:	03a03000 	moveq	r3, #0
 c1078f4:	13a03001 	movne	r3, #1
 c1078f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1078fc:	e51b2010 	ldr	r2, [fp, #-16]
 c107900:	e2822001 	add	r2, r2, #1
 c107904:	e50b2010 	str	r2, [fp, #-16]
 c107908:	e3530000 	cmp	r3, #0
 c10790c:	1affffef 	bne	c1078d0 <uart0_gets+0x18>
	*s = '\0';
 c107910:	e51b3010 	ldr	r3, [fp, #-16]
 c107914:	e3a02000 	mov	r2, #0
 c107918:	e5c32000 	strb	r2, [r3]
}
 c10791c:	e24bd00c 	sub	sp, fp, #12
 c107920:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107924:	e12fff1e 	bx	lr

0c107928 <uart0_getint>:

int32 uart0_getint( void )
{
 c107928:	e1a0c00d 	mov	ip, sp
 c10792c:	e92dd800 	push	{fp, ip, lr, pc}
 c107930:	e24cb004 	sub	fp, ip, #4
 c107934:	e24dd010 	sub	sp, sp, #16
    int32 result = 0;
 c107938:	e3a03000 	mov	r3, #0
 c10793c:	e50b3010 	str	r3, [fp, #-16]

    char ch;
    uint8 num;


    uint8 i = 0;
 c107940:	e3a03000 	mov	r3, #0
 c107944:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    int sign = 1;
 c107948:	e3a03001 	mov	r3, #1
 c10794c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if((ch = uart0_getchar()) == '-'){
 c107950:	ebffff32 	bl	c107620 <uart0_getchar>
 c107954:	e1a03000 	mov	r3, r0
 c107958:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c10795c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107960:	e353002d 	cmp	r3, #45	; 0x2d
 c107964:	1a000018 	bne	c1079cc <uart0_getint+0xa4>
    	ch = uart0_getchar();
 c107968:	ebffff2c 	bl	c107620 <uart0_getchar>
 c10796c:	e1a03000 	mov	r3, r0
 c107970:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    	sign = -1;
 c107974:	e3e03000 	mvn	r3, #0
 c107978:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    	i++;
 c10797c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c107980:	e2833001 	add	r3, r3, #1
 c107984:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    while(ch != '\n'){
 c107988:	ea00000f 	b	c1079cc <uart0_getint+0xa4>
    	num = ch - '0';
 c10798c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107990:	e2433030 	sub	r3, r3, #48	; 0x30
 c107994:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    	result *= 10;
 c107998:	e51b2010 	ldr	r2, [fp, #-16]
 c10799c:	e1a03002 	mov	r3, r2
 c1079a0:	e1a03103 	lsl	r3, r3, #2
 c1079a4:	e0833002 	add	r3, r3, r2
 c1079a8:	e1a03083 	lsl	r3, r3, #1
 c1079ac:	e50b3010 	str	r3, [fp, #-16]
    	result += num;
 c1079b0:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c1079b4:	e51b2010 	ldr	r2, [fp, #-16]
 c1079b8:	e0823003 	add	r3, r2, r3
 c1079bc:	e50b3010 	str	r3, [fp, #-16]
    	ch = uart0_getchar();
 c1079c0:	ebffff16 	bl	c107620 <uart0_getchar>
 c1079c4:	e1a03000 	mov	r3, r0
 c1079c8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    	ch = uart0_getchar();
    	sign = -1;
    	i++;
    }

    while(ch != '\n'){
 c1079cc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1079d0:	e353000a 	cmp	r3, #10
 c1079d4:	1affffec 	bne	c10798c <uart0_getint+0x64>
    	num = ch - '0';
    	result *= 10;
    	result += num;
    	ch = uart0_getchar();
    }
	result *= sign;
 c1079d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1079dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1079e0:	e0030392 	mul	r3, r2, r3
 c1079e4:	e50b3010 	str	r3, [fp, #-16]
    return result;
 c1079e8:	e51b3010 	ldr	r3, [fp, #-16]

}
 c1079ec:	e1a00003 	mov	r0, r3
 c1079f0:	e24bd00c 	sub	sp, fp, #12
 c1079f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1079f8:	e12fff1e 	bx	lr

0c1079fc <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c1079fc:	e1a0c00d 	mov	ip, sp
 c107a00:	e92dd800 	push	{fp, ip, lr, pc}
 c107a04:	e24cb004 	sub	fp, ip, #4
 c107a08:	e24dd008 	sub	sp, sp, #8
	int32 num = 0;
 c107a0c:	e3a03000 	mov	r3, #0
 c107a10:	e50b3010 	str	r3, [fp, #-16]
	char caracter;

	while((caracter = uart0_getchar()) != '\n'){
 c107a14:	ea00001a 	b	c107a84 <uart0_gethex+0x88>
		if (caracter - '0' < 10){
 c107a18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107a1c:	e2433030 	sub	r3, r3, #48	; 0x30
 c107a20:	e3530009 	cmp	r3, #9
 c107a24:	ca000006 	bgt	c107a44 <uart0_gethex+0x48>
			num = num*16 + (caracter - '0');
 c107a28:	e51b3010 	ldr	r3, [fp, #-16]
 c107a2c:	e1a02203 	lsl	r2, r3, #4
 c107a30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107a34:	e2433030 	sub	r3, r3, #48	; 0x30
 c107a38:	e0823003 	add	r3, r2, r3
 c107a3c:	e50b3010 	str	r3, [fp, #-16]
 c107a40:	ea00000f 	b	c107a84 <uart0_gethex+0x88>
		}
		else if(caracter<='Z'){
 c107a44:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107a48:	e353005a 	cmp	r3, #90	; 0x5a
 c107a4c:	8a000006 	bhi	c107a6c <uart0_gethex+0x70>
			num = num*16 + (caracter - 'A' + 10);
 c107a50:	e51b3010 	ldr	r3, [fp, #-16]
 c107a54:	e1a02203 	lsl	r2, r3, #4
 c107a58:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107a5c:	e2433037 	sub	r3, r3, #55	; 0x37
 c107a60:	e0823003 	add	r3, r2, r3
 c107a64:	e50b3010 	str	r3, [fp, #-16]
 c107a68:	ea000005 	b	c107a84 <uart0_gethex+0x88>
		}
		else{
			num = num*16 + (caracter - 'a' + 10);
 c107a6c:	e51b3010 	ldr	r3, [fp, #-16]
 c107a70:	e1a02203 	lsl	r2, r3, #4
 c107a74:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107a78:	e2433057 	sub	r3, r3, #87	; 0x57
 c107a7c:	e0823003 	add	r3, r2, r3
 c107a80:	e50b3010 	str	r3, [fp, #-16]
uint32 uart0_gethex( void )
{
	int32 num = 0;
	char caracter;

	while((caracter = uart0_getchar()) != '\n'){
 c107a84:	ebfffee5 	bl	c107620 <uart0_getchar>
 c107a88:	e1a03000 	mov	r3, r0
 c107a8c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c107a90:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107a94:	e353000a 	cmp	r3, #10
 c107a98:	1affffde 	bne	c107a18 <uart0_gethex+0x1c>
		else{
			num = num*16 + (caracter - 'a' + 10);
		}

	}
	return num;
 c107a9c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c107aa0:	e1a00003 	mov	r0, r3
 c107aa4:	e24bd00c 	sub	sp, fp, #12
 c107aa8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107aac:	e12fff1e 	bx	lr

0c107ab0 <adc_init>:
static uint8 state;

extern void isr_ADC_dummy( void );

void adc_init( void )
{
 c107ab0:	e1a0c00d 	mov	ip, sp
 c107ab4:	e92dd800 	push	{fp, ip, lr, pc}
 c107ab8:	e24cb004 	sub	fp, ip, #4
	ADCPSR = 19;
 c107abc:	e59f3014 	ldr	r3, [pc, #20]	; c107ad8 <adc_init+0x28>
 c107ac0:	e3a02013 	mov	r2, #19
 c107ac4:	e5832000 	str	r2, [r3]
    adc_off();
 c107ac8:	eb000014 	bl	c107b20 <adc_off>
}
 c107acc:	e24bd00c 	sub	sp, fp, #12
 c107ad0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107ad4:	e12fff1e 	bx	lr
 c107ad8:	01d40004 	.word	0x01d40004

0c107adc <adc_on>:

void adc_on( void )
{
 c107adc:	e1a0c00d 	mov	ip, sp
 c107ae0:	e92dd800 	push	{fp, ip, lr, pc}
 c107ae4:	e24cb004 	sub	fp, ip, #4
    ADCCON &= ~(1<<5);
 c107ae8:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c107aec:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c107af0:	e5922000 	ldr	r2, [r2]
 c107af4:	e3c22020 	bic	r2, r2, #32
 c107af8:	e5832000 	str	r2, [r3]
    sw_delay_ms( 10 );
 c107afc:	e3a0000a 	mov	r0, #10
 c107b00:	ebfffaec 	bl	c1066b8 <sw_delay_ms>
    state = ON;
 c107b04:	e59f3010 	ldr	r3, [pc, #16]	; c107b1c <adc_on+0x40>
 c107b08:	e3a02001 	mov	r2, #1
 c107b0c:	e5c32000 	strb	r2, [r3]
}
 c107b10:	e24bd00c 	sub	sp, fp, #12
 c107b14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107b18:	e12fff1e 	bx	lr
 c107b1c:	0c10a5b2 	.word	0x0c10a5b2

0c107b20 <adc_off>:

void adc_off( void )
{
 c107b20:	e1a0c00d 	mov	ip, sp
 c107b24:	e92dd800 	push	{fp, ip, lr, pc}
 c107b28:	e24cb004 	sub	fp, ip, #4
	ADCCON |= (1<<5);
 c107b2c:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c107b30:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c107b34:	e5922000 	ldr	r2, [r2]
 c107b38:	e3822020 	orr	r2, r2, #32
 c107b3c:	e5832000 	str	r2, [r3]
	state = OFF;
 c107b40:	e59f3010 	ldr	r3, [pc, #16]	; c107b58 <adc_off+0x38>
 c107b44:	e3a02000 	mov	r2, #0
 c107b48:	e5c32000 	strb	r2, [r3]
}
 c107b4c:	e24bd00c 	sub	sp, fp, #12
 c107b50:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107b54:	e12fff1e 	bx	lr
 c107b58:	0c10a5b2 	.word	0x0c10a5b2

0c107b5c <adc_status>:

uint8 adc_status( void )
{
 c107b5c:	e1a0c00d 	mov	ip, sp
 c107b60:	e92dd800 	push	{fp, ip, lr, pc}
 c107b64:	e24cb004 	sub	fp, ip, #4
    return state;
 c107b68:	e59f3010 	ldr	r3, [pc, #16]	; c107b80 <adc_status+0x24>
 c107b6c:	e5d33000 	ldrb	r3, [r3]
}
 c107b70:	e1a00003 	mov	r0, r3
 c107b74:	e24bd00c 	sub	sp, fp, #12
 c107b78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107b7c:	e12fff1e 	bx	lr
 c107b80:	0c10a5b2 	.word	0x0c10a5b2

0c107b84 <adc_getSample>:

uint16 adc_getSample( uint8 ch )
{
 c107b84:	e1a0c00d 	mov	ip, sp
 c107b88:	e92dd800 	push	{fp, ip, lr, pc}
 c107b8c:	e24cb004 	sub	fp, ip, #4
 c107b90:	e24dd010 	sub	sp, sp, #16
 c107b94:	e1a03000 	mov	r3, r0
 c107b98:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    uint32 sample;
    uint8 i;

    ADCCON = ((ADCCON &~(7<<2)) | (ch<<2) );
 c107b9c:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c107ba0:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c107ba4:	e5922000 	ldr	r2, [r2]
 c107ba8:	e3c2101c 	bic	r1, r2, #28
 c107bac:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c107bb0:	e1a02102 	lsl	r2, r2, #2
 c107bb4:	e1812002 	orr	r2, r1, r2
 c107bb8:	e5832000 	str	r2, [r3]
    sw_delay_ms( 10 );
 c107bbc:	e3a0000a 	mov	r0, #10
 c107bc0:	ebfffabc 	bl	c1066b8 <sw_delay_ms>
    for( i=0, sample=0; i<5; i++ )
 c107bc4:	e3a03000 	mov	r3, #0
 c107bc8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c107bcc:	e3a03000 	mov	r3, #0
 c107bd0:	e50b3010 	str	r3, [fp, #-16]
 c107bd4:	ea00001b 	b	c107c48 <adc_getSample+0xc4>
    {
        ADCCON |= (1<<0);
 c107bd8:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c107bdc:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c107be0:	e5922000 	ldr	r2, [r2]
 c107be4:	e3822001 	orr	r2, r2, #1
 c107be8:	e5832000 	str	r2, [r3]
        while(ADCCON & (1));
 c107bec:	e1a00000 	nop			; (mov r0, r0)
 c107bf0:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c107bf4:	e5933000 	ldr	r3, [r3]
 c107bf8:	e2033001 	and	r3, r3, #1
 c107bfc:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c00:	e3530000 	cmp	r3, #0
 c107c04:	1afffff9 	bne	c107bf0 <adc_getSample+0x6c>
        while(!(ADCCON & (1 << 6)));
 c107c08:	e1a00000 	nop			; (mov r0, r0)
 c107c0c:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c107c10:	e5933000 	ldr	r3, [r3]
 c107c14:	e2033040 	and	r3, r3, #64	; 0x40
 c107c18:	e3530000 	cmp	r3, #0
 c107c1c:	0afffffa 	beq	c107c0c <adc_getSample+0x88>
        sample += ADCDAT & 0x3ff;
 c107c20:	e59f3054 	ldr	r3, [pc, #84]	; c107c7c <adc_getSample+0xf8>
 c107c24:	e5933000 	ldr	r3, [r3]
 c107c28:	e1a03b03 	lsl	r3, r3, #22
 c107c2c:	e1a03b23 	lsr	r3, r3, #22
 c107c30:	e51b2010 	ldr	r2, [fp, #-16]
 c107c34:	e0823003 	add	r3, r2, r3
 c107c38:	e50b3010 	str	r3, [fp, #-16]
    uint32 sample;
    uint8 i;

    ADCCON = ((ADCCON &~(7<<2)) | (ch<<2) );
    sw_delay_ms( 10 );
    for( i=0, sample=0; i<5; i++ )
 c107c3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107c40:	e2833001 	add	r3, r3, #1
 c107c44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c107c48:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107c4c:	e3530004 	cmp	r3, #4
 c107c50:	9affffe0 	bls	c107bd8 <adc_getSample+0x54>
        ADCCON |= (1<<0);
        while(ADCCON & (1));
        while(!(ADCCON & (1 << 6)));
        sample += ADCDAT & 0x3ff;
    }
    return sample / 5;
 c107c54:	e51b2010 	ldr	r2, [fp, #-16]
 c107c58:	e59f3020 	ldr	r3, [pc, #32]	; c107c80 <adc_getSample+0xfc>
 c107c5c:	e0831392 	umull	r1, r3, r2, r3
 c107c60:	e1a03123 	lsr	r3, r3, #2
 c107c64:	e1a03803 	lsl	r3, r3, #16
 c107c68:	e1a03823 	lsr	r3, r3, #16
}
 c107c6c:	e1a00003 	mov	r0, r3
 c107c70:	e24bd00c 	sub	sp, fp, #12
 c107c74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107c78:	e12fff1e 	bx	lr
 c107c7c:	01d40008 	.word	0x01d40008
 c107c80:	cccccccd 	.word	0xcccccccd

0c107c84 <adc_open>:

void adc_open( void (*isr)(void) )
{
 c107c84:	e1a0c00d 	mov	ip, sp
 c107c88:	e92dd800 	push	{fp, ip, lr, pc}
 c107c8c:	e24cb004 	sub	fp, ip, #4
 c107c90:	e24dd008 	sub	sp, sp, #8
 c107c94:	e50b0010 	str	r0, [fp, #-16]
    pISR_ADC   = isr;
 c107c98:	e59f3030 	ldr	r3, [pc, #48]	; c107cd0 <adc_open+0x4c>
 c107c9c:	e51b2010 	ldr	r2, [fp, #-16]
 c107ca0:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_ADC;
 c107ca4:	e59f3028 	ldr	r3, [pc, #40]	; c107cd4 <adc_open+0x50>
 c107ca8:	e3a02001 	mov	r2, #1
 c107cac:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_ADC);
 c107cb0:	e59f3020 	ldr	r3, [pc, #32]	; c107cd8 <adc_open+0x54>
 c107cb4:	e59f201c 	ldr	r2, [pc, #28]	; c107cd8 <adc_open+0x54>
 c107cb8:	e5922000 	ldr	r2, [r2]
 c107cbc:	e3c22341 	bic	r2, r2, #67108865	; 0x4000001
 c107cc0:	e5832000 	str	r2, [r3]
}
 c107cc4:	e24bd00c 	sub	sp, fp, #12
 c107cc8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107ccc:	e12fff1e 	bx	lr
 c107cd0:	0c7fff20 	.word	0x0c7fff20
 c107cd4:	01e00024 	.word	0x01e00024
 c107cd8:	01e0000c 	.word	0x01e0000c

0c107cdc <adc_close>:

void adc_close( void )
{
 c107cdc:	e1a0c00d 	mov	ip, sp
 c107ce0:	e92dd800 	push	{fp, ip, lr, pc}
 c107ce4:	e24cb004 	sub	fp, ip, #4
    INTMSK |= (BIT_ADC);
 c107ce8:	e59f3024 	ldr	r3, [pc, #36]	; c107d14 <adc_close+0x38>
 c107cec:	e59f2020 	ldr	r2, [pc, #32]	; c107d14 <adc_close+0x38>
 c107cf0:	e5922000 	ldr	r2, [r2]
 c107cf4:	e3822001 	orr	r2, r2, #1
 c107cf8:	e5832000 	str	r2, [r3]
    pISR_ADC = isr_ADC_dummy;
 c107cfc:	e59f3014 	ldr	r3, [pc, #20]	; c107d18 <adc_close+0x3c>
 c107d00:	e59f2014 	ldr	r2, [pc, #20]	; c107d1c <adc_close+0x40>
 c107d04:	e5832000 	str	r2, [r3]
}
 c107d08:	e24bd00c 	sub	sp, fp, #12
 c107d0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107d10:	e12fff1e 	bx	lr
 c107d14:	01e0000c 	.word	0x01e0000c
 c107d18:	0c7fff20 	.word	0x0c7fff20
 c107d1c:	0c1059b0 	.word	0x0c1059b0

0c107d20 <__aeabi_uidiv>:
 c107d20:	e2512001 	subs	r2, r1, #1
 c107d24:	012fff1e 	bxeq	lr
 c107d28:	3a000036 	bcc	c107e08 <__aeabi_uidiv+0xe8>
 c107d2c:	e1500001 	cmp	r0, r1
 c107d30:	9a000022 	bls	c107dc0 <__aeabi_uidiv+0xa0>
 c107d34:	e1110002 	tst	r1, r2
 c107d38:	0a000023 	beq	c107dcc <__aeabi_uidiv+0xac>
 c107d3c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c107d40:	01a01181 	lsleq	r1, r1, #3
 c107d44:	03a03008 	moveq	r3, #8
 c107d48:	13a03001 	movne	r3, #1
 c107d4c:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c107d50:	31510000 	cmpcc	r1, r0
 c107d54:	31a01201 	lslcc	r1, r1, #4
 c107d58:	31a03203 	lslcc	r3, r3, #4
 c107d5c:	3afffffa 	bcc	c107d4c <__aeabi_uidiv+0x2c>
 c107d60:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c107d64:	31510000 	cmpcc	r1, r0
 c107d68:	31a01081 	lslcc	r1, r1, #1
 c107d6c:	31a03083 	lslcc	r3, r3, #1
 c107d70:	3afffffa 	bcc	c107d60 <__aeabi_uidiv+0x40>
 c107d74:	e3a02000 	mov	r2, #0
 c107d78:	e1500001 	cmp	r0, r1
 c107d7c:	20400001 	subcs	r0, r0, r1
 c107d80:	21822003 	orrcs	r2, r2, r3
 c107d84:	e15000a1 	cmp	r0, r1, lsr #1
 c107d88:	204000a1 	subcs	r0, r0, r1, lsr #1
 c107d8c:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c107d90:	e1500121 	cmp	r0, r1, lsr #2
 c107d94:	20400121 	subcs	r0, r0, r1, lsr #2
 c107d98:	21822123 	orrcs	r2, r2, r3, lsr #2
 c107d9c:	e15001a1 	cmp	r0, r1, lsr #3
 c107da0:	204001a1 	subcs	r0, r0, r1, lsr #3
 c107da4:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c107da8:	e3500000 	cmp	r0, #0
 c107dac:	11b03223 	lsrsne	r3, r3, #4
 c107db0:	11a01221 	lsrne	r1, r1, #4
 c107db4:	1affffef 	bne	c107d78 <__aeabi_uidiv+0x58>
 c107db8:	e1a00002 	mov	r0, r2
 c107dbc:	e12fff1e 	bx	lr
 c107dc0:	03a00001 	moveq	r0, #1
 c107dc4:	13a00000 	movne	r0, #0
 c107dc8:	e12fff1e 	bx	lr
 c107dcc:	e3510801 	cmp	r1, #65536	; 0x10000
 c107dd0:	21a01821 	lsrcs	r1, r1, #16
 c107dd4:	23a02010 	movcs	r2, #16
 c107dd8:	33a02000 	movcc	r2, #0
 c107ddc:	e3510c01 	cmp	r1, #256	; 0x100
 c107de0:	21a01421 	lsrcs	r1, r1, #8
 c107de4:	22822008 	addcs	r2, r2, #8
 c107de8:	e3510010 	cmp	r1, #16
 c107dec:	21a01221 	lsrcs	r1, r1, #4
 c107df0:	22822004 	addcs	r2, r2, #4
 c107df4:	e3510004 	cmp	r1, #4
 c107df8:	82822003 	addhi	r2, r2, #3
 c107dfc:	908220a1 	addls	r2, r2, r1, lsr #1
 c107e00:	e1a00230 	lsr	r0, r0, r2
 c107e04:	e12fff1e 	bx	lr
 c107e08:	e3500000 	cmp	r0, #0
 c107e0c:	13e00000 	mvnne	r0, #0
 c107e10:	ea000059 	b	c107f7c <__aeabi_idiv0>

0c107e14 <__aeabi_uidivmod>:
 c107e14:	e3510000 	cmp	r1, #0
 c107e18:	0afffffa 	beq	c107e08 <__aeabi_uidiv+0xe8>
 c107e1c:	e92d4003 	push	{r0, r1, lr}
 c107e20:	ebffffbe 	bl	c107d20 <__aeabi_uidiv>
 c107e24:	e8bd4006 	pop	{r1, r2, lr}
 c107e28:	e0030092 	mul	r3, r2, r0
 c107e2c:	e0411003 	sub	r1, r1, r3
 c107e30:	e12fff1e 	bx	lr

0c107e34 <__aeabi_idiv>:
 c107e34:	e3510000 	cmp	r1, #0
 c107e38:	0a000043 	beq	c107f4c <.divsi3_skip_div0_test+0x110>

0c107e3c <.divsi3_skip_div0_test>:
 c107e3c:	e020c001 	eor	ip, r0, r1
 c107e40:	42611000 	rsbmi	r1, r1, #0
 c107e44:	e2512001 	subs	r2, r1, #1
 c107e48:	0a000027 	beq	c107eec <.divsi3_skip_div0_test+0xb0>
 c107e4c:	e1b03000 	movs	r3, r0
 c107e50:	42603000 	rsbmi	r3, r0, #0
 c107e54:	e1530001 	cmp	r3, r1
 c107e58:	9a000026 	bls	c107ef8 <.divsi3_skip_div0_test+0xbc>
 c107e5c:	e1110002 	tst	r1, r2
 c107e60:	0a000028 	beq	c107f08 <.divsi3_skip_div0_test+0xcc>
 c107e64:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c107e68:	01a01181 	lsleq	r1, r1, #3
 c107e6c:	03a02008 	moveq	r2, #8
 c107e70:	13a02001 	movne	r2, #1
 c107e74:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c107e78:	31510003 	cmpcc	r1, r3
 c107e7c:	31a01201 	lslcc	r1, r1, #4
 c107e80:	31a02202 	lslcc	r2, r2, #4
 c107e84:	3afffffa 	bcc	c107e74 <.divsi3_skip_div0_test+0x38>
 c107e88:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c107e8c:	31510003 	cmpcc	r1, r3
 c107e90:	31a01081 	lslcc	r1, r1, #1
 c107e94:	31a02082 	lslcc	r2, r2, #1
 c107e98:	3afffffa 	bcc	c107e88 <.divsi3_skip_div0_test+0x4c>
 c107e9c:	e3a00000 	mov	r0, #0
 c107ea0:	e1530001 	cmp	r3, r1
 c107ea4:	20433001 	subcs	r3, r3, r1
 c107ea8:	21800002 	orrcs	r0, r0, r2
 c107eac:	e15300a1 	cmp	r3, r1, lsr #1
 c107eb0:	204330a1 	subcs	r3, r3, r1, lsr #1
 c107eb4:	218000a2 	orrcs	r0, r0, r2, lsr #1
 c107eb8:	e1530121 	cmp	r3, r1, lsr #2
 c107ebc:	20433121 	subcs	r3, r3, r1, lsr #2
 c107ec0:	21800122 	orrcs	r0, r0, r2, lsr #2
 c107ec4:	e15301a1 	cmp	r3, r1, lsr #3
 c107ec8:	204331a1 	subcs	r3, r3, r1, lsr #3
 c107ecc:	218001a2 	orrcs	r0, r0, r2, lsr #3
 c107ed0:	e3530000 	cmp	r3, #0
 c107ed4:	11b02222 	lsrsne	r2, r2, #4
 c107ed8:	11a01221 	lsrne	r1, r1, #4
 c107edc:	1affffef 	bne	c107ea0 <.divsi3_skip_div0_test+0x64>
 c107ee0:	e35c0000 	cmp	ip, #0
 c107ee4:	42600000 	rsbmi	r0, r0, #0
 c107ee8:	e12fff1e 	bx	lr
 c107eec:	e13c0000 	teq	ip, r0
 c107ef0:	42600000 	rsbmi	r0, r0, #0
 c107ef4:	e12fff1e 	bx	lr
 c107ef8:	33a00000 	movcc	r0, #0
 c107efc:	01a00fcc 	asreq	r0, ip, #31
 c107f00:	03800001 	orreq	r0, r0, #1
 c107f04:	e12fff1e 	bx	lr
 c107f08:	e3510801 	cmp	r1, #65536	; 0x10000
 c107f0c:	21a01821 	lsrcs	r1, r1, #16
 c107f10:	23a02010 	movcs	r2, #16
 c107f14:	33a02000 	movcc	r2, #0
 c107f18:	e3510c01 	cmp	r1, #256	; 0x100
 c107f1c:	21a01421 	lsrcs	r1, r1, #8
 c107f20:	22822008 	addcs	r2, r2, #8
 c107f24:	e3510010 	cmp	r1, #16
 c107f28:	21a01221 	lsrcs	r1, r1, #4
 c107f2c:	22822004 	addcs	r2, r2, #4
 c107f30:	e3510004 	cmp	r1, #4
 c107f34:	82822003 	addhi	r2, r2, #3
 c107f38:	908220a1 	addls	r2, r2, r1, lsr #1
 c107f3c:	e35c0000 	cmp	ip, #0
 c107f40:	e1a00233 	lsr	r0, r3, r2
 c107f44:	42600000 	rsbmi	r0, r0, #0
 c107f48:	e12fff1e 	bx	lr
 c107f4c:	e3500000 	cmp	r0, #0
 c107f50:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 c107f54:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 c107f58:	ea000007 	b	c107f7c <__aeabi_idiv0>

0c107f5c <__aeabi_idivmod>:
 c107f5c:	e3510000 	cmp	r1, #0
 c107f60:	0afffff9 	beq	c107f4c <.divsi3_skip_div0_test+0x110>
 c107f64:	e92d4003 	push	{r0, r1, lr}
 c107f68:	ebffffb3 	bl	c107e3c <.divsi3_skip_div0_test>
 c107f6c:	e8bd4006 	pop	{r1, r2, lr}
 c107f70:	e0030092 	mul	r3, r2, r0
 c107f74:	e0411003 	sub	r1, r1, r3
 c107f78:	e12fff1e 	bx	lr

0c107f7c <__aeabi_idiv0>:
 c107f7c:	e12fff1e 	bx	lr

0c107f80 <__aeabi_uldivmod>:
 c107f80:	e3530000 	cmp	r3, #0
 c107f84:	03520000 	cmpeq	r2, #0
 c107f88:	1a000004 	bne	c107fa0 <__aeabi_uldivmod+0x20>
 c107f8c:	e3510000 	cmp	r1, #0
 c107f90:	03500000 	cmpeq	r0, #0
 c107f94:	13e01000 	mvnne	r1, #0
 c107f98:	13e00000 	mvnne	r0, #0
 c107f9c:	eafffff6 	b	c107f7c <__aeabi_idiv0>
 c107fa0:	e24dd008 	sub	sp, sp, #8
 c107fa4:	e92d6000 	push	{sp, lr}
 c107fa8:	eb000013 	bl	c107ffc <__gnu_uldivmod_helper>
 c107fac:	e59de004 	ldr	lr, [sp, #4]
 c107fb0:	e28dd008 	add	sp, sp, #8
 c107fb4:	e8bd000c 	pop	{r2, r3}
 c107fb8:	e12fff1e 	bx	lr

0c107fbc <__gnu_ldivmod_helper>:
 c107fbc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c107fc0:	e1a04002 	mov	r4, r2
 c107fc4:	e1a07003 	mov	r7, r3
 c107fc8:	e1a05000 	mov	r5, r0
 c107fcc:	e1a06001 	mov	r6, r1
 c107fd0:	eb000019 	bl	c10803c <__divdi3>
 c107fd4:	e0070790 	mul	r7, r0, r7
 c107fd8:	e0832490 	umull	r2, r3, r0, r4
 c107fdc:	e0247491 	mla	r4, r1, r4, r7
 c107fe0:	e0843003 	add	r3, r4, r3
 c107fe4:	e0555002 	subs	r5, r5, r2
 c107fe8:	e0c66003 	sbc	r6, r6, r3
 c107fec:	e59d3018 	ldr	r3, [sp, #24]
 c107ff0:	e8830060 	stm	r3, {r5, r6}
 c107ff4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c107ff8:	e12fff1e 	bx	lr

0c107ffc <__gnu_uldivmod_helper>:
 c107ffc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c108000:	e1a04002 	mov	r4, r2
 c108004:	e1a07003 	mov	r7, r3
 c108008:	e1a05000 	mov	r5, r0
 c10800c:	e1a06001 	mov	r6, r1
 c108010:	eb000133 	bl	c1084e4 <__udivdi3>
 c108014:	e0070790 	mul	r7, r0, r7
 c108018:	e0832490 	umull	r2, r3, r0, r4
 c10801c:	e0247491 	mla	r4, r1, r4, r7
 c108020:	e0843003 	add	r3, r4, r3
 c108024:	e0555002 	subs	r5, r5, r2
 c108028:	e0c66003 	sbc	r6, r6, r3
 c10802c:	e59d3018 	ldr	r3, [sp, #24]
 c108030:	e8830060 	stm	r3, {r5, r6}
 c108034:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c108038:	e12fff1e 	bx	lr

0c10803c <__divdi3>:
 c10803c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c108040:	e3510000 	cmp	r1, #0
 c108044:	e24dd014 	sub	sp, sp, #20
 c108048:	e1a0c003 	mov	ip, r3
 c10804c:	a3a07000 	movge	r7, #0
 c108050:	ba000094 	blt	c1082a8 <__divdi3+0x26c>
 c108054:	e35c0000 	cmp	ip, #0
 c108058:	ba00008e 	blt	c108298 <__divdi3+0x25c>
 c10805c:	e253a000 	subs	sl, r3, #0
 c108060:	e1a0b000 	mov	fp, r0
 c108064:	e1a08001 	mov	r8, r1
 c108068:	e1a09002 	mov	r9, r2
 c10806c:	e1a04002 	mov	r4, r2
 c108070:	e1a05000 	mov	r5, r0
 c108074:	e1a06001 	mov	r6, r1
 c108078:	1a00003e 	bne	c108178 <__divdi3+0x13c>
 c10807c:	e1520001 	cmp	r2, r1
 c108080:	9a00004c 	bls	c1081b8 <__divdi3+0x17c>
 c108084:	e1a00002 	mov	r0, r2
 c108088:	eb000222 	bl	c108918 <__clzsi2>
 c10808c:	e3500000 	cmp	r0, #0
 c108090:	12603020 	rsbne	r3, r0, #32
 c108094:	11a0333b 	lsrne	r3, fp, r3
 c108098:	11a04019 	lslne	r4, r9, r0
 c10809c:	11836018 	orrne	r6, r3, r8, lsl r0
 c1080a0:	e1a09824 	lsr	r9, r4, #16
 c1080a4:	11a0501b 	lslne	r5, fp, r0
 c1080a8:	e1a01009 	mov	r1, r9
 c1080ac:	e1a00006 	mov	r0, r6
 c1080b0:	ebffff1a 	bl	c107d20 <__aeabi_uidiv>
 c1080b4:	e1a01009 	mov	r1, r9
 c1080b8:	e1a0a000 	mov	sl, r0
 c1080bc:	e1a00006 	mov	r0, r6
 c1080c0:	ebffff53 	bl	c107e14 <__aeabi_uidivmod>
 c1080c4:	e1a08804 	lsl	r8, r4, #16
 c1080c8:	e1a08828 	lsr	r8, r8, #16
 c1080cc:	e0030a98 	mul	r3, r8, sl
 c1080d0:	e1a0b825 	lsr	fp, r5, #16
 c1080d4:	e18bb801 	orr	fp, fp, r1, lsl #16
 c1080d8:	e153000b 	cmp	r3, fp
 c1080dc:	9a000005 	bls	c1080f8 <__divdi3+0xbc>
 c1080e0:	e09bb004 	adds	fp, fp, r4
 c1080e4:	e24aa001 	sub	sl, sl, #1
 c1080e8:	2a000002 	bcs	c1080f8 <__divdi3+0xbc>
 c1080ec:	e153000b 	cmp	r3, fp
 c1080f0:	824aa001 	subhi	sl, sl, #1
 c1080f4:	808bb004 	addhi	fp, fp, r4
 c1080f8:	e063b00b 	rsb	fp, r3, fp
 c1080fc:	e1a01009 	mov	r1, r9
 c108100:	e1a0000b 	mov	r0, fp
 c108104:	ebffff05 	bl	c107d20 <__aeabi_uidiv>
 c108108:	e1a01009 	mov	r1, r9
 c10810c:	e1a06000 	mov	r6, r0
 c108110:	e1a0000b 	mov	r0, fp
 c108114:	ebffff3e 	bl	c107e14 <__aeabi_uidivmod>
 c108118:	e0080896 	mul	r8, r6, r8
 c10811c:	e1a00805 	lsl	r0, r5, #16
 c108120:	e1a05820 	lsr	r5, r0, #16
 c108124:	e1855801 	orr	r5, r5, r1, lsl #16
 c108128:	e1580005 	cmp	r8, r5
 c10812c:	9a000004 	bls	c108144 <__divdi3+0x108>
 c108130:	e0955004 	adds	r5, r5, r4
 c108134:	e2466001 	sub	r6, r6, #1
 c108138:	2a000001 	bcs	c108144 <__divdi3+0x108>
 c10813c:	e1580005 	cmp	r8, r5
 c108140:	82466001 	subhi	r6, r6, #1
 c108144:	e186680a 	orr	r6, r6, sl, lsl #16
 c108148:	e3a09000 	mov	r9, #0
 c10814c:	e3570000 	cmp	r7, #0
 c108150:	e1a03006 	mov	r3, r6
 c108154:	e1a04009 	mov	r4, r9
 c108158:	0a000001 	beq	c108164 <__divdi3+0x128>
 c10815c:	e2733000 	rsbs	r3, r3, #0
 c108160:	e2e44000 	rsc	r4, r4, #0
 c108164:	e1a00003 	mov	r0, r3
 c108168:	e1a01004 	mov	r1, r4
 c10816c:	e28dd014 	add	sp, sp, #20
 c108170:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c108174:	e12fff1e 	bx	lr
 c108178:	e15a0001 	cmp	sl, r1
 c10817c:	83a09000 	movhi	r9, #0
 c108180:	81a06009 	movhi	r6, r9
 c108184:	8afffff0 	bhi	c10814c <__divdi3+0x110>
 c108188:	e1a00003 	mov	r0, r3
 c10818c:	eb0001e1 	bl	c108918 <__clzsi2>
 c108190:	e2504000 	subs	r4, r0, #0
 c108194:	1a00007a 	bne	c108384 <__divdi3+0x348>
 c108198:	e15a0008 	cmp	sl, r8
 c10819c:	2159000b 	cmpcs	r9, fp
 c1081a0:	83a09000 	movhi	r9, #0
 c1081a4:	93a09001 	movls	r9, #1
 c1081a8:	93a06001 	movls	r6, #1
 c1081ac:	91a09004 	movls	r9, r4
 c1081b0:	81a06009 	movhi	r6, r9
 c1081b4:	eaffffe4 	b	c10814c <__divdi3+0x110>
 c1081b8:	e3520000 	cmp	r2, #0
 c1081bc:	1a000003 	bne	c1081d0 <__divdi3+0x194>
 c1081c0:	e3a00001 	mov	r0, #1
 c1081c4:	e1a01002 	mov	r1, r2
 c1081c8:	ebfffed4 	bl	c107d20 <__aeabi_uidiv>
 c1081cc:	e1a04000 	mov	r4, r0
 c1081d0:	e1a00004 	mov	r0, r4
 c1081d4:	eb0001cf 	bl	c108918 <__clzsi2>
 c1081d8:	e2503000 	subs	r3, r0, #0
 c1081dc:	1a000035 	bne	c1082b8 <__divdi3+0x27c>
 c1081e0:	e3a01001 	mov	r1, #1
 c1081e4:	e1a09804 	lsl	r9, r4, #16
 c1081e8:	e58d1008 	str	r1, [sp, #8]
 c1081ec:	e0646006 	rsb	r6, r4, r6
 c1081f0:	e1a08824 	lsr	r8, r4, #16
 c1081f4:	e1a09829 	lsr	r9, r9, #16
 c1081f8:	e1a01008 	mov	r1, r8
 c1081fc:	e1a00006 	mov	r0, r6
 c108200:	ebfffec6 	bl	c107d20 <__aeabi_uidiv>
 c108204:	e1a01008 	mov	r1, r8
 c108208:	e1a0a000 	mov	sl, r0
 c10820c:	e1a00006 	mov	r0, r6
 c108210:	ebfffeff 	bl	c107e14 <__aeabi_uidivmod>
 c108214:	e0030a99 	mul	r3, r9, sl
 c108218:	e1a0c825 	lsr	ip, r5, #16
 c10821c:	e18cb801 	orr	fp, ip, r1, lsl #16
 c108220:	e153000b 	cmp	r3, fp
 c108224:	9a000005 	bls	c108240 <__divdi3+0x204>
 c108228:	e09bb004 	adds	fp, fp, r4
 c10822c:	e24aa001 	sub	sl, sl, #1
 c108230:	2a000002 	bcs	c108240 <__divdi3+0x204>
 c108234:	e153000b 	cmp	r3, fp
 c108238:	824aa001 	subhi	sl, sl, #1
 c10823c:	808bb004 	addhi	fp, fp, r4
 c108240:	e063b00b 	rsb	fp, r3, fp
 c108244:	e1a01008 	mov	r1, r8
 c108248:	e1a0000b 	mov	r0, fp
 c10824c:	ebfffeb3 	bl	c107d20 <__aeabi_uidiv>
 c108250:	e1a01008 	mov	r1, r8
 c108254:	e1a06000 	mov	r6, r0
 c108258:	e1a0000b 	mov	r0, fp
 c10825c:	ebfffeec 	bl	c107e14 <__aeabi_uidivmod>
 c108260:	e0090996 	mul	r9, r6, r9
 c108264:	e1a00805 	lsl	r0, r5, #16
 c108268:	e1a05820 	lsr	r5, r0, #16
 c10826c:	e1855801 	orr	r5, r5, r1, lsl #16
 c108270:	e1590005 	cmp	r9, r5
 c108274:	9a000004 	bls	c10828c <__divdi3+0x250>
 c108278:	e0955004 	adds	r5, r5, r4
 c10827c:	e2466001 	sub	r6, r6, #1
 c108280:	2a000001 	bcs	c10828c <__divdi3+0x250>
 c108284:	e1590005 	cmp	r9, r5
 c108288:	82466001 	subhi	r6, r6, #1
 c10828c:	e186680a 	orr	r6, r6, sl, lsl #16
 c108290:	e59d9008 	ldr	r9, [sp, #8]
 c108294:	eaffffac 	b	c10814c <__divdi3+0x110>
 c108298:	e1e07007 	mvn	r7, r7
 c10829c:	e2722000 	rsbs	r2, r2, #0
 c1082a0:	e2e33000 	rsc	r3, r3, #0
 c1082a4:	eaffff6c 	b	c10805c <__divdi3+0x20>
 c1082a8:	e2700000 	rsbs	r0, r0, #0
 c1082ac:	e2e11000 	rsc	r1, r1, #0
 c1082b0:	e3e07000 	mvn	r7, #0
 c1082b4:	eaffff66 	b	c108054 <__divdi3+0x18>
 c1082b8:	e2638020 	rsb	r8, r3, #32
 c1082bc:	e1a0b835 	lsr	fp, r5, r8
 c1082c0:	e1a04314 	lsl	r4, r4, r3
 c1082c4:	e1a0a836 	lsr	sl, r6, r8
 c1082c8:	e18be316 	orr	lr, fp, r6, lsl r3
 c1082cc:	e1a08824 	lsr	r8, r4, #16
 c1082d0:	e1a0c804 	lsl	ip, r4, #16
 c1082d4:	e1a01008 	mov	r1, r8
 c1082d8:	e1a0000a 	mov	r0, sl
 c1082dc:	e1a0982c 	lsr	r9, ip, #16
 c1082e0:	e1a05315 	lsl	r5, r5, r3
 c1082e4:	e58de008 	str	lr, [sp, #8]
 c1082e8:	ebfffe8c 	bl	c107d20 <__aeabi_uidiv>
 c1082ec:	e1a01008 	mov	r1, r8
 c1082f0:	e1a0b000 	mov	fp, r0
 c1082f4:	e1a0000a 	mov	r0, sl
 c1082f8:	ebfffec5 	bl	c107e14 <__aeabi_uidivmod>
 c1082fc:	e0030b99 	mul	r3, r9, fp
 c108300:	e59d2008 	ldr	r2, [sp, #8]
 c108304:	e1a06822 	lsr	r6, r2, #16
 c108308:	e1866801 	orr	r6, r6, r1, lsl #16
 c10830c:	e1530006 	cmp	r3, r6
 c108310:	9a000002 	bls	c108320 <__divdi3+0x2e4>
 c108314:	e0966004 	adds	r6, r6, r4
 c108318:	e24bb001 	sub	fp, fp, #1
 c10831c:	3a00006c 	bcc	c1084d4 <__divdi3+0x498>
 c108320:	e0636006 	rsb	r6, r3, r6
 c108324:	e1a01008 	mov	r1, r8
 c108328:	e1a00006 	mov	r0, r6
 c10832c:	ebfffe7b 	bl	c107d20 <__aeabi_uidiv>
 c108330:	e1a01008 	mov	r1, r8
 c108334:	e1a0a000 	mov	sl, r0
 c108338:	e1a00006 	mov	r0, r6
 c10833c:	ebfffeb4 	bl	c107e14 <__aeabi_uidivmod>
 c108340:	e0030a99 	mul	r3, r9, sl
 c108344:	e59d2008 	ldr	r2, [sp, #8]
 c108348:	e1a06802 	lsl	r6, r2, #16
 c10834c:	e1a00826 	lsr	r0, r6, #16
 c108350:	e1806801 	orr	r6, r0, r1, lsl #16
 c108354:	e1530006 	cmp	r3, r6
 c108358:	9a000005 	bls	c108374 <__divdi3+0x338>
 c10835c:	e0966004 	adds	r6, r6, r4
 c108360:	e24aa001 	sub	sl, sl, #1
 c108364:	2a000002 	bcs	c108374 <__divdi3+0x338>
 c108368:	e1530006 	cmp	r3, r6
 c10836c:	824aa001 	subhi	sl, sl, #1
 c108370:	80866004 	addhi	r6, r6, r4
 c108374:	e0636006 	rsb	r6, r3, r6
 c108378:	e18a380b 	orr	r3, sl, fp, lsl #16
 c10837c:	e58d3008 	str	r3, [sp, #8]
 c108380:	eaffff9c 	b	c1081f8 <__divdi3+0x1bc>
 c108384:	e2641020 	rsb	r1, r4, #32
 c108388:	e1a00139 	lsr	r0, r9, r1
 c10838c:	e1a0213b 	lsr	r2, fp, r1
 c108390:	e180a41a 	orr	sl, r0, sl, lsl r4
 c108394:	e1a06138 	lsr	r6, r8, r1
 c108398:	e1828418 	orr	r8, r2, r8, lsl r4
 c10839c:	e1a0380a 	lsl	r3, sl, #16
 c1083a0:	e1a0b82a 	lsr	fp, sl, #16
 c1083a4:	e1a0e823 	lsr	lr, r3, #16
 c1083a8:	e1a0100b 	mov	r1, fp
 c1083ac:	e1a00006 	mov	r0, r6
 c1083b0:	e58d8008 	str	r8, [sp, #8]
 c1083b4:	e58de00c 	str	lr, [sp, #12]
 c1083b8:	ebfffe58 	bl	c107d20 <__aeabi_uidiv>
 c1083bc:	e1a0100b 	mov	r1, fp
 c1083c0:	e1a08000 	mov	r8, r0
 c1083c4:	e1a00006 	mov	r0, r6
 c1083c8:	ebfffe91 	bl	c107e14 <__aeabi_uidivmod>
 c1083cc:	e59dc00c 	ldr	ip, [sp, #12]
 c1083d0:	e002089c 	mul	r2, ip, r8
 c1083d4:	e59d3008 	ldr	r3, [sp, #8]
 c1083d8:	e1a06823 	lsr	r6, r3, #16
 c1083dc:	e1861801 	orr	r1, r6, r1, lsl #16
 c1083e0:	e1520001 	cmp	r2, r1
 c1083e4:	e1a03419 	lsl	r3, r9, r4
 c1083e8:	9a000002 	bls	c1083f8 <__divdi3+0x3bc>
 c1083ec:	e091100a 	adds	r1, r1, sl
 c1083f0:	e2488001 	sub	r8, r8, #1
 c1083f4:	3a000032 	bcc	c1084c4 <__divdi3+0x488>
 c1083f8:	e0629001 	rsb	r9, r2, r1
 c1083fc:	e1a00009 	mov	r0, r9
 c108400:	e1a0100b 	mov	r1, fp
 c108404:	e58d3004 	str	r3, [sp, #4]
 c108408:	ebfffe44 	bl	c107d20 <__aeabi_uidiv>
 c10840c:	e1a0100b 	mov	r1, fp
 c108410:	e1a06000 	mov	r6, r0
 c108414:	e1a00009 	mov	r0, r9
 c108418:	ebfffe7d 	bl	c107e14 <__aeabi_uidivmod>
 c10841c:	e59d000c 	ldr	r0, [sp, #12]
 c108420:	e0020690 	mul	r2, r0, r6
 c108424:	e59d3008 	ldr	r3, [sp, #8]
 c108428:	e1a0c803 	lsl	ip, r3, #16
 c10842c:	e1a0982c 	lsr	r9, ip, #16
 c108430:	e1890801 	orr	r0, r9, r1, lsl #16
 c108434:	e1520000 	cmp	r2, r0
 c108438:	e59d3004 	ldr	r3, [sp, #4]
 c10843c:	9a000002 	bls	c10844c <__divdi3+0x410>
 c108440:	e090000a 	adds	r0, r0, sl
 c108444:	e2466001 	sub	r6, r6, #1
 c108448:	3a000019 	bcc	c1084b4 <__divdi3+0x478>
 c10844c:	e062e000 	rsb	lr, r2, r0
 c108450:	e1866808 	orr	r6, r6, r8, lsl #16
 c108454:	e1a02826 	lsr	r2, r6, #16
 c108458:	e1a01823 	lsr	r1, r3, #16
 c10845c:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c108460:	e1c39801 	bic	r9, r3, r1, lsl #16
 c108464:	e003099c 	mul	r3, ip, r9
 c108468:	e0090992 	mul	r9, r2, r9
 c10846c:	e00c0c91 	mul	ip, r1, ip
 c108470:	e0010192 	mul	r1, r2, r1
 c108474:	e099c00c 	adds	ip, r9, ip
 c108478:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c10847c:	e093380c 	adds	r3, r3, ip, lsl #16
 c108480:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c108484:	e15e0001 	cmp	lr, r1
 c108488:	3a000006 	bcc	c1084a8 <__divdi3+0x46c>
 c10848c:	13a02000 	movne	r2, #0
 c108490:	03a02001 	moveq	r2, #1
 c108494:	e1530415 	cmp	r3, r5, lsl r4
 c108498:	93a09000 	movls	r9, #0
 c10849c:	82029001 	andhi	r9, r2, #1
 c1084a0:	e3590000 	cmp	r9, #0
 c1084a4:	0affff28 	beq	c10814c <__divdi3+0x110>
 c1084a8:	e2466001 	sub	r6, r6, #1
 c1084ac:	e3a09000 	mov	r9, #0
 c1084b0:	eaffff25 	b	c10814c <__divdi3+0x110>
 c1084b4:	e1520000 	cmp	r2, r0
 c1084b8:	82466001 	subhi	r6, r6, #1
 c1084bc:	8080000a 	addhi	r0, r0, sl
 c1084c0:	eaffffe1 	b	c10844c <__divdi3+0x410>
 c1084c4:	e1520001 	cmp	r2, r1
 c1084c8:	82488001 	subhi	r8, r8, #1
 c1084cc:	8081100a 	addhi	r1, r1, sl
 c1084d0:	eaffffc8 	b	c1083f8 <__divdi3+0x3bc>
 c1084d4:	e1530006 	cmp	r3, r6
 c1084d8:	824bb001 	subhi	fp, fp, #1
 c1084dc:	80866004 	addhi	r6, r6, r4
 c1084e0:	eaffff8e 	b	c108320 <__divdi3+0x2e4>

0c1084e4 <__udivdi3>:
 c1084e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1084e8:	e2538000 	subs	r8, r3, #0
 c1084ec:	e24dd00c 	sub	sp, sp, #12
 c1084f0:	e1a05000 	mov	r5, r0
 c1084f4:	e1a04001 	mov	r4, r1
 c1084f8:	e1a06002 	mov	r6, r2
 c1084fc:	e1a0a002 	mov	sl, r2
 c108500:	e1a0b000 	mov	fp, r0
 c108504:	e1a07001 	mov	r7, r1
 c108508:	1a000037 	bne	c1085ec <__udivdi3+0x108>
 c10850c:	e1520001 	cmp	r2, r1
 c108510:	9a000045 	bls	c10862c <__udivdi3+0x148>
 c108514:	e1a00002 	mov	r0, r2
 c108518:	eb0000fe 	bl	c108918 <__clzsi2>
 c10851c:	e3500000 	cmp	r0, #0
 c108520:	12603020 	rsbne	r3, r0, #32
 c108524:	11a03335 	lsrne	r3, r5, r3
 c108528:	11a0a016 	lslne	sl, r6, r0
 c10852c:	11837014 	orrne	r7, r3, r4, lsl r0
 c108530:	e1a0482a 	lsr	r4, sl, #16
 c108534:	11a0b015 	lslne	fp, r5, r0
 c108538:	e1a01004 	mov	r1, r4
 c10853c:	e1a00007 	mov	r0, r7
 c108540:	ebfffdf6 	bl	c107d20 <__aeabi_uidiv>
 c108544:	e1a01004 	mov	r1, r4
 c108548:	e1a08000 	mov	r8, r0
 c10854c:	e1a00007 	mov	r0, r7
 c108550:	ebfffe2f 	bl	c107e14 <__aeabi_uidivmod>
 c108554:	e1a0680a 	lsl	r6, sl, #16
 c108558:	e1a06826 	lsr	r6, r6, #16
 c10855c:	e0030896 	mul	r3, r6, r8
 c108560:	e1a0782b 	lsr	r7, fp, #16
 c108564:	e1877801 	orr	r7, r7, r1, lsl #16
 c108568:	e1530007 	cmp	r3, r7
 c10856c:	9a000005 	bls	c108588 <__udivdi3+0xa4>
 c108570:	e097700a 	adds	r7, r7, sl
 c108574:	e2488001 	sub	r8, r8, #1
 c108578:	2a000002 	bcs	c108588 <__udivdi3+0xa4>
 c10857c:	e1530007 	cmp	r3, r7
 c108580:	82488001 	subhi	r8, r8, #1
 c108584:	8087700a 	addhi	r7, r7, sl
 c108588:	e0637007 	rsb	r7, r3, r7
 c10858c:	e1a01004 	mov	r1, r4
 c108590:	e1a00007 	mov	r0, r7
 c108594:	ebfffde1 	bl	c107d20 <__aeabi_uidiv>
 c108598:	e1a01004 	mov	r1, r4
 c10859c:	e1a05000 	mov	r5, r0
 c1085a0:	e1a00007 	mov	r0, r7
 c1085a4:	ebfffe1a 	bl	c107e14 <__aeabi_uidivmod>
 c1085a8:	e0060695 	mul	r6, r5, r6
 c1085ac:	e1a0080b 	lsl	r0, fp, #16
 c1085b0:	e1a0b820 	lsr	fp, r0, #16
 c1085b4:	e18bb801 	orr	fp, fp, r1, lsl #16
 c1085b8:	e156000b 	cmp	r6, fp
 c1085bc:	9a000004 	bls	c1085d4 <__udivdi3+0xf0>
 c1085c0:	e09bb00a 	adds	fp, fp, sl
 c1085c4:	e2455001 	sub	r5, r5, #1
 c1085c8:	2a000001 	bcs	c1085d4 <__udivdi3+0xf0>
 c1085cc:	e156000b 	cmp	r6, fp
 c1085d0:	82455001 	subhi	r5, r5, #1
 c1085d4:	e1858808 	orr	r8, r5, r8, lsl #16
 c1085d8:	e3a01000 	mov	r1, #0
 c1085dc:	e1a00008 	mov	r0, r8
 c1085e0:	e28dd00c 	add	sp, sp, #12
 c1085e4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c1085e8:	e12fff1e 	bx	lr
 c1085ec:	e1580001 	cmp	r8, r1
 c1085f0:	83a01000 	movhi	r1, #0
 c1085f4:	81a08001 	movhi	r8, r1
 c1085f8:	8afffff7 	bhi	c1085dc <__udivdi3+0xf8>
 c1085fc:	e1a00008 	mov	r0, r8
 c108600:	eb0000c4 	bl	c108918 <__clzsi2>
 c108604:	e2507000 	subs	r7, r0, #0
 c108608:	1a00003e 	bne	c108708 <__udivdi3+0x224>
 c10860c:	e1580004 	cmp	r8, r4
 c108610:	21560005 	cmpcs	r6, r5
 c108614:	83a01000 	movhi	r1, #0
 c108618:	93a01001 	movls	r1, #1
 c10861c:	93a08001 	movls	r8, #1
 c108620:	91a01007 	movls	r1, r7
 c108624:	81a08001 	movhi	r8, r1
 c108628:	eaffffeb 	b	c1085dc <__udivdi3+0xf8>
 c10862c:	e3520000 	cmp	r2, #0
 c108630:	1a000003 	bne	c108644 <__udivdi3+0x160>
 c108634:	e3a00001 	mov	r0, #1
 c108638:	e1a01002 	mov	r1, r2
 c10863c:	ebfffdb7 	bl	c107d20 <__aeabi_uidiv>
 c108640:	e1a0a000 	mov	sl, r0
 c108644:	e1a0000a 	mov	r0, sl
 c108648:	eb0000b2 	bl	c108918 <__clzsi2>
 c10864c:	e2503000 	subs	r3, r0, #0
 c108650:	1a000075 	bne	c10882c <__udivdi3+0x348>
 c108654:	e1a0180a 	lsl	r1, sl, #16
 c108658:	e06a4004 	rsb	r4, sl, r4
 c10865c:	e1a0982a 	lsr	r9, sl, #16
 c108660:	e1a06821 	lsr	r6, r1, #16
 c108664:	e3a07001 	mov	r7, #1
 c108668:	e1a01009 	mov	r1, r9
 c10866c:	e1a00004 	mov	r0, r4
 c108670:	ebfffdaa 	bl	c107d20 <__aeabi_uidiv>
 c108674:	e1a01009 	mov	r1, r9
 c108678:	e1a05000 	mov	r5, r0
 c10867c:	e1a00004 	mov	r0, r4
 c108680:	ebfffde3 	bl	c107e14 <__aeabi_uidivmod>
 c108684:	e0030596 	mul	r3, r6, r5
 c108688:	e1a0282b 	lsr	r2, fp, #16
 c10868c:	e1824801 	orr	r4, r2, r1, lsl #16
 c108690:	e1530004 	cmp	r3, r4
 c108694:	9a000005 	bls	c1086b0 <__udivdi3+0x1cc>
 c108698:	e094400a 	adds	r4, r4, sl
 c10869c:	e2455001 	sub	r5, r5, #1
 c1086a0:	2a000002 	bcs	c1086b0 <__udivdi3+0x1cc>
 c1086a4:	e1530004 	cmp	r3, r4
 c1086a8:	82455001 	subhi	r5, r5, #1
 c1086ac:	8084400a 	addhi	r4, r4, sl
 c1086b0:	e0634004 	rsb	r4, r3, r4
 c1086b4:	e1a01009 	mov	r1, r9
 c1086b8:	e1a00004 	mov	r0, r4
 c1086bc:	ebfffd97 	bl	c107d20 <__aeabi_uidiv>
 c1086c0:	e1a01009 	mov	r1, r9
 c1086c4:	e1a08000 	mov	r8, r0
 c1086c8:	e1a00004 	mov	r0, r4
 c1086cc:	ebfffdd0 	bl	c107e14 <__aeabi_uidivmod>
 c1086d0:	e0060698 	mul	r6, r8, r6
 c1086d4:	e1a0b80b 	lsl	fp, fp, #16
 c1086d8:	e1a0382b 	lsr	r3, fp, #16
 c1086dc:	e183b801 	orr	fp, r3, r1, lsl #16
 c1086e0:	e156000b 	cmp	r6, fp
 c1086e4:	9a000004 	bls	c1086fc <__udivdi3+0x218>
 c1086e8:	e09bb00a 	adds	fp, fp, sl
 c1086ec:	e2488001 	sub	r8, r8, #1
 c1086f0:	2a000001 	bcs	c1086fc <__udivdi3+0x218>
 c1086f4:	e156000b 	cmp	r6, fp
 c1086f8:	82488001 	subhi	r8, r8, #1
 c1086fc:	e1888805 	orr	r8, r8, r5, lsl #16
 c108700:	e1a01007 	mov	r1, r7
 c108704:	eaffffb4 	b	c1085dc <__udivdi3+0xf8>
 c108708:	e267a020 	rsb	sl, r7, #32
 c10870c:	e1a01a36 	lsr	r1, r6, sl
 c108710:	e1a02a35 	lsr	r2, r5, sl
 c108714:	e1818718 	orr	r8, r1, r8, lsl r7
 c108718:	e1a0ba34 	lsr	fp, r4, sl
 c10871c:	e1829714 	orr	r9, r2, r4, lsl r7
 c108720:	e1a0a828 	lsr	sl, r8, #16
 c108724:	e1a0e808 	lsl	lr, r8, #16
 c108728:	e1a0100a 	mov	r1, sl
 c10872c:	e1a0000b 	mov	r0, fp
 c108730:	e1a0482e 	lsr	r4, lr, #16
 c108734:	e58d9004 	str	r9, [sp, #4]
 c108738:	ebfffd78 	bl	c107d20 <__aeabi_uidiv>
 c10873c:	e1a0100a 	mov	r1, sl
 c108740:	e1a09000 	mov	r9, r0
 c108744:	e1a0000b 	mov	r0, fp
 c108748:	ebfffdb1 	bl	c107e14 <__aeabi_uidivmod>
 c10874c:	e0020994 	mul	r2, r4, r9
 c108750:	e59d0004 	ldr	r0, [sp, #4]
 c108754:	e1a0c820 	lsr	ip, r0, #16
 c108758:	e18cb801 	orr	fp, ip, r1, lsl #16
 c10875c:	e152000b 	cmp	r2, fp
 c108760:	e1a03716 	lsl	r3, r6, r7
 c108764:	9a000002 	bls	c108774 <__udivdi3+0x290>
 c108768:	e09bb008 	adds	fp, fp, r8
 c10876c:	e2499001 	sub	r9, r9, #1
 c108770:	3a000060 	bcc	c1088f8 <__udivdi3+0x414>
 c108774:	e062b00b 	rsb	fp, r2, fp
 c108778:	e1a0100a 	mov	r1, sl
 c10877c:	e1a0000b 	mov	r0, fp
 c108780:	e58d3000 	str	r3, [sp]
 c108784:	ebfffd65 	bl	c107d20 <__aeabi_uidiv>
 c108788:	e1a0100a 	mov	r1, sl
 c10878c:	e1a06000 	mov	r6, r0
 c108790:	e1a0000b 	mov	r0, fp
 c108794:	ebfffd9e 	bl	c107e14 <__aeabi_uidivmod>
 c108798:	e0040496 	mul	r4, r6, r4
 c10879c:	e59d0004 	ldr	r0, [sp, #4]
 c1087a0:	e1a0c800 	lsl	ip, r0, #16
 c1087a4:	e1a0382c 	lsr	r3, ip, #16
 c1087a8:	e1832801 	orr	r2, r3, r1, lsl #16
 c1087ac:	e1540002 	cmp	r4, r2
 c1087b0:	e59d3000 	ldr	r3, [sp]
 c1087b4:	9a000002 	bls	c1087c4 <__udivdi3+0x2e0>
 c1087b8:	e0922008 	adds	r2, r2, r8
 c1087bc:	e2466001 	sub	r6, r6, #1
 c1087c0:	3a000048 	bcc	c1088e8 <__udivdi3+0x404>
 c1087c4:	e0644002 	rsb	r4, r4, r2
 c1087c8:	e1868809 	orr	r8, r6, r9, lsl #16
 c1087cc:	e1a02828 	lsr	r2, r8, #16
 c1087d0:	e1a0e823 	lsr	lr, r3, #16
 c1087d4:	e1c80802 	bic	r0, r8, r2, lsl #16
 c1087d8:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c1087dc:	e0030690 	mul	r3, r0, r6
 c1087e0:	e0060692 	mul	r6, r2, r6
 c1087e4:	e000009e 	mul	r0, lr, r0
 c1087e8:	e00e0e92 	mul	lr, r2, lr
 c1087ec:	e0960000 	adds	r0, r6, r0
 c1087f0:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c1087f4:	e0933800 	adds	r3, r3, r0, lsl #16
 c1087f8:	e0aee820 	adc	lr, lr, r0, lsr #16
 c1087fc:	e154000e 	cmp	r4, lr
 c108800:	3a000006 	bcc	c108820 <__udivdi3+0x33c>
 c108804:	13a02000 	movne	r2, #0
 c108808:	03a02001 	moveq	r2, #1
 c10880c:	e1530715 	cmp	r3, r5, lsl r7
 c108810:	93a01000 	movls	r1, #0
 c108814:	82021001 	andhi	r1, r2, #1
 c108818:	e3510000 	cmp	r1, #0
 c10881c:	0affff6e 	beq	c1085dc <__udivdi3+0xf8>
 c108820:	e2488001 	sub	r8, r8, #1
 c108824:	e3a01000 	mov	r1, #0
 c108828:	eaffff6b 	b	c1085dc <__udivdi3+0xf8>
 c10882c:	e2639020 	rsb	r9, r3, #32
 c108830:	e1a0a31a 	lsl	sl, sl, r3
 c108834:	e1a07934 	lsr	r7, r4, r9
 c108838:	e1a08935 	lsr	r8, r5, r9
 c10883c:	e1a0982a 	lsr	r9, sl, #16
 c108840:	e1a0280a 	lsl	r2, sl, #16
 c108844:	e1a01009 	mov	r1, r9
 c108848:	e1a00007 	mov	r0, r7
 c10884c:	e1888314 	orr	r8, r8, r4, lsl r3
 c108850:	e1a0b315 	lsl	fp, r5, r3
 c108854:	e1a06822 	lsr	r6, r2, #16
 c108858:	ebfffd30 	bl	c107d20 <__aeabi_uidiv>
 c10885c:	e1a01009 	mov	r1, r9
 c108860:	e1a05000 	mov	r5, r0
 c108864:	e1a00007 	mov	r0, r7
 c108868:	ebfffd69 	bl	c107e14 <__aeabi_uidivmod>
 c10886c:	e0030596 	mul	r3, r6, r5
 c108870:	e1a04828 	lsr	r4, r8, #16
 c108874:	e1844801 	orr	r4, r4, r1, lsl #16
 c108878:	e1530004 	cmp	r3, r4
 c10887c:	9a000002 	bls	c10888c <__udivdi3+0x3a8>
 c108880:	e094400a 	adds	r4, r4, sl
 c108884:	e2455001 	sub	r5, r5, #1
 c108888:	3a00001e 	bcc	c108908 <__udivdi3+0x424>
 c10888c:	e0634004 	rsb	r4, r3, r4
 c108890:	e1a01009 	mov	r1, r9
 c108894:	e1a00004 	mov	r0, r4
 c108898:	ebfffd20 	bl	c107d20 <__aeabi_uidiv>
 c10889c:	e1a01009 	mov	r1, r9
 c1088a0:	e1a07000 	mov	r7, r0
 c1088a4:	e1a00004 	mov	r0, r4
 c1088a8:	ebfffd59 	bl	c107e14 <__aeabi_uidivmod>
 c1088ac:	e0030796 	mul	r3, r6, r7
 c1088b0:	e1a00808 	lsl	r0, r8, #16
 c1088b4:	e1a0c820 	lsr	ip, r0, #16
 c1088b8:	e18c4801 	orr	r4, ip, r1, lsl #16
 c1088bc:	e1530004 	cmp	r3, r4
 c1088c0:	9a000005 	bls	c1088dc <__udivdi3+0x3f8>
 c1088c4:	e094400a 	adds	r4, r4, sl
 c1088c8:	e2477001 	sub	r7, r7, #1
 c1088cc:	2a000002 	bcs	c1088dc <__udivdi3+0x3f8>
 c1088d0:	e1530004 	cmp	r3, r4
 c1088d4:	82477001 	subhi	r7, r7, #1
 c1088d8:	8084400a 	addhi	r4, r4, sl
 c1088dc:	e0634004 	rsb	r4, r3, r4
 c1088e0:	e1877805 	orr	r7, r7, r5, lsl #16
 c1088e4:	eaffff5f 	b	c108668 <__udivdi3+0x184>
 c1088e8:	e1540002 	cmp	r4, r2
 c1088ec:	82466001 	subhi	r6, r6, #1
 c1088f0:	80822008 	addhi	r2, r2, r8
 c1088f4:	eaffffb2 	b	c1087c4 <__udivdi3+0x2e0>
 c1088f8:	e152000b 	cmp	r2, fp
 c1088fc:	82499001 	subhi	r9, r9, #1
 c108900:	808bb008 	addhi	fp, fp, r8
 c108904:	eaffff9a 	b	c108774 <__udivdi3+0x290>
 c108908:	e1530004 	cmp	r3, r4
 c10890c:	82455001 	subhi	r5, r5, #1
 c108910:	8084400a 	addhi	r4, r4, sl
 c108914:	eaffffdc 	b	c10888c <__udivdi3+0x3a8>

0c108918 <__clzsi2>:
 c108918:	e3a0101c 	mov	r1, #28
 c10891c:	e3500801 	cmp	r0, #65536	; 0x10000
 c108920:	21a00820 	lsrcs	r0, r0, #16
 c108924:	22411010 	subcs	r1, r1, #16
 c108928:	e3500c01 	cmp	r0, #256	; 0x100
 c10892c:	21a00420 	lsrcs	r0, r0, #8
 c108930:	22411008 	subcs	r1, r1, #8
 c108934:	e3500010 	cmp	r0, #16
 c108938:	21a00220 	lsrcs	r0, r0, #4
 c10893c:	22411004 	subcs	r1, r1, #4
 c108940:	e28f2008 	add	r2, pc, #8
 c108944:	e7d20000 	ldrb	r0, [r2, r0]
 c108948:	e0800001 	add	r0, r0, r1
 c10894c:	e12fff1e 	bx	lr
 c108950:	02020304 	.word	0x02020304
 c108954:	01010101 	.word	0x01010101
	...

0c108960 <memcpy>:
 c108960:	e3520003 	cmp	r2, #3
 c108964:	e92d01f0 	push	{r4, r5, r6, r7, r8}
 c108968:	8a000009 	bhi	c108994 <memcpy+0x34>
 c10896c:	e3520000 	cmp	r2, #0
 c108970:	0a000005 	beq	c10898c <memcpy+0x2c>
 c108974:	e3a03000 	mov	r3, #0
 c108978:	e7d1c003 	ldrb	ip, [r1, r3]
 c10897c:	e7c0c003 	strb	ip, [r0, r3]
 c108980:	e2833001 	add	r3, r3, #1
 c108984:	e1530002 	cmp	r3, r2
 c108988:	1afffffa 	bne	c108978 <memcpy+0x18>
 c10898c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
 c108990:	e12fff1e 	bx	lr
 c108994:	e1a03001 	mov	r3, r1
 c108998:	e0802002 	add	r2, r0, r2
 c10899c:	e1a01000 	mov	r1, r0
 c1089a0:	ea000002 	b	c1089b0 <memcpy+0x50>
 c1089a4:	e5dcc000 	ldrb	ip, [ip]
 c1089a8:	e4c1c001 	strb	ip, [r1], #1
 c1089ac:	e2833001 	add	r3, r3, #1
 c1089b0:	e3110003 	tst	r1, #3
 c1089b4:	e1a0c003 	mov	ip, r3
 c1089b8:	1afffff9 	bne	c1089a4 <memcpy+0x44>
 c1089bc:	e2134003 	ands	r4, r3, #3
 c1089c0:	0a000034 	beq	c108a98 <memcpy+0x138>
 c1089c4:	e2645000 	rsb	r5, r4, #0
 c1089c8:	e2647004 	rsb	r7, r4, #4
 c1089cc:	e7933005 	ldr	r3, [r3, r5]
 c1089d0:	e1a04184 	lsl	r4, r4, #3
 c1089d4:	e1a07187 	lsl	r7, r7, #3
 c1089d8:	ea000005 	b	c1089f4 <memcpy+0x94>
 c1089dc:	e28cc004 	add	ip, ip, #4
 c1089e0:	e79c6005 	ldr	r6, [ip, r5]
 c1089e4:	e1a08716 	lsl	r8, r6, r7
 c1089e8:	e1883433 	orr	r3, r8, r3, lsr r4
 c1089ec:	e4813004 	str	r3, [r1], #4
 c1089f0:	e1a03006 	mov	r3, r6
 c1089f4:	e0616002 	rsb	r6, r1, r2
 c1089f8:	e3560003 	cmp	r6, #3
 c1089fc:	cafffff6 	bgt	c1089dc <memcpy+0x7c>
 c108a00:	ea000001 	b	c108a0c <memcpy+0xac>
 c108a04:	e4dc3001 	ldrb	r3, [ip], #1
 c108a08:	e4c13001 	strb	r3, [r1], #1
 c108a0c:	e1520001 	cmp	r2, r1
 c108a10:	8afffffb 	bhi	c108a04 <memcpy+0xa4>
 c108a14:	eaffffdc 	b	c10898c <memcpy+0x2c>
 c108a18:	e513c040 	ldr	ip, [r3, #-64]	; 0xffffffc0
 c108a1c:	e501c040 	str	ip, [r1, #-64]	; 0xffffffc0
 c108a20:	e513c03c 	ldr	ip, [r3, #-60]	; 0xffffffc4
 c108a24:	e501c03c 	str	ip, [r1, #-60]	; 0xffffffc4
 c108a28:	e513c038 	ldr	ip, [r3, #-56]	; 0xffffffc8
 c108a2c:	e501c038 	str	ip, [r1, #-56]	; 0xffffffc8
 c108a30:	e513c034 	ldr	ip, [r3, #-52]	; 0xffffffcc
 c108a34:	e501c034 	str	ip, [r1, #-52]	; 0xffffffcc
 c108a38:	e513c030 	ldr	ip, [r3, #-48]	; 0xffffffd0
 c108a3c:	e501c030 	str	ip, [r1, #-48]	; 0xffffffd0
 c108a40:	e513c02c 	ldr	ip, [r3, #-44]	; 0xffffffd4
 c108a44:	e501c02c 	str	ip, [r1, #-44]	; 0xffffffd4
 c108a48:	e513c028 	ldr	ip, [r3, #-40]	; 0xffffffd8
 c108a4c:	e501c028 	str	ip, [r1, #-40]	; 0xffffffd8
 c108a50:	e513c024 	ldr	ip, [r3, #-36]	; 0xffffffdc
 c108a54:	e501c024 	str	ip, [r1, #-36]	; 0xffffffdc
 c108a58:	e513c020 	ldr	ip, [r3, #-32]	; 0xffffffe0
 c108a5c:	e501c020 	str	ip, [r1, #-32]	; 0xffffffe0
 c108a60:	e513c01c 	ldr	ip, [r3, #-28]	; 0xffffffe4
 c108a64:	e501c01c 	str	ip, [r1, #-28]	; 0xffffffe4
 c108a68:	e513c018 	ldr	ip, [r3, #-24]	; 0xffffffe8
 c108a6c:	e501c018 	str	ip, [r1, #-24]	; 0xffffffe8
 c108a70:	e513c014 	ldr	ip, [r3, #-20]	; 0xffffffec
 c108a74:	e501c014 	str	ip, [r1, #-20]	; 0xffffffec
 c108a78:	e513c010 	ldr	ip, [r3, #-16]
 c108a7c:	e501c010 	str	ip, [r1, #-16]
 c108a80:	e513c00c 	ldr	ip, [r3, #-12]
 c108a84:	e501c00c 	str	ip, [r1, #-12]
 c108a88:	e513c008 	ldr	ip, [r3, #-8]
 c108a8c:	e501c008 	str	ip, [r1, #-8]
 c108a90:	e513c004 	ldr	ip, [r3, #-4]
 c108a94:	e501c004 	str	ip, [r1, #-4]
 c108a98:	e061c002 	rsb	ip, r1, r2
 c108a9c:	e35c003f 	cmp	ip, #63	; 0x3f
 c108aa0:	e1a04003 	mov	r4, r3
 c108aa4:	e1a0c001 	mov	ip, r1
 c108aa8:	e2833040 	add	r3, r3, #64	; 0x40
 c108aac:	e2811040 	add	r1, r1, #64	; 0x40
 c108ab0:	caffffd8 	bgt	c108a18 <memcpy+0xb8>
 c108ab4:	e1a03004 	mov	r3, r4
 c108ab8:	ea000007 	b	c108adc <memcpy+0x17c>
 c108abc:	e5131010 	ldr	r1, [r3, #-16]
 c108ac0:	e50c1010 	str	r1, [ip, #-16]
 c108ac4:	e513100c 	ldr	r1, [r3, #-12]
 c108ac8:	e50c100c 	str	r1, [ip, #-12]
 c108acc:	e5131008 	ldr	r1, [r3, #-8]
 c108ad0:	e50c1008 	str	r1, [ip, #-8]
 c108ad4:	e5131004 	ldr	r1, [r3, #-4]
 c108ad8:	e50c1004 	str	r1, [ip, #-4]
 c108adc:	e1a0100c 	mov	r1, ip
 c108ae0:	e06cc002 	rsb	ip, ip, r2
 c108ae4:	e35c000f 	cmp	ip, #15
 c108ae8:	e1a04003 	mov	r4, r3
 c108aec:	e281c010 	add	ip, r1, #16
 c108af0:	e2833010 	add	r3, r3, #16
 c108af4:	cafffff0 	bgt	c108abc <memcpy+0x15c>
 c108af8:	e1a03004 	mov	r3, r4
 c108afc:	ea000002 	b	c108b0c <memcpy+0x1ac>
 c108b00:	e59cc000 	ldr	ip, [ip]
 c108b04:	e481c004 	str	ip, [r1], #4
 c108b08:	e2833004 	add	r3, r3, #4
 c108b0c:	e061c002 	rsb	ip, r1, r2
 c108b10:	e35c0003 	cmp	ip, #3
 c108b14:	e1a0c003 	mov	ip, r3
 c108b18:	cafffff8 	bgt	c108b00 <memcpy+0x1a0>
 c108b1c:	eaffffba 	b	c108a0c <memcpy+0xac>
